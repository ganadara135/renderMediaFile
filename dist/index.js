module.exports=function(e){function t(t){for(var r,o,i=t[0],a=t[1],s=0,l=[];s<i.length;s++)o=i[s],Object.prototype.hasOwnProperty.call(n,o)&&n[o]&&l.push(n[o][0]),n[o]=0;for(r in a)Object.prototype.hasOwnProperty.call(a,r)&&(e[r]=a[r]);for(u&&u(t);l.length;)l.shift()()}var r={},n={0:0};function o(t){if(r[t])return r[t].exports;var n=r[t]={i:t,l:!1,exports:{}};return e[t].call(n.exports,n,n.exports,o),n.l=!0,n.exports}o.e=function(e){var t=[],r=n[e];if(0!==r)if(r)t.push(r[2]);else{var i=new Promise((function(t,o){r=n[e]=[t,o]}));t.push(r[2]=i);var a,s=document.createElement("script");s.charset="utf-8",s.timeout=120,o.nc&&s.setAttribute("nonce",o.nc),s.src=function(e){return o.p+""+e+".index.js"}(e);var u=new Error;a=function(t){s.onerror=s.onload=null,clearTimeout(l);var r=n[e];if(0!==r){if(r){var o=t&&("load"===t.type?"missing":t.type),i=t&&t.target&&t.target.src;u.message="Loading chunk "+e+" failed.\n("+o+": "+i+")",u.name="ChunkLoadError",u.type=o,u.request=i,r[1](u)}n[e]=void 0}};var l=setTimeout((function(){a({type:"timeout",target:s})}),12e4);s.onerror=s.onload=a,document.head.appendChild(s)}return Promise.all(t)},o.m=e,o.c=r,o.d=function(e,t,r){o.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},o.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},o.t=function(e,t){if(1&t&&(e=o(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(o.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var n in e)o.d(r,n,function(t){return e[t]}.bind(null,n));return r},o.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return o.d(t,"a",t),t},o.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},o.p="",o.oe=function(e){throw console.error(e),e};var i=window.webpackJsonprenderMediaFile=window.webpackJsonprenderMediaFile||[],a=i.push.bind(i);i.push=t,i=i.slice();for(var s=0;s<i.length;s++)t(i[s]);var u=a;return o(o.s=95)}([function(e,t){e.exports=require("react")},function(e,t){e.exports=function(e){return e&&e.__esModule?e:{default:e}}},function(e,t,r){e.exports=r(48)()},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.parseStartTime=function(e){return y(e,f)},t.parseEndTime=function(e){return y(e,h)},t.randomString=function(){return Math.random().toString(36).substr(2,5)},t.queryString=function(e){return Object.keys(e).map((function(t){return"".concat(t,"=").concat(e[t])})).join("&")},t.getSDK=function(e,t){var r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:null,n=arguments.length>3&&void 0!==arguments[3]?arguments[3]:function(){return!0},i=arguments.length>4&&void 0!==arguments[4]?arguments[4]:o.default;if(window[t]&&n(window[t]))return Promise.resolve(window[t]);return new Promise((function(n,o){if(v[e])v[e].push({resolve:n,reject:o});else{v[e]=[{resolve:n,reject:o}];var a=function(t){v[e].forEach((function(e){return e.resolve(t)}))};if(r){var s=window[r];window[r]=function(){s&&s(),a(window[t])}}i(e,(function(n){n?(v[e].forEach((function(e){return e.reject(n)})),v[e]=null):r||a(window[t])}))}}))},t.getConfig=function(e,t,r){var n=(0,i.default)(t.config,e.config),o=!0,s=!1,u=void 0;try{for(var c,f=a.DEPRECATED_CONFIG_PROPS[Symbol.iterator]();!(o=(c=f.next()).done);o=!0){var h=c.value;if(e[h]){var d=h.replace(/Config$/,"");if(n=(0,i.default)(n,l({},d,e[h])),r){var p="ReactPlayer: %c".concat(h," %cis deprecated, please use the config prop instead – ").concat("https://github.com/CookPete/react-player#config-prop");console.warn(p,"font-weight: bold","")}}}}catch(e){s=!0,u=e}finally{try{o||null==f.return||f.return()}finally{if(s)throw u}}return n},t.omit=function(e){for(var t,r=arguments.length,n=new Array(r>1?r-1:0),o=1;o<r;o++)n[o-1]=arguments[o];for(var i=(t=[]).concat.apply(t,n),a={},s=Object.keys(e),u=0,l=s;u<l.length;u++){var c=l[u];-1===i.indexOf(c)&&(a[c]=e[c])}return a},t.callPlayer=function(e){var t;if(!this.player||!this.player[e]){var r="ReactPlayer: ".concat(this.constructor.displayName," player could not call %c").concat(e,"%c – ");return this.player?this.player[e]||(r+="The method was not available"):r+="The player was not available",console.warn(r,"font-weight: bold",""),null}for(var n=arguments.length,o=new Array(n>1?n-1:0),i=1;i<n;i++)o[i-1]=arguments[i];return(t=this.player)[e].apply(t,o)},t.isObject=m,t.isEqual=function e(t,r){if("function"==typeof t&&"function"==typeof r)return!0;if((0,n.isValidElement)(t)&&(0,n.isValidElement)(r))return!0;if(t instanceof Array&&r instanceof Array){if(t.length!==r.length)return!1;for(var o=0;o!==t.length;o++)if(!e(t[o],r[o]))return!1;return!0}if(m(t)&&m(r)){if(Object.keys(t).length!==Object.keys(r).length)return!1;for(var i=0,a=Object.keys(t);i<a.length;i++){var s=a[i];if(!e(t[s],r[s]))return!1}return!0}return t===r},t.isMediaStream=function(e){return"undefined"!=typeof window&&void 0!==window.MediaStream&&e instanceof window.MediaStream};var n=r(0),o=s(r(50)),i=s(r(51)),a=r(20);function s(e){return e&&e.__esModule?e:{default:e}}function u(e){return(u="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function l(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function c(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if(!(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e)))return;var r=[],n=!0,o=!1,i=void 0;try{for(var a,s=e[Symbol.iterator]();!(n=(a=s.next()).done)&&(r.push(a.value),!t||r.length!==t);n=!0);}catch(e){o=!0,i=e}finally{try{n||null==s.return||s.return()}finally{if(o)throw i}}return r}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}var f=/[?&#](?:start|t)=([0-9hms]+)/,h=/[?&#]end=([0-9hms]+)/,d=/(\d+)(h|m|s)/g,p=/^\d+$/;function y(e,t){var r=e.match(t);if(r){var n=r[1];if(n.match(d))return function(e){var t=0,r=d.exec(e);for(;null!==r;){var n=c(r,3),o=n[1],i=n[2];"h"===i&&(t+=60*parseInt(o,10)*60),"m"===i&&(t+=60*parseInt(o,10)),"s"===i&&(t+=parseInt(o,10)),r=d.exec(e)}return t}(n);if(p.test(n))return parseInt(n)}}var v={};function m(e){return null!==e&&"object"===u(e)}},function(e,t){e.exports=function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}},function(e,t){function r(t){return e.exports=r=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)},r(t)}e.exports=r},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){var t,r;return r=t=function(t){function r(){var e,t;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,r);for(var n=arguments.length,o=new Array(n),s=0;s<n;s++)o[s]=arguments[s];return t=function(e,t){if(t&&("object"===l(t)||"function"==typeof t))return t;return y(e)}(this,(e=p(r)).call.apply(e,[this].concat(o))),m(y(t),"config",(0,a.getConfig)(t.props,i.defaultProps,!0)),m(y(t),"getDuration",(function(){return t.player?t.player.getDuration():null})),m(y(t),"getCurrentTime",(function(){return t.player?t.player.getCurrentTime():null})),m(y(t),"getSecondsLoaded",(function(){return t.player?t.player.getSecondsLoaded():null})),m(y(t),"getInternalPlayer",(function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"player";return t.player?t.player.getInternalPlayer(e):null})),m(y(t),"seekTo",(function(e,r){if(!t.player)return null;t.player.seekTo(e,r)})),m(y(t),"ref",(function(e){t.player=e})),t}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&v(e,t)}(r,t),function(e,t,r){t&&d(e.prototype,t);r&&d(e,r)}(r,[{key:"shouldComponentUpdate",value:function(e){return!(0,a.isEqual)(this.props,e)}},{key:"componentDidUpdate",value:function(){this.config=(0,a.getConfig)(this.props,i.defaultProps)}},{key:"render",value:function(){var t=this.config.file,r=t.forceVideo,n=t.forceAudio,u=t.forceHLS,l=t.forceDASH,f=r||n||u||l;if(!e.canPlay(this.props.url)&&!f)return null;var d=this.props,p=d.style,y=d.width,v=d.height,m=d.wrapper,b=(0,a.omit)(this.props,g,i.DEPRECATED_CONFIG_PROPS);return o.default.createElement(m,c({style:h({},p,{width:y,height:v})},b),o.default.createElement(s.default,c({},this.props,{ref:this.ref,activePlayer:e,config:this.config})))}}]),r}(o.Component),m(t,"displayName","".concat(e.displayName,"Player")),m(t,"propTypes",i.propTypes),m(t,"defaultProps",i.defaultProps),m(t,"canPlay",e.canPlay),r};var n,o=function(e){if(e&&e.__esModule)return e;var t=u();if(t&&t.has(e))return t.get(e);var r={};if(null!=e){var n=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var o in e)if(Object.prototype.hasOwnProperty.call(e,o)){var i=n?Object.getOwnPropertyDescriptor(e,o):null;i&&(i.get||i.set)?Object.defineProperty(r,o,i):r[o]=e[o]}}r.default=e,t&&t.set(e,r);return r}(r(0)),i=r(20),a=r(3),s=(n=r(26))&&n.__esModule?n:{default:n};function u(){if("function"!=typeof WeakMap)return null;var e=new WeakMap;return u=function(){return e},e}function l(e){return(l="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function c(){return(c=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var n in r)Object.prototype.hasOwnProperty.call(r,n)&&(e[n]=r[n])}return e}).apply(this,arguments)}function f(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function h(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?f(r,!0).forEach((function(t){m(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):f(r).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function d(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function p(e){return(p=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function y(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function v(e,t){return(v=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function m(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}var g=Object.keys(i.propTypes)},function(e,t){e.exports=function(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}},function(e,t){function r(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}e.exports=function(e,t,n){return t&&r(e.prototype,t),n&&r(e,n),e}},function(e,t,r){var n=r(22),o=r(10);e.exports=function(e,t){return!t||"object"!==n(t)&&"function"!=typeof t?o(e):t}},function(e,t){e.exports=function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}},function(e,t,r){var n=r(31);e.exports=function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&n(e,t)}},function(e,t,r){"use strict";var n=r(1);Object.defineProperty(t,"__esModule",{value:!0}),t.loadFromFile=t.isCancelException=t.makePageCallback=t.cancelRunningTask=t.makeCancellable=t.displayCORSWarning=t.errorOnDev=t.warnOnDev=t.getPixelRatio=t.callIfDefined=t.dataURItoUint8Array=t.isDataURI=t.isFile=t.isBlob=t.isArrayBuffer=t.isString=t.isProvided=t.isDefined=t.isProduction=t.isLocalFileSystem=t.isBrowser=void 0;var o=n(r(4)),i=n(r(9)),a=n(r(5)),s=n(r(11)),u=n(r(75)),l="undefined"!=typeof window;t.isBrowser=l;var c=l&&"file:"===window.location.protocol;t.isLocalFileSystem=c;t.isProduction=!0;var f=function(e){return void 0!==e};t.isDefined=f;t.isProvided=function(e){return f(e)&&null!==e};var h=function(e){return"string"==typeof e};t.isString=h;t.isArrayBuffer=function(e){return e instanceof ArrayBuffer};t.isBlob=function(e){if(!l)throw new Error("Attempted to check if a variable is a Blob on a non-browser environment.");return e instanceof Blob};t.isFile=function(e){if(!l)throw new Error("Attempted to check if a variable is a File on a non-browser environment.");return e instanceof File};var d=function(e){return h(e)&&/^data:/.test(e)};t.isDataURI=d;t.dataURItoUint8Array=function(e){if(!d(e))throw new Error("dataURItoUint8Array was provided with an argument which is not a valid data URI.");var t;t=e.split(",")[0].indexOf("base64")>=0?atob(e.split(",")[1]):unescape(e.split(",")[1]);for(var r=new Uint8Array(t.length),n=0;n<t.length;n+=1)r[n]=t.charCodeAt(n);return r};t.callIfDefined=function(e){if(e&&"function"==typeof e){for(var t=arguments.length,r=new Array(t>1?t-1:0),n=1;n<t;n++)r[n-1]=arguments[n];e.apply(void 0,r)}};t.getPixelRatio=function(){return l&&window.devicePixelRatio||1};var p=function(e){},y=function(){for(var e=arguments.length,t=new Array(e),r=0;r<e;r++)t[r]=arguments[r];return p.apply(void 0,["warn"].concat(t))};t.warnOnDev=y;t.errorOnDev=function(){for(var e=arguments.length,t=new Array(e),r=0;r<e;r++)t[r]=arguments[r];return p.apply(void 0,["error"].concat(t))};t.displayCORSWarning=function(){c&&y("Loading PDF as base64 strings/URLs might not work on protocols other than HTTP/HTTPS. On Google Chrome, you can use --allow-file-access-from-files flag for debugging purposes.")};var v=function(e){function t(e,r){var n;return(0,o.default)(this,t),(n=(0,i.default)(this,(0,a.default)(t).call(this,e,r))).name="PromiseCancelledException",n.message=e,n.type=r,n}return(0,s.default)(t,e),t}((0,u.default)(Error));t.makeCancellable=function(e){var t=!1;return{promise:new Promise((function(r,n){e.then((function(){return t?n(new v("Promise cancelled")):r.apply(void 0,arguments)}),(function(e){return n(t?new v("Promise cancelled"):e)}))})),cancel:function(){t=!0}}};t.cancelRunningTask=function(e){e&&e.cancel&&e.cancel()};t.makePageCallback=function(e,t){return Object.defineProperty(e,"width",{get:function(){return this.view[2]*t},configurable:!0}),Object.defineProperty(e,"height",{get:function(){return this.view[3]*t},configurable:!0}),Object.defineProperty(e,"originalWidth",{get:function(){return this.view[2]},configurable:!0}),Object.defineProperty(e,"originalHeight",{get:function(){return this.view[3]},configurable:!0}),e};t.isCancelException=function(e){return"RenderingCancelledException"===e.name||"PromiseCancelledException"===e.name};t.loadFromFile=function(e){return new Promise((function(t,r){var n=new FileReader;return n.onload=function(){return t(new Uint8Array(n.result))},n.onerror=function(e){switch(e.target.error.code){case e.target.error.NOT_FOUND_ERR:return r(new Error("Error while reading a file: File not found."));case e.target.error.NOT_READABLE_ERR:return r(new Error("Error while reading a file: File not readable."));case e.target.error.SECURITY_ERR:return r(new Error("Error while reading a file: Security error."));case e.target.error.ABORT_ERR:return r(new Error("Error while reading a file: Aborted."));default:return r(new Error("Error while reading a file."))}},n.readAsArrayBuffer(e),null}))}},function(e,t,r){var n=r(22);function o(){if("function"!=typeof WeakMap)return null;var e=new WeakMap;return o=function(){return e},e}e.exports=function(e){if(e&&e.__esModule)return e;if(null===e||"object"!==n(e)&&"function"!=typeof e)return{default:e};var t=o();if(t&&t.has(e))return t.get(e);var r={},i=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var a in e)if(Object.prototype.hasOwnProperty.call(e,a)){var s=i?Object.getOwnPropertyDescriptor(e,a):null;s&&(s.get||s.set)?Object.defineProperty(r,a,s):r[a]=e[a]}return r.default=e,t&&t.set(e,r),r}},function(e,t){function r(){return e.exports=r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var n in r)Object.prototype.hasOwnProperty.call(r,n)&&(e[n]=r[n])}return e},r.apply(this,arguments)}e.exports=r},function(e,t,r){"use strict";var n=r(1);Object.defineProperty(t,"__esModule",{value:!0}),t.isRotate=t.isRenderMode=t.isPdf=t.isPageNumber=t.isPageIndex=t.isPage=t.isLinkTarget=t.isLinkService=t.isFile=t.isClassName=t.eventsProps=void 0;var o=n(r(22)),i=n(r(78)),a=n(r(2)),s=n(r(82)),u=r(23),l=r(12),c=n(r(42)),f=(0,s.default)((function(){var e={};return[].concat((0,i.default)(u.mouseEvents),(0,i.default)(u.touchEvents),(0,i.default)(u.keyboardEvents)).forEach((function(t){e[t]=a.default.func})),e}));t.eventsProps=f;var h=[a.default.string,a.default.instanceOf(ArrayBuffer),a.default.shape({data:a.default.object,httpHeaders:a.default.object,range:a.default.object,url:a.default.string,withCredentials:a.default.bool})];"undefined"!=typeof File&&h.push(a.default.instanceOf(File)),"undefined"!=typeof Blob&&h.push(a.default.instanceOf(Blob));var d=a.default.oneOfType([a.default.string,a.default.arrayOf(a.default.string)]);t.isClassName=d;var p=a.default.oneOfType(h);t.isFile=p;var y=a.default.instanceOf(c.default);t.isLinkService=y;var v=a.default.oneOf(["_self","_blank","_parent","_top"]);t.isLinkTarget=v;var m=a.default.shape({_transport:a.default.shape({fontLoader:a.default.object.isRequired}).isRequired,commonObjs:a.default.shape({_objs:a.default.object.isRequired}).isRequired,getAnnotations:a.default.func.isRequired,getTextContent:a.default.func.isRequired,getViewport:a.default.func.isRequired,render:a.default.func.isRequired});t.isPage=m;t.isPageIndex=function(e,t,r){var n=e[t],i=e.pageNumber,a=e.pdf;if(!(0,l.isDefined)(a))return null;if((0,l.isDefined)(n)){if("number"!=typeof n)return new Error("`".concat(t,"` of type `").concat((0,o.default)(n),"` supplied to `").concat(r,"`, expected `number`."));if(n<0)return new Error("Expected `".concat(t,"` to be greater or equal to 0."));var s=a.numPages;if(n+1>s)return new Error("Expected `".concat(t,"` to be less or equal to ").concat(s-1,"."))}else if(!(0,l.isDefined)(i))return new Error("`".concat(t,"` not supplied. Either pageIndex or pageNumber must be supplied to `").concat(r,"`."));return null};t.isPageNumber=function(e,t,r){var n=e[t],i=e.pageIndex,a=e.pdf;if(!(0,l.isDefined)(a))return null;if((0,l.isDefined)(n)){if("number"!=typeof n)return new Error("`".concat(t,"` of type `").concat((0,o.default)(n),"` supplied to `").concat(r,"`, expected `number`."));if(n<1)return new Error("Expected `".concat(t,"` to be greater or equal to 1."));var s=a.numPages;if(n>s)return new Error("Expected `".concat(t,"` to be less or equal to ").concat(s,"."))}else if(!(0,l.isDefined)(i))return new Error("`".concat(t,"` not supplied. Either pageIndex or pageNumber must be supplied to `").concat(r,"`."));return null};var g=a.default.oneOfType([a.default.shape({getDestination:a.default.func.isRequired,getOutline:a.default.func.isRequired,getPage:a.default.func.isRequired,numPages:a.default.number.isRequired}),a.default.bool]);t.isPdf=g;var b=a.default.oneOf(["canvas","none","svg"]);t.isRenderMode=b;var _=a.default.oneOf([0,90,180,270]);t.isRotate=_},function(e,t,r){e.exports=r(71)},function(e,t){function r(e,t,r,n,o,i,a){try{var s=e[i](a),u=s.value}catch(e){return void r(e)}s.done?t(u):Promise.resolve(u).then(n,o)}e.exports=function(e){return function(){var t=this,n=arguments;return new Promise((function(o,i){var a=e.apply(t,n);function s(e){r(a,o,i,s,u,"next",e)}function u(e){r(a,o,i,s,u,"throw",e)}s(void 0)}))}}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var n=(0,r(0).createContext)(null);t.default=n},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var n=(0,r(0).createContext)(null);t.default=n},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.DEPRECATED_CONFIG_PROPS=t.defaultProps=t.propTypes=void 0;var n,o=(n=r(2))&&n.__esModule?n:{default:n};var i=o.default.string,a=o.default.bool,s=o.default.number,u=o.default.array,l=o.default.oneOfType,c=o.default.shape,f=o.default.object,h=o.default.func,d=o.default.node,p={url:l([i,u,f]),playing:a,loop:a,controls:a,volume:s,muted:a,playbackRate:s,width:l([i,s]),height:l([i,s]),style:f,progressInterval:s,playsinline:a,pip:a,light:l([a,i]),playIcon:d,wrapper:l([i,h,c({render:h.isRequired})]),config:c({soundcloud:c({options:f,preload:a}),youtube:c({playerVars:f,embedOptions:f,preload:a}),facebook:c({appId:i,version:i}),dailymotion:c({params:f,preload:a}),vimeo:c({playerOptions:f,preload:a}),file:c({attributes:f,tracks:u,forceVideo:a,forceAudio:a,forceHLS:a,forceDASH:a,hlsOptions:f,hlsVersion:i,dashVersion:i}),wistia:c({options:f}),mixcloud:c({options:f}),twitch:c({options:f})}),onReady:h,onStart:h,onPlay:h,onPause:h,onBuffer:h,onBufferEnd:h,onEnded:h,onError:h,onDuration:h,onSeek:h,onProgress:h,onEnablePIP:h,onDisablePIP:h};t.propTypes=p;t.defaultProps={playing:!1,loop:!1,controls:!1,volume:null,muted:!1,playbackRate:1,width:"640px",height:"360px",style:{},progressInterval:1e3,playsinline:!1,pip:!1,light:!1,wrapper:"div",config:{soundcloud:{options:{visual:!0,buying:!1,liking:!1,download:!1,sharing:!1,show_comments:!1,show_playcount:!1}},youtube:{playerVars:{playsinline:1,showinfo:0,rel:0,iv_load_policy:3,modestbranding:1},embedOptions:{},preload:!1},facebook:{appId:"1309697205772819",version:"v3.3"},dailymotion:{params:{api:1,"endscreen-enable":!1},preload:!1},vimeo:{playerOptions:{autopause:!1,byline:!1,portrait:!1,title:!1},preload:!1},file:{attributes:{},tracks:[],forceVideo:!1,forceAudio:!1,forceHLS:!1,forceDASH:!1,hlsOptions:{},hlsVersion:"0.10.1",dashVersion:"2.9.2"},wistia:{options:{}},mixcloud:{options:{hide_cover:1}},twitch:{options:{}}},onReady:function(){},onStart:function(){},onPlay:function(){},onPause:function(){},onBuffer:function(){},onBufferEnd:function(){},onEnded:function(){},onError:function(){},onDuration:function(){},onSeek:function(){},onProgress:function(){},onEnablePIP:function(){},onDisablePIP:function(){}};t.DEPRECATED_CONFIG_PROPS=["soundcloudConfig","youtubeConfig","facebookConfig","dailymotionConfig","vimeoConfig","fileConfig","wistiaConfig"]},function(e,t,r){(function(t,n,o){var i;i=function(){return function(e){var t={};function r(n){if(t[n])return t[n].exports;var o=t[n]={i:n,l:!1,exports:{}};return e[n].call(o.exports,o,o.exports,r),o.l=!0,o.exports}return r.m=e,r.c=t,r.d=function(e,t,n){r.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},r.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r.t=function(e,t){if(1&t&&(e=r(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)r.d(n,o,function(t){return e[t]}.bind(null,o));return n},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,"a",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p="",r(r.s=0)}([function(e,t,r){"use strict";var n=r(1),o=r(146),i=r(162),a=r(163),s=r(151),u=r(164),l=r(156),c=r(153);if(r(4)()){var f=r(165).PDFNodeStream;o.setPDFNetworkStreamFactory((function(e){return new f(e)}))}else if("undefined"!=typeof Response&&"body"in Response.prototype&&"undefined"!=typeof ReadableStream){var h=r(168).PDFFetchStream;o.setPDFNetworkStreamFactory((function(e){return new h(e)}))}else{var d=r(169).PDFNetworkStream;o.setPDFNetworkStreamFactory((function(e){return new d(e)}))}t.build=o.build,t.version=o.version,t.getDocument=o.getDocument,t.LoopbackPort=o.LoopbackPort,t.PDFDataRangeTransport=o.PDFDataRangeTransport,t.PDFWorker=o.PDFWorker,t.renderTextLayer=i.renderTextLayer,t.AnnotationLayer=a.AnnotationLayer,t.createPromiseCapability=n.createPromiseCapability,t.PasswordResponses=n.PasswordResponses,t.InvalidPDFException=n.InvalidPDFException,t.MissingPDFException=n.MissingPDFException,t.SVGGraphics=u.SVGGraphics,t.NativeImageDecoding=n.NativeImageDecoding,t.CMapCompressionType=n.CMapCompressionType,t.PermissionFlag=n.PermissionFlag,t.UnexpectedResponseException=n.UnexpectedResponseException,t.OPS=n.OPS,t.VerbosityLevel=n.VerbosityLevel,t.UNSUPPORTED_FEATURES=n.UNSUPPORTED_FEATURES,t.createValidAbsoluteUrl=n.createValidAbsoluteUrl,t.createObjectURL=n.createObjectURL,t.removeNullCharacters=n.removeNullCharacters,t.shadow=n.shadow,t.Util=n.Util,t.ReadableStream=n.ReadableStream,t.URL=n.URL,t.RenderingCancelledException=s.RenderingCancelledException,t.getFilenameFromUrl=s.getFilenameFromUrl,t.LinkTarget=s.LinkTarget,t.addLinkAttributes=s.addLinkAttributes,t.loadScript=s.loadScript,t.GlobalWorkerOptions=l.GlobalWorkerOptions,t.apiCompatibilityParams=c.apiCompatibilityParams},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.toRomanNumerals=function(e){var t=arguments.length>1&&void 0!==arguments[1]&&arguments[1];c(Number.isInteger(e)&&e>0,"The number should be a positive integer.");for(var r,n=[];e>=1e3;)e-=1e3,n.push("M");r=e/100|0,e%=100,n.push(E[r]),r=e/10|0,e%=10,n.push(E[10+r]),n.push(E[20+e]);var o=n.join("");return t?o.toLowerCase():o},t.arrayByteLength=P,t.arraysToBytes=function(e){if(1===e.length&&e[0]instanceof Uint8Array)return e[0];var t,r,n,o=0,i=e.length;for(t=0;t<i;t++)r=e[t],n=P(r),o+=n;var a=0,s=new Uint8Array(o);for(t=0;t<i;t++)(r=e[t])instanceof Uint8Array||(r="string"==typeof r?S(r):new Uint8Array(r)),n=r.byteLength,s.set(r,a),a+=n;return s},t.assert=c,t.bytesToString=function(e){c(null!==e&&"object"===i(e)&&void 0!==e.length,"Invalid argument for bytesToString");var t=e.length;if(t<8192)return String.fromCharCode.apply(null,e);for(var r=[],n=0;n<t;n+=8192){var o=Math.min(n+8192,t),a=e.subarray(n,o);r.push(String.fromCharCode.apply(null,a))}return r.join("")},t.createPromiseCapability=function(){var e=Object.create(null),t=!1;return Object.defineProperty(e,"settled",{get:function(){return t}}),e.promise=new Promise((function(r,n){e.resolve=function(e){t=!0,r(e)},e.reject=function(e){t=!0,n(e)}})),e},t.deprecated=function(e){console.log("Deprecated API usage: "+e)},t.getInheritableProperty=function(e){for(var t,r=e.dict,n=e.key,o=e.getArray,i=void 0!==o&&o,a=e.stopWhenFound,s=void 0===a||a,l=0;r;){var c=i?r.getArray(n):r.get(n);if(void 0!==c){if(s)return c;t||(t=[]),t.push(c)}if(++l>100){u('getInheritableProperty: maximum loop count exceeded for "'.concat(n,'"'));break}r=r.get("Parent")}return t},t.getLookupTableFactory=function(e){var t;return function(){return e&&(t=Object.create(null),e(t),e=null),t}},t.getVerbosityLevel=function(){return s},t.info=function(e){s>=a.INFOS&&console.log("Info: "+e)},t.isArrayBuffer=function(e){return"object"===i(e)&&null!==e&&void 0!==e.byteLength},t.isBool=function(e){return"boolean"==typeof e},t.isEmptyObj=function(e){for(var t in e)return!1;return!0},t.isNum=function(e){return"number"==typeof e},t.isString=function(e){return"string"==typeof e},t.isSpace=function(e){return 32===e||9===e||13===e||10===e},t.isSameOrigin=function(e,t){try{var r=new o.URL(e);if(!r.origin||"null"===r.origin)return!1}catch(e){return!1}var n=new o.URL(t,r);return r.origin===n.origin},t.createValidAbsoluteUrl=function(e,t){if(!e)return null;try{var r=t?new o.URL(e,t):new o.URL(e);if(function(e){if(!e)return!1;switch(e.protocol){case"http:":case"https:":case"ftp:":case"mailto:":case"tel:":return!0;default:return!1}}(r))return r}catch(e){}return null},t.isLittleEndian=function(){var e=new Uint8Array(4);return e[0]=1,1===new Uint32Array(e.buffer,0,1)[0]},t.isEvalSupported=function(){try{return new Function(""),!0}catch(e){return!1}},t.log2=function(e){return e<=0?0:Math.ceil(Math.log2(e))},t.readInt8=function(e,t){return e[t]<<24>>24},t.readUint16=function(e,t){return e[t]<<8|e[t+1]},t.readUint32=function(e,t){return(e[t]<<24|e[t+1]<<16|e[t+2]<<8|e[t+3])>>>0},t.removeNullCharacters=function(e){return"string"!=typeof e?(u("The argument for removeNullCharacters must be a string."),e):e.replace(w,"")},t.setVerbosityLevel=function(e){Number.isInteger(e)&&(s=e)},t.shadow=function(e,t,r){return Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!1}),r},t.string32=function(e){return String.fromCharCode(e>>24&255,e>>16&255,e>>8&255,255&e)},t.stringToBytes=S,t.stringToPDFString=function(e){var t,r=e.length,n=[];if("þ"===e[0]&&"ÿ"===e[1])for(t=2;t<r;t+=2)n.push(String.fromCharCode(e.charCodeAt(t)<<8|e.charCodeAt(t+1)));else for(t=0;t<r;++t){var o=x[e.charCodeAt(t)];n.push(o?String.fromCharCode(o):e.charAt(t))}return n.join("")},t.stringToUTF8String=function(e){return decodeURIComponent(escape(e))},t.utf8StringToString=function(e){return unescape(encodeURIComponent(e))},t.warn=u,t.unreachable=l,Object.defineProperty(t,"ReadableStream",{enumerable:!0,get:function(){return n.ReadableStream}}),Object.defineProperty(t,"URL",{enumerable:!0,get:function(){return o.URL}}),t.createObjectURL=t.FormatError=t.XRefParseException=t.XRefEntryException=t.Util=t.UnknownErrorException=t.UnexpectedResponseException=t.TextRenderingMode=t.StreamType=t.PermissionFlag=t.PasswordResponses=t.PasswordException=t.NativeImageDecoding=t.MissingPDFException=t.MissingDataException=t.InvalidPDFException=t.AbortException=t.CMapCompressionType=t.ImageKind=t.FontType=t.AnnotationType=t.AnnotationFlag=t.AnnotationFieldFlag=t.AnnotationBorderStyleType=t.UNSUPPORTED_FEATURES=t.VerbosityLevel=t.OPS=t.IDENTITY_MATRIX=t.FONT_IDENTITY_MATRIX=void 0,r(2);var n=r(142),o=r(144);function i(e){return(i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}t.IDENTITY_MATRIX=[1,0,0,1,0,0],t.FONT_IDENTITY_MATRIX=[.001,0,0,.001,0,0],t.NativeImageDecoding={NONE:"none",DECODE:"decode",DISPLAY:"display"},t.PermissionFlag={PRINT:4,MODIFY_CONTENTS:8,COPY:16,MODIFY_ANNOTATIONS:32,FILL_INTERACTIVE_FORMS:256,COPY_FOR_ACCESSIBILITY:512,ASSEMBLE:1024,PRINT_HIGH_QUALITY:2048},t.TextRenderingMode={FILL:0,STROKE:1,FILL_STROKE:2,INVISIBLE:3,FILL_ADD_TO_PATH:4,STROKE_ADD_TO_PATH:5,FILL_STROKE_ADD_TO_PATH:6,ADD_TO_PATH:7,FILL_STROKE_MASK:3,ADD_TO_PATH_FLAG:4},t.ImageKind={GRAYSCALE_1BPP:1,RGB_24BPP:2,RGBA_32BPP:3},t.AnnotationType={TEXT:1,LINK:2,FREETEXT:3,LINE:4,SQUARE:5,CIRCLE:6,POLYGON:7,POLYLINE:8,HIGHLIGHT:9,UNDERLINE:10,SQUIGGLY:11,STRIKEOUT:12,STAMP:13,CARET:14,INK:15,POPUP:16,FILEATTACHMENT:17,SOUND:18,MOVIE:19,WIDGET:20,SCREEN:21,PRINTERMARK:22,TRAPNET:23,WATERMARK:24,THREED:25,REDACT:26},t.AnnotationFlag={INVISIBLE:1,HIDDEN:2,PRINT:4,NOZOOM:8,NOROTATE:16,NOVIEW:32,READONLY:64,LOCKED:128,TOGGLENOVIEW:256,LOCKEDCONTENTS:512},t.AnnotationFieldFlag={READONLY:1,REQUIRED:2,NOEXPORT:4,MULTILINE:4096,PASSWORD:8192,NOTOGGLETOOFF:16384,RADIO:32768,PUSHBUTTON:65536,COMBO:131072,EDIT:262144,SORT:524288,FILESELECT:1048576,MULTISELECT:2097152,DONOTSPELLCHECK:4194304,DONOTSCROLL:8388608,COMB:16777216,RICHTEXT:33554432,RADIOSINUNISON:33554432,COMMITONSELCHANGE:67108864},t.AnnotationBorderStyleType={SOLID:1,DASHED:2,BEVELED:3,INSET:4,UNDERLINE:5},t.StreamType={UNKNOWN:0,FLATE:1,LZW:2,DCT:3,JPX:4,JBIG:5,A85:6,AHX:7,CCF:8,RL:9},t.FontType={UNKNOWN:0,TYPE1:1,TYPE1C:2,CIDFONTTYPE0:3,CIDFONTTYPE0C:4,TRUETYPE:5,CIDFONTTYPE2:6,TYPE3:7,OPENTYPE:8,TYPE0:9,MMTYPE1:10};var a={ERRORS:0,WARNINGS:1,INFOS:5};t.VerbosityLevel=a,t.CMapCompressionType={NONE:0,BINARY:1,STREAM:2},t.OPS={dependency:1,setLineWidth:2,setLineCap:3,setLineJoin:4,setMiterLimit:5,setDash:6,setRenderingIntent:7,setFlatness:8,setGState:9,save:10,restore:11,transform:12,moveTo:13,lineTo:14,curveTo:15,curveTo2:16,curveTo3:17,closePath:18,rectangle:19,stroke:20,closeStroke:21,fill:22,eoFill:23,fillStroke:24,eoFillStroke:25,closeFillStroke:26,closeEOFillStroke:27,endPath:28,clip:29,eoClip:30,beginText:31,endText:32,setCharSpacing:33,setWordSpacing:34,setHScale:35,setLeading:36,setFont:37,setTextRenderingMode:38,setTextRise:39,moveText:40,setLeadingMoveText:41,setTextMatrix:42,nextLine:43,showText:44,showSpacedText:45,nextLineShowText:46,nextLineSetSpacingShowText:47,setCharWidth:48,setCharWidthAndBounds:49,setStrokeColorSpace:50,setFillColorSpace:51,setStrokeColor:52,setStrokeColorN:53,setFillColor:54,setFillColorN:55,setStrokeGray:56,setFillGray:57,setStrokeRGBColor:58,setFillRGBColor:59,setStrokeCMYKColor:60,setFillCMYKColor:61,shadingFill:62,beginInlineImage:63,beginImageData:64,endInlineImage:65,paintXObject:66,markPoint:67,markPointProps:68,beginMarkedContent:69,beginMarkedContentProps:70,endMarkedContent:71,beginCompat:72,endCompat:73,paintFormXObjectBegin:74,paintFormXObjectEnd:75,beginGroup:76,endGroup:77,beginAnnotations:78,endAnnotations:79,beginAnnotation:80,endAnnotation:81,paintJpegXObject:82,paintImageMaskXObject:83,paintImageMaskXObjectGroup:84,paintImageXObject:85,paintInlineImageXObject:86,paintInlineImageXObjectGroup:87,paintImageXObjectRepeat:88,paintImageMaskXObjectRepeat:89,paintSolidColorImageMask:90,constructPath:91},t.UNSUPPORTED_FEATURES={unknown:"unknown",forms:"forms",javaScript:"javaScript",smask:"smask",shadingPattern:"shadingPattern",font:"font"},t.PasswordResponses={NEED_PASSWORD:1,INCORRECT_PASSWORD:2};var s=a.WARNINGS;function u(e){s>=a.WARNINGS&&console.log("Warning: "+e)}function l(e){throw new Error(e)}function c(e,t){e||l(t)}var f=function(){function e(e,t){this.name="PasswordException",this.message=e,this.code=t}return e.prototype=new Error,e.constructor=e,e}();t.PasswordException=f;var h=function(){function e(e,t){this.name="UnknownErrorException",this.message=e,this.details=t}return e.prototype=new Error,e.constructor=e,e}();t.UnknownErrorException=h;var d=function(){function e(e){this.name="InvalidPDFException",this.message=e}return e.prototype=new Error,e.constructor=e,e}();t.InvalidPDFException=d;var p=function(){function e(e){this.name="MissingPDFException",this.message=e}return e.prototype=new Error,e.constructor=e,e}();t.MissingPDFException=p;var y=function(){function e(e,t){this.name="UnexpectedResponseException",this.message=e,this.status=t}return e.prototype=new Error,e.constructor=e,e}();t.UnexpectedResponseException=y;var v=function(){function e(e,t){this.begin=e,this.end=t,this.message="Missing data ["+e+", "+t+")"}return e.prototype=new Error,e.prototype.name="MissingDataException",e.constructor=e,e}();t.MissingDataException=v;var m=function(){function e(e){this.message=e}return e.prototype=new Error,e.prototype.name="XRefEntryException",e.constructor=e,e}();t.XRefEntryException=m;var g=function(){function e(e){this.message=e}return e.prototype=new Error,e.prototype.name="XRefParseException",e.constructor=e,e}();t.XRefParseException=g;var b=function(){function e(e){this.message=e}return e.prototype=new Error,e.prototype.name="FormatError",e.constructor=e,e}();t.FormatError=b;var _=function(){function e(e){this.name="AbortException",this.message=e}return e.prototype=new Error,e.constructor=e,e}();t.AbortException=_;var w=/\x00/g;function S(e){c("string"==typeof e,"Invalid argument for stringToBytes");for(var t=e.length,r=new Uint8Array(t),n=0;n<t;++n)r[n]=255&e.charCodeAt(n);return r}function P(e){return void 0!==e.length?e.length:(c(void 0!==e.byteLength),e.byteLength)}var A=function(){function e(){}var t=["rgb(",0,",",0,",",0,")"];return e.makeCssRgb=function(e,r,n){return t[1]=e,t[3]=r,t[5]=n,t.join("")},e.transform=function(e,t){return[e[0]*t[0]+e[2]*t[1],e[1]*t[0]+e[3]*t[1],e[0]*t[2]+e[2]*t[3],e[1]*t[2]+e[3]*t[3],e[0]*t[4]+e[2]*t[5]+e[4],e[1]*t[4]+e[3]*t[5]+e[5]]},e.applyTransform=function(e,t){return[e[0]*t[0]+e[1]*t[2]+t[4],e[0]*t[1]+e[1]*t[3]+t[5]]},e.applyInverseTransform=function(e,t){var r=t[0]*t[3]-t[1]*t[2];return[(e[0]*t[3]-e[1]*t[2]+t[2]*t[5]-t[4]*t[3])/r,(-e[0]*t[1]+e[1]*t[0]+t[4]*t[1]-t[5]*t[0])/r]},e.getAxialAlignedBoundingBox=function(t,r){var n=e.applyTransform(t,r),o=e.applyTransform(t.slice(2,4),r),i=e.applyTransform([t[0],t[3]],r),a=e.applyTransform([t[2],t[1]],r);return[Math.min(n[0],o[0],i[0],a[0]),Math.min(n[1],o[1],i[1],a[1]),Math.max(n[0],o[0],i[0],a[0]),Math.max(n[1],o[1],i[1],a[1])]},e.inverseTransform=function(e){var t=e[0]*e[3]-e[1]*e[2];return[e[3]/t,-e[1]/t,-e[2]/t,e[0]/t,(e[2]*e[5]-e[4]*e[3])/t,(e[4]*e[1]-e[5]*e[0])/t]},e.apply3dTransform=function(e,t){return[e[0]*t[0]+e[1]*t[1]+e[2]*t[2],e[3]*t[0]+e[4]*t[1]+e[5]*t[2],e[6]*t[0]+e[7]*t[1]+e[8]*t[2]]},e.singularValueDecompose2dScale=function(e){var t=[e[0],e[2],e[1],e[3]],r=e[0]*t[0]+e[1]*t[2],n=e[0]*t[1]+e[1]*t[3],o=e[2]*t[0]+e[3]*t[2],i=e[2]*t[1]+e[3]*t[3],a=(r+i)/2,s=Math.sqrt((r+i)*(r+i)-4*(r*i-o*n))/2,u=a+s||1,l=a-s||1;return[Math.sqrt(u),Math.sqrt(l)]},e.normalizeRect=function(e){var t=e.slice(0);return e[0]>e[2]&&(t[0]=e[2],t[2]=e[0]),e[1]>e[3]&&(t[1]=e[3],t[3]=e[1]),t},e.intersect=function(t,r){function n(e,t){return e-t}var o=[t[0],t[2],r[0],r[2]].sort(n),i=[t[1],t[3],r[1],r[3]].sort(n),a=[];return t=e.normalizeRect(t),r=e.normalizeRect(r),(o[0]===t[0]&&o[1]===r[0]||o[0]===r[0]&&o[1]===t[0])&&(a[0]=o[1],a[2]=o[2],(i[0]===t[1]&&i[1]===r[1]||i[0]===r[1]&&i[1]===t[1])&&(a[1]=i[1],a[3]=i[2],a))},e}();t.Util=A;var k,E=["","C","CC","CCC","CD","D","DC","DCC","DCCC","CM","","X","XX","XXX","XL","L","LX","LXX","LXXX","XC","","I","II","III","IV","V","VI","VII","VIII","IX"],x=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,728,711,710,729,733,731,730,732,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8226,8224,8225,8230,8212,8211,402,8260,8249,8250,8722,8240,8222,8220,8221,8216,8217,8218,8482,64257,64258,321,338,352,376,381,305,322,339,353,382,0,8364],O=(k="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=",function(e,t){var r=arguments.length>2&&void 0!==arguments[2]&&arguments[2];if(!r&&o.URL.createObjectURL){var n=new Blob([e],{type:t});return o.URL.createObjectURL(n)}for(var i="data:"+t+";base64,",a=0,s=e.length;a<s;a+=3){var u=255&e[a],l=255&e[a+1],c=255&e[a+2],f=u>>2,h=(3&u)<<4|l>>4,d=a+1<s?(15&l)<<2|c>>6:64,p=a+2<s?63&c:64;i+=k[f]+k[h]+k[d]+k[p]}return i});t.createObjectURL=O},function(e,r,n){"use strict";function o(e){return(o="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}var i=n(3);if(!i._pdfjsCompatibilityChecked){i._pdfjsCompatibilityChecked=!0;var a=n(4),s="object"===("undefined"==typeof window?"undefined":o(window))&&"object"===("undefined"==typeof document?"undefined":o(document));!i.btoa&&a()&&(i.btoa=function(e){return t.from(e,"binary").toString("base64")}),!i.atob&&a()&&(i.atob=function(e){return t.from(e,"base64").toString("binary")}),s&&void 0===Element.prototype.remove&&(Element.prototype.remove=function(){this.parentNode&&this.parentNode.removeChild(this)}),function(){if(s&&!a()){var e=document.createElement("div");if(e.classList.add("testOne","testTwo"),!0!==e.classList.contains("testOne")||!0!==e.classList.contains("testTwo")){var t=DOMTokenList.prototype.add,r=DOMTokenList.prototype.remove;DOMTokenList.prototype.add=function(){for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];for(var o=0;o<r.length;o++){var i=r[o];t.call(this,i)}},DOMTokenList.prototype.remove=function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];for(var o=0;o<t.length;o++){var i=t[o];r.call(this,i)}}}}}(),s&&!a()&&!1!==document.createElement("div").classList.toggle("test",0)&&(DOMTokenList.prototype.toggle=function(e){var t=arguments.length>1?!!arguments[1]:!this.contains(e);return this[t?"add":"remove"](e),t}),String.prototype.startsWith||n(5),String.prototype.endsWith||n(35),String.prototype.includes||n(37),Array.prototype.includes||n(39),Array.from||n(46),Object.assign||n(69),Math.log2||(Math.log2=n(74)),Number.isNaN||(Number.isNaN=n(76)),Number.isInteger||(Number.isInteger=n(78)),i.Promise&&i.Promise.prototype&&i.Promise.prototype.finally||(i.Promise=n(81)),i.WeakMap||(i.WeakMap=n(101)),i.WeakSet||(i.WeakSet=n(118)),String.codePointAt||(String.codePointAt=n(122)),String.fromCodePoint||(String.fromCodePoint=n(124)),i.Symbol||n(126),String.prototype.padStart||n(133),String.prototype.padEnd||n(137),Object.values||(Object.values=n(139))}},function(e,t,r){"use strict";e.exports="undefined"!=typeof window&&window.Math===Math?window:void 0!==n&&n.Math===Math?n:"undefined"!=typeof self&&self.Math===Math?self:{}},function(e,t,r){"use strict";function n(e){return(n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}e.exports=function(){return"object"===(void 0===o?"undefined":n(o))&&o+""=="[object process]"&&!o.versions.nw}},function(e,t,r){"use strict";r(6),e.exports=r(9).String.startsWith},function(e,t,r){"use strict";var n=r(7),o=r(25),i=r(27),a="".startsWith;n(n.P+n.F*r(34)("startsWith"),"String",{startsWith:function(e){var t=i(this,e,"startsWith"),r=o(Math.min(arguments.length>1?arguments[1]:void 0,t.length)),n=String(e);return a?a.call(t,n,r):t.slice(r,r+n.length)===n}})},function(e,t,r){"use strict";var n=r(8),o=r(9),i=r(10),a=r(20),s=r(23),u=function e(t,r,u){var l,c,f,h,d=t&e.F,p=t&e.G,y=t&e.P,v=t&e.B,m=p?n:t&e.S?n[r]||(n[r]={}):(n[r]||{}).prototype,g=p?o:o[r]||(o[r]={}),b=g.prototype||(g.prototype={});for(l in p&&(u=r),u)f=((c=!d&&m&&void 0!==m[l])?m:u)[l],h=v&&c?s(f,n):y&&"function"==typeof f?s(Function.call,f):f,m&&a(m,l,f,t&e.U),g[l]!=f&&i(g,l,h),y&&b[l]!=f&&(b[l]=f)};n.core=o,u.F=1,u.G=2,u.S=4,u.P=8,u.B=16,u.W=32,u.U=64,u.R=128,e.exports=u},function(e,t,r){"use strict";var n=e.exports="undefined"!=typeof window&&window.Math==Math?window:"undefined"!=typeof self&&self.Math==Math?self:Function("return this")();"number"==typeof __g&&(__g=n)},function(e,t,r){"use strict";var n=e.exports={version:"2.6.2"};"number"==typeof __e&&(__e=n)},function(e,t,r){"use strict";var n=r(11),o=r(19);e.exports=r(15)?function(e,t,r){return n.f(e,t,o(1,r))}:function(e,t,r){return e[t]=r,e}},function(e,t,r){"use strict";var n=r(12),o=r(14),i=r(18),a=Object.defineProperty;t.f=r(15)?Object.defineProperty:function(e,t,r){if(n(e),t=i(t,!0),n(r),o)try{return a(e,t,r)}catch(e){}if("get"in r||"set"in r)throw TypeError("Accessors not supported!");return"value"in r&&(e[t]=r.value),e}},function(e,t,r){"use strict";var n=r(13);e.exports=function(e){if(!n(e))throw TypeError(e+" is not an object!");return e}},function(e,t,r){"use strict";function n(e){return(n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}e.exports=function(e){return"object"===n(e)?null!==e:"function"==typeof e}},function(e,t,r){"use strict";e.exports=!r(15)&&!r(16)((function(){return 7!=Object.defineProperty(r(17)("div"),"a",{get:function(){return 7}}).a}))},function(e,t,r){"use strict";e.exports=!r(16)((function(){return 7!=Object.defineProperty({},"a",{get:function(){return 7}}).a}))},function(e,t,r){"use strict";e.exports=function(e){try{return!!e()}catch(e){return!0}}},function(e,t,r){"use strict";var n=r(13),o=r(8).document,i=n(o)&&n(o.createElement);e.exports=function(e){return i?o.createElement(e):{}}},function(e,t,r){"use strict";var n=r(13);e.exports=function(e,t){if(!n(e))return e;var r,o;if(t&&"function"==typeof(r=e.toString)&&!n(o=r.call(e)))return o;if("function"==typeof(r=e.valueOf)&&!n(o=r.call(e)))return o;if(!t&&"function"==typeof(r=e.toString)&&!n(o=r.call(e)))return o;throw TypeError("Can't convert object to primitive value")}},function(e,t,r){"use strict";e.exports=function(e,t){return{enumerable:!(1&e),configurable:!(2&e),writable:!(4&e),value:t}}},function(e,t,r){"use strict";var n=r(8),o=r(10),i=r(21),a=r(22)("src"),s=Function.toString,u=(""+s).split("toString");r(9).inspectSource=function(e){return s.call(e)},(e.exports=function(e,t,r,s){var l="function"==typeof r;l&&(i(r,"name")||o(r,"name",t)),e[t]!==r&&(l&&(i(r,a)||o(r,a,e[t]?""+e[t]:u.join(String(t)))),e===n?e[t]=r:s?e[t]?e[t]=r:o(e,t,r):(delete e[t],o(e,t,r)))})(Function.prototype,"toString",(function(){return"function"==typeof this&&this[a]||s.call(this)}))},function(e,t,r){"use strict";var n={}.hasOwnProperty;e.exports=function(e,t){return n.call(e,t)}},function(e,t,r){"use strict";var n=0,o=Math.random();e.exports=function(e){return"Symbol(".concat(void 0===e?"":e,")_",(++n+o).toString(36))}},function(e,t,r){"use strict";var n=r(24);e.exports=function(e,t,r){if(n(e),void 0===t)return e;switch(r){case 1:return function(r){return e.call(t,r)};case 2:return function(r,n){return e.call(t,r,n)};case 3:return function(r,n,o){return e.call(t,r,n,o)}}return function(){return e.apply(t,arguments)}}},function(e,t,r){"use strict";e.exports=function(e){if("function"!=typeof e)throw TypeError(e+" is not a function!");return e}},function(e,t,r){"use strict";var n=r(26),o=Math.min;e.exports=function(e){return e>0?o(n(e),9007199254740991):0}},function(e,t,r){"use strict";var n=Math.ceil,o=Math.floor;e.exports=function(e){return isNaN(e=+e)?0:(e>0?o:n)(e)}},function(e,t,r){"use strict";var n=r(28),o=r(33);e.exports=function(e,t,r){if(n(t))throw TypeError("String#"+r+" doesn't accept regex!");return String(o(e))}},function(e,t,r){"use strict";var n=r(13),o=r(29),i=r(30)("match");e.exports=function(e){var t;return n(e)&&(void 0!==(t=e[i])?!!t:"RegExp"==o(e))}},function(e,t,r){"use strict";var n={}.toString;e.exports=function(e){return n.call(e).slice(8,-1)}},function(e,t,r){"use strict";var n=r(31)("wks"),o=r(22),i=r(8).Symbol,a="function"==typeof i;(e.exports=function(e){return n[e]||(n[e]=a&&i[e]||(a?i:o)("Symbol."+e))}).store=n},function(e,t,r){"use strict";var n=r(9),o=r(8),i=o["__core-js_shared__"]||(o["__core-js_shared__"]={});(e.exports=function(e,t){return i[e]||(i[e]=void 0!==t?t:{})})("versions",[]).push({version:n.version,mode:r(32)?"pure":"global",copyright:"© 2019 Denis Pushkarev (zloirock.ru)"})},function(e,t,r){"use strict";e.exports=!1},function(e,t,r){"use strict";e.exports=function(e){if(null==e)throw TypeError("Can't call method on  "+e);return e}},function(e,t,r){"use strict";var n=r(30)("match");e.exports=function(e){var t=/./;try{"/./"[e](t)}catch(r){try{return t[n]=!1,!"/./"[e](t)}catch(e){}}return!0}},function(e,t,r){"use strict";r(36),e.exports=r(9).String.endsWith},function(e,t,r){"use strict";var n=r(7),o=r(25),i=r(27),a="".endsWith;n(n.P+n.F*r(34)("endsWith"),"String",{endsWith:function(e){var t=i(this,e,"endsWith"),r=arguments.length>1?arguments[1]:void 0,n=o(t.length),s=void 0===r?n:Math.min(o(r),n),u=String(e);return a?a.call(t,u,s):t.slice(s-u.length,s)===u}})},function(e,t,r){"use strict";r(38),e.exports=r(9).String.includes},function(e,t,r){"use strict";var n=r(7),o=r(27);n(n.P+n.F*r(34)("includes"),"String",{includes:function(e){return!!~o(this,e,"includes").indexOf(e,arguments.length>1?arguments[1]:void 0)}})},function(e,t,r){"use strict";r(40),e.exports=r(9).Array.includes},function(e,t,r){"use strict";var n=r(7),o=r(41)(!0);n(n.P,"Array",{includes:function(e){return o(this,e,arguments.length>1?arguments[1]:void 0)}}),r(45)("includes")},function(e,t,r){"use strict";var n=r(42),o=r(25),i=r(44);e.exports=function(e){return function(t,r,a){var s,u=n(t),l=o(u.length),c=i(a,l);if(e&&r!=r){for(;l>c;)if((s=u[c++])!=s)return!0}else for(;l>c;c++)if((e||c in u)&&u[c]===r)return e||c||0;return!e&&-1}}},function(e,t,r){"use strict";var n=r(43),o=r(33);e.exports=function(e){return n(o(e))}},function(e,t,r){"use strict";var n=r(29);e.exports=Object("z").propertyIsEnumerable(0)?Object:function(e){return"String"==n(e)?e.split(""):Object(e)}},function(e,t,r){"use strict";var n=r(26),o=Math.max,i=Math.min;e.exports=function(e,t){return(e=n(e))<0?o(e+t,0):i(e,t)}},function(e,t,r){"use strict";var n=r(30)("unscopables"),o=Array.prototype;null==o[n]&&r(10)(o,n,{}),e.exports=function(e){o[n][e]=!0}},function(e,t,r){"use strict";r(47),r(62),e.exports=r(9).Array.from},function(e,t,r){"use strict";var n=r(48)(!0);r(49)(String,"String",(function(e){this._t=String(e),this._i=0}),(function(){var e,t=this._t,r=this._i;return r>=t.length?{value:void 0,done:!0}:(e=n(t,r),this._i+=e.length,{value:e,done:!1})}))},function(e,t,r){"use strict";var n=r(26),o=r(33);e.exports=function(e){return function(t,r){var i,a,s=String(o(t)),u=n(r),l=s.length;return u<0||u>=l?e?"":void 0:(i=s.charCodeAt(u))<55296||i>56319||u+1===l||(a=s.charCodeAt(u+1))<56320||a>57343?e?s.charAt(u):i:e?s.slice(u,u+2):a-56320+(i-55296<<10)+65536}}},function(e,t,r){"use strict";var n=r(32),o=r(7),i=r(20),a=r(10),s=r(50),u=r(51),l=r(59),c=r(60),f=r(30)("iterator"),h=!([].keys&&"next"in[].keys()),d=function(){return this};e.exports=function(e,t,r,p,y,v,m){u(r,t,p);var g,b,_,w=function(e){if(!h&&e in k)return k[e];switch(e){case"keys":case"values":return function(){return new r(this,e)}}return function(){return new r(this,e)}},S=t+" Iterator",P="values"==y,A=!1,k=e.prototype,E=k[f]||k["@@iterator"]||y&&k[y],x=E||w(y),O=y?P?w("entries"):x:void 0,R="Array"==t&&k.entries||E;if(R&&(_=c(R.call(new e)))!==Object.prototype&&_.next&&(l(_,S,!0),n||"function"==typeof _[f]||a(_,f,d)),P&&E&&"values"!==E.name&&(A=!0,x=function(){return E.call(this)}),n&&!m||!h&&!A&&k[f]||a(k,f,x),s[t]=x,s[S]=d,y)if(g={values:P?x:w("values"),keys:v?x:w("keys"),entries:O},m)for(b in g)b in k||i(k,b,g[b]);else o(o.P+o.F*(h||A),t,g);return g}},function(e,t,r){"use strict";e.exports={}},function(e,t,r){"use strict";var n=r(52),o=r(19),i=r(59),a={};r(10)(a,r(30)("iterator"),(function(){return this})),e.exports=function(e,t,r){e.prototype=n(a,{next:o(1,r)}),i(e,t+" Iterator")}},function(e,t,r){"use strict";var n=r(12),o=r(53),i=r(57),a=r(56)("IE_PROTO"),s=function(){},u=function(){var e,t=r(17)("iframe"),n=i.length;for(t.style.display="none",r(58).appendChild(t),t.src="javascript:",(e=t.contentWindow.document).open(),e.write("<script>document.F=Object<\/script>"),e.close(),u=e.F;n--;)delete u.prototype[i[n]];return u()};e.exports=Object.create||function(e,t){var r;return null!==e?(s.prototype=n(e),r=new s,s.prototype=null,r[a]=e):r=u(),void 0===t?r:o(r,t)}},function(e,t,r){"use strict";var n=r(11),o=r(12),i=r(54);e.exports=r(15)?Object.defineProperties:function(e,t){o(e);for(var r,a=i(t),s=a.length,u=0;s>u;)n.f(e,r=a[u++],t[r]);return e}},function(e,t,r){"use strict";var n=r(55),o=r(57);e.exports=Object.keys||function(e){return n(e,o)}},function(e,t,r){"use strict";var n=r(21),o=r(42),i=r(41)(!1),a=r(56)("IE_PROTO");e.exports=function(e,t){var r,s=o(e),u=0,l=[];for(r in s)r!=a&&n(s,r)&&l.push(r);for(;t.length>u;)n(s,r=t[u++])&&(~i(l,r)||l.push(r));return l}},function(e,t,r){"use strict";var n=r(31)("keys"),o=r(22);e.exports=function(e){return n[e]||(n[e]=o(e))}},function(e,t,r){"use strict";e.exports="constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf".split(",")},function(e,t,r){"use strict";var n=r(8).document;e.exports=n&&n.documentElement},function(e,t,r){"use strict";var n=r(11).f,o=r(21),i=r(30)("toStringTag");e.exports=function(e,t,r){e&&!o(e=r?e:e.prototype,i)&&n(e,i,{configurable:!0,value:t})}},function(e,t,r){"use strict";var n=r(21),o=r(61),i=r(56)("IE_PROTO"),a=Object.prototype;e.exports=Object.getPrototypeOf||function(e){return e=o(e),n(e,i)?e[i]:"function"==typeof e.constructor&&e instanceof e.constructor?e.constructor.prototype:e instanceof Object?a:null}},function(e,t,r){"use strict";var n=r(33);e.exports=function(e){return Object(n(e))}},function(e,t,r){"use strict";var n=r(23),o=r(7),i=r(61),a=r(63),s=r(64),u=r(25),l=r(65),c=r(66);o(o.S+o.F*!r(68)((function(e){Array.from(e)})),"Array",{from:function(e){var t,r,o,f,h=i(e),d="function"==typeof this?this:Array,p=arguments.length,y=p>1?arguments[1]:void 0,v=void 0!==y,m=0,g=c(h);if(v&&(y=n(y,p>2?arguments[2]:void 0,2)),null==g||d==Array&&s(g))for(r=new d(t=u(h.length));t>m;m++)l(r,m,v?y(h[m],m):h[m]);else for(f=g.call(h),r=new d;!(o=f.next()).done;m++)l(r,m,v?a(f,y,[o.value,m],!0):o.value);return r.length=m,r}})},function(e,t,r){"use strict";var n=r(12);e.exports=function(e,t,r,o){try{return o?t(n(r)[0],r[1]):t(r)}catch(t){var i=e.return;throw void 0!==i&&n(i.call(e)),t}}},function(e,t,r){"use strict";var n=r(50),o=r(30)("iterator"),i=Array.prototype;e.exports=function(e){return void 0!==e&&(n.Array===e||i[o]===e)}},function(e,t,r){"use strict";var n=r(11),o=r(19);e.exports=function(e,t,r){t in e?n.f(e,t,o(0,r)):e[t]=r}},function(e,t,r){"use strict";var n=r(67),o=r(30)("iterator"),i=r(50);e.exports=r(9).getIteratorMethod=function(e){if(null!=e)return e[o]||e["@@iterator"]||i[n(e)]}},function(e,t,r){"use strict";var n=r(29),o=r(30)("toStringTag"),i="Arguments"==n(function(){return arguments}());e.exports=function(e){var t,r,a;return void 0===e?"Undefined":null===e?"Null":"string"==typeof(r=function(e,t){try{return e[t]}catch(e){}}(t=Object(e),o))?r:i?n(t):"Object"==(a=n(t))&&"function"==typeof t.callee?"Arguments":a}},function(e,t,r){"use strict";var n=r(30)("iterator"),o=!1;try{var i=[7][n]();i.return=function(){o=!0},Array.from(i,(function(){throw 2}))}catch(e){}e.exports=function(e,t){if(!t&&!o)return!1;var r=!1;try{var i=[7],a=i[n]();a.next=function(){return{done:r=!0}},i[n]=function(){return a},e(i)}catch(e){}return r}},function(e,t,r){"use strict";r(70),e.exports=r(9).Object.assign},function(e,t,r){"use strict";var n=r(7);n(n.S+n.F,"Object",{assign:r(71)})},function(e,t,r){"use strict";var n=r(54),o=r(72),i=r(73),a=r(61),s=r(43),u=Object.assign;e.exports=!u||r(16)((function(){var e={},t={},r=Symbol(),n="abcdefghijklmnopqrst";return e[r]=7,n.split("").forEach((function(e){t[e]=e})),7!=u({},e)[r]||Object.keys(u({},t)).join("")!=n}))?function(e,t){for(var r=a(e),u=arguments.length,l=1,c=o.f,f=i.f;u>l;)for(var h,d=s(arguments[l++]),p=c?n(d).concat(c(d)):n(d),y=p.length,v=0;y>v;)f.call(d,h=p[v++])&&(r[h]=d[h]);return r}:u},function(e,t,r){"use strict";t.f=Object.getOwnPropertySymbols},function(e,t,r){"use strict";t.f={}.propertyIsEnumerable},function(e,t,r){"use strict";r(75),e.exports=r(9).Math.log2},function(e,t,r){"use strict";var n=r(7);n(n.S,"Math",{log2:function(e){return Math.log(e)/Math.LN2}})},function(e,t,r){"use strict";r(77),e.exports=r(9).Number.isNaN},function(e,t,r){"use strict";var n=r(7);n(n.S,"Number",{isNaN:function(e){return e!=e}})},function(e,t,r){"use strict";r(79),e.exports=r(9).Number.isInteger},function(e,t,r){"use strict";var n=r(7);n(n.S,"Number",{isInteger:r(80)})},function(e,t,r){"use strict";var n=r(13),o=Math.floor;e.exports=function(e){return!n(e)&&isFinite(e)&&o(e)===e}},function(e,t,r){"use strict";r(82),r(47),r(83),r(86),r(99),r(100),e.exports=r(9).Promise},function(e,t,r){"use strict";var n=r(67),o={};o[r(30)("toStringTag")]="z",o+""!="[object z]"&&r(20)(Object.prototype,"toString",(function(){return"[object "+n(this)+"]"}),!0)},function(e,t,r){"use strict";for(var n=r(84),o=r(54),i=r(20),a=r(8),s=r(10),u=r(50),l=r(30),c=l("iterator"),f=l("toStringTag"),h=u.Array,d={CSSRuleList:!0,CSSStyleDeclaration:!1,CSSValueList:!1,ClientRectList:!1,DOMRectList:!1,DOMStringList:!1,DOMTokenList:!0,DataTransferItemList:!1,FileList:!1,HTMLAllCollection:!1,HTMLCollection:!1,HTMLFormElement:!1,HTMLSelectElement:!1,MediaList:!0,MimeTypeArray:!1,NamedNodeMap:!1,NodeList:!0,PaintRequestList:!1,Plugin:!1,PluginArray:!1,SVGLengthList:!1,SVGNumberList:!1,SVGPathSegList:!1,SVGPointList:!1,SVGStringList:!1,SVGTransformList:!1,SourceBufferList:!1,StyleSheetList:!0,TextTrackCueList:!1,TextTrackList:!1,TouchList:!1},p=o(d),y=0;y<p.length;y++){var v,m=p[y],g=d[m],b=a[m],_=b&&b.prototype;if(_&&(_[c]||s(_,c,h),_[f]||s(_,f,m),u[m]=h,g))for(v in n)_[v]||i(_,v,n[v],!0)}},function(e,t,r){"use strict";var n=r(45),o=r(85),i=r(50),a=r(42);e.exports=r(49)(Array,"Array",(function(e,t){this._t=a(e),this._i=0,this._k=t}),(function(){var e=this._t,t=this._k,r=this._i++;return!e||r>=e.length?(this._t=void 0,o(1)):o(0,"keys"==t?r:"values"==t?e[r]:[r,e[r]])}),"values"),i.Arguments=i.Array,n("keys"),n("values"),n("entries")},function(e,t,r){"use strict";e.exports=function(e,t){return{value:t,done:!!e}}},function(e,t,r){"use strict";var n,o,i,a,s=r(32),u=r(8),l=r(23),c=r(67),f=r(7),h=r(13),d=r(24),p=r(87),y=r(88),v=r(89),m=r(90).set,g=r(92)(),b=r(93),_=r(94),w=r(95),S=r(96),P=u.TypeError,A=u.process,k=A&&A.versions,E=k&&k.v8||"",x=u.Promise,O="process"==c(A),R=function(){},C=o=b.f,T=!!function(){try{var e=x.resolve(1),t=(e.constructor={})[r(30)("species")]=function(e){e(R,R)};return(O||"function"==typeof PromiseRejectionEvent)&&e.then(R)instanceof t&&0!==E.indexOf("6.6")&&-1===w.indexOf("Chrome/66")}catch(e){}}(),j=function(e){var t;return!(!h(e)||"function"!=typeof(t=e.then))&&t},L=function(e,t){if(!e._n){e._n=!0;var r=e._c;g((function(){for(var n=e._v,o=1==e._s,i=0,a=function(t){var r,i,a,s=o?t.ok:t.fail,u=t.resolve,l=t.reject,c=t.domain;try{s?(o||(2==e._h&&M(e),e._h=1),!0===s?r=n:(c&&c.enter(),r=s(n),c&&(c.exit(),a=!0)),r===t.promise?l(P("Promise-chain cycle")):(i=j(r))?i.call(r,u,l):u(r)):l(n)}catch(e){c&&!a&&c.exit(),l(e)}};r.length>i;)a(r[i++]);e._c=[],e._n=!1,t&&!e._h&&I(e)}))}},I=function(e){m.call(u,(function(){var t,r,n,o=e._v,i=D(e);if(i&&(t=_((function(){O?A.emit("unhandledRejection",o,e):(r=u.onunhandledrejection)?r({promise:e,reason:o}):(n=u.console)&&n.error&&n.error("Unhandled promise rejection",o)})),e._h=O||D(e)?2:1),e._a=void 0,i&&t.e)throw t.v}))},D=function(e){return 1!==e._h&&0===(e._a||e._c).length},M=function(e){m.call(u,(function(){var t;O?A.emit("rejectionHandled",e):(t=u.onrejectionhandled)&&t({promise:e,reason:e._v})}))},F=function(e){var t=this;t._d||(t._d=!0,(t=t._w||t)._v=e,t._s=2,t._a||(t._a=t._c.slice()),L(t,!0))},N=function e(t){var r,n=this;if(!n._d){n._d=!0,n=n._w||n;try{if(n===t)throw P("Promise can't be resolved itself");(r=j(t))?g((function(){var o={_w:n,_d:!1};try{r.call(t,l(e,o,1),l(F,o,1))}catch(e){F.call(o,e)}})):(n._v=t,n._s=1,L(n,!1))}catch(e){F.call({_w:n,_d:!1},e)}}};T||(x=function(e){p(this,x,"Promise","_h"),d(e),n.call(this);try{e(l(N,this,1),l(F,this,1))}catch(e){F.call(this,e)}},(n=function(e){this._c=[],this._a=void 0,this._s=0,this._d=!1,this._v=void 0,this._h=0,this._n=!1}).prototype=r(97)(x.prototype,{then:function(e,t){var r=C(v(this,x));return r.ok="function"!=typeof e||e,r.fail="function"==typeof t&&t,r.domain=O?A.domain:void 0,this._c.push(r),this._a&&this._a.push(r),this._s&&L(this,!1),r.promise},catch:function(e){return this.then(void 0,e)}}),i=function(){var e=new n;this.promise=e,this.resolve=l(N,e,1),this.reject=l(F,e,1)},b.f=C=function(e){return e===x||e===a?new i(e):o(e)}),f(f.G+f.W+f.F*!T,{Promise:x}),r(59)(x,"Promise"),r(98)("Promise"),a=r(9).Promise,f(f.S+f.F*!T,"Promise",{reject:function(e){var t=C(this);return(0,t.reject)(e),t.promise}}),f(f.S+f.F*(s||!T),"Promise",{resolve:function(e){return S(s&&this===a?x:this,e)}}),f(f.S+f.F*!(T&&r(68)((function(e){x.all(e).catch(R)}))),"Promise",{all:function(e){var t=this,r=C(t),n=r.resolve,o=r.reject,i=_((function(){var r=[],i=0,a=1;y(e,!1,(function(e){var s=i++,u=!1;r.push(void 0),a++,t.resolve(e).then((function(e){u||(u=!0,r[s]=e,--a||n(r))}),o)})),--a||n(r)}));return i.e&&o(i.v),r.promise},race:function(e){var t=this,r=C(t),n=r.reject,o=_((function(){y(e,!1,(function(e){t.resolve(e).then(r.resolve,n)}))}));return o.e&&n(o.v),r.promise}})},function(e,t,r){"use strict";e.exports=function(e,t,r,n){if(!(e instanceof t)||void 0!==n&&n in e)throw TypeError(r+": incorrect invocation!");return e}},function(e,t,r){"use strict";var n=r(23),o=r(63),i=r(64),a=r(12),s=r(25),u=r(66),l={},c={},f=e.exports=function(e,t,r,f,h){var d,p,y,v,m=h?function(){return e}:u(e),g=n(r,f,t?2:1),b=0;if("function"!=typeof m)throw TypeError(e+" is not iterable!");if(i(m)){for(d=s(e.length);d>b;b++)if((v=t?g(a(p=e[b])[0],p[1]):g(e[b]))===l||v===c)return v}else for(y=m.call(e);!(p=y.next()).done;)if((v=o(y,g,p.value,t))===l||v===c)return v};f.BREAK=l,f.RETURN=c},function(e,t,r){"use strict";var n=r(12),o=r(24),i=r(30)("species");e.exports=function(e,t){var r,a=n(e).constructor;return void 0===a||null==(r=n(a)[i])?t:o(r)}},function(e,t,r){"use strict";var n,o,i,a=r(23),s=r(91),u=r(58),l=r(17),c=r(8),f=c.process,h=c.setImmediate,d=c.clearImmediate,p=c.MessageChannel,y=c.Dispatch,v=0,m={},g=function(){var e=+this;if(m.hasOwnProperty(e)){var t=m[e];delete m[e],t()}},b=function(e){g.call(e.data)};h&&d||(h=function(e){for(var t=[],r=1;arguments.length>r;)t.push(arguments[r++]);return m[++v]=function(){s("function"==typeof e?e:Function(e),t)},n(v),v},d=function(e){delete m[e]},"process"==r(29)(f)?n=function(e){f.nextTick(a(g,e,1))}:y&&y.now?n=function(e){y.now(a(g,e,1))}:p?(i=(o=new p).port2,o.port1.onmessage=b,n=a(i.postMessage,i,1)):c.addEventListener&&"function"==typeof postMessage&&!c.importScripts?(n=function(e){c.postMessage(e+"","*")},c.addEventListener("message",b,!1)):n="onreadystatechange"in l("script")?function(e){u.appendChild(l("script")).onreadystatechange=function(){u.removeChild(this),g.call(e)}}:function(e){setTimeout(a(g,e,1),0)}),e.exports={set:h,clear:d}},function(e,t,r){"use strict";e.exports=function(e,t,r){var n=void 0===r;switch(t.length){case 0:return n?e():e.call(r);case 1:return n?e(t[0]):e.call(r,t[0]);case 2:return n?e(t[0],t[1]):e.call(r,t[0],t[1]);case 3:return n?e(t[0],t[1],t[2]):e.call(r,t[0],t[1],t[2]);case 4:return n?e(t[0],t[1],t[2],t[3]):e.call(r,t[0],t[1],t[2],t[3])}return e.apply(r,t)}},function(e,t,r){"use strict";var n=r(8),o=r(90).set,i=n.MutationObserver||n.WebKitMutationObserver,a=n.process,s=n.Promise,u="process"==r(29)(a);e.exports=function(){var e,t,r,l=function(){var n,o;for(u&&(n=a.domain)&&n.exit();e;){o=e.fn,e=e.next;try{o()}catch(n){throw e?r():t=void 0,n}}t=void 0,n&&n.enter()};if(u)r=function(){a.nextTick(l)};else if(!i||n.navigator&&n.navigator.standalone)if(s&&s.resolve){var c=s.resolve(void 0);r=function(){c.then(l)}}else r=function(){o.call(n,l)};else{var f=!0,h=document.createTextNode("");new i(l).observe(h,{characterData:!0}),r=function(){h.data=f=!f}}return function(n){var o={fn:n,next:void 0};t&&(t.next=o),e||(e=o,r()),t=o}}},function(e,t,r){"use strict";var n=r(24);function o(e){var t,r;this.promise=new e((function(e,n){if(void 0!==t||void 0!==r)throw TypeError("Bad Promise constructor");t=e,r=n})),this.resolve=n(t),this.reject=n(r)}e.exports.f=function(e){return new o(e)}},function(e,t,r){"use strict";e.exports=function(e){try{return{e:!1,v:e()}}catch(e){return{e:!0,v:e}}}},function(e,t,r){"use strict";var n=r(8).navigator;e.exports=n&&n.userAgent||""},function(e,t,r){"use strict";var n=r(12),o=r(13),i=r(93);e.exports=function(e,t){if(n(e),o(t)&&t.constructor===e)return t;var r=i.f(e);return(0,r.resolve)(t),r.promise}},function(e,t,r){"use strict";var n=r(20);e.exports=function(e,t,r){for(var o in t)n(e,o,t[o],r);return e}},function(e,t,r){"use strict";var n=r(8),o=r(11),i=r(15),a=r(30)("species");e.exports=function(e){var t=n[e];i&&t&&!t[a]&&o.f(t,a,{configurable:!0,get:function(){return this}})}},function(e,t,r){"use strict";var n=r(7),o=r(9),i=r(8),a=r(89),s=r(96);n(n.P+n.R,"Promise",{finally:function(e){var t=a(this,o.Promise||i.Promise),r="function"==typeof e;return this.then(r?function(r){return s(t,e()).then((function(){return r}))}:e,r?function(r){return s(t,e()).then((function(){throw r}))}:e)}})},function(e,t,r){"use strict";var n=r(7),o=r(93),i=r(94);n(n.S,"Promise",{try:function(e){var t=o.f(this),r=i(e);return(r.e?t.reject:t.resolve)(r.v),t.promise}})},function(e,t,r){"use strict";r(82),r(83),r(102),r(114),r(116),e.exports=r(9).WeakMap},function(e,t,r){"use strict";var n,o=r(103)(0),i=r(20),a=r(107),s=r(71),u=r(108),l=r(13),c=r(16),f=r(109),h=a.getWeak,d=Object.isExtensible,p=u.ufstore,y={},v=function(e){return function(){return e(this,arguments.length>0?arguments[0]:void 0)}},m={get:function(e){if(l(e)){var t=h(e);return!0===t?p(f(this,"WeakMap")).get(e):t?t[this._i]:void 0}},set:function(e,t){return u.def(f(this,"WeakMap"),e,t)}},g=e.exports=r(110)("WeakMap",v,m,u,!0,!0);c((function(){return 7!=(new g).set((Object.freeze||Object)(y),7).get(y)}))&&(s((n=u.getConstructor(v,"WeakMap")).prototype,m),a.NEED=!0,o(["delete","has","get","set"],(function(e){var t=g.prototype,r=t[e];i(t,e,(function(t,o){if(l(t)&&!d(t)){this._f||(this._f=new n);var i=this._f[e](t,o);return"set"==e?this:i}return r.call(this,t,o)}))})))},function(e,t,r){"use strict";var n=r(23),o=r(43),i=r(61),a=r(25),s=r(104);e.exports=function(e,t){var r=1==e,u=2==e,l=3==e,c=4==e,f=6==e,h=5==e||f,d=t||s;return function(t,s,p){for(var y,v,m=i(t),g=o(m),b=n(s,p,3),_=a(g.length),w=0,S=r?d(t,_):u?d(t,0):void 0;_>w;w++)if((h||w in g)&&(v=b(y=g[w],w,m),e))if(r)S[w]=v;else if(v)switch(e){case 3:return!0;case 5:return y;case 6:return w;case 2:S.push(y)}else if(c)return!1;return f?-1:l||c?c:S}}},function(e,t,r){"use strict";var n=r(105);e.exports=function(e,t){return new(n(e))(t)}},function(e,t,r){"use strict";var n=r(13),o=r(106),i=r(30)("species");e.exports=function(e){var t;return o(e)&&("function"!=typeof(t=e.constructor)||t!==Array&&!o(t.prototype)||(t=void 0),n(t)&&null===(t=t[i])&&(t=void 0)),void 0===t?Array:t}},function(e,t,r){"use strict";var n=r(29);e.exports=Array.isArray||function(e){return"Array"==n(e)}},function(e,t,r){"use strict";function n(e){return(n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}var o=r(22)("meta"),i=r(13),a=r(21),s=r(11).f,u=0,l=Object.isExtensible||function(){return!0},c=!r(16)((function(){return l(Object.preventExtensions({}))})),f=function(e){s(e,o,{value:{i:"O"+ ++u,w:{}}})},h=e.exports={KEY:o,NEED:!1,fastKey:function(e,t){if(!i(e))return"symbol"==n(e)?e:("string"==typeof e?"S":"P")+e;if(!a(e,o)){if(!l(e))return"F";if(!t)return"E";f(e)}return e[o].i},getWeak:function(e,t){if(!a(e,o)){if(!l(e))return!0;if(!t)return!1;f(e)}return e[o].w},onFreeze:function(e){return c&&h.NEED&&l(e)&&!a(e,o)&&f(e),e}}},function(e,t,r){"use strict";var n=r(97),o=r(107).getWeak,i=r(12),a=r(13),s=r(87),u=r(88),l=r(103),c=r(21),f=r(109),h=l(5),d=l(6),p=0,y=function(e){return e._l||(e._l=new v)},v=function(){this.a=[]},m=function(e,t){return h(e.a,(function(e){return e[0]===t}))};v.prototype={get:function(e){var t=m(this,e);if(t)return t[1]},has:function(e){return!!m(this,e)},set:function(e,t){var r=m(this,e);r?r[1]=t:this.a.push([e,t])},delete:function(e){var t=d(this.a,(function(t){return t[0]===e}));return~t&&this.a.splice(t,1),!!~t}},e.exports={getConstructor:function(e,t,r,i){var l=e((function(e,n){s(e,l,t,"_i"),e._t=t,e._i=p++,e._l=void 0,null!=n&&u(n,r,e[i],e)}));return n(l.prototype,{delete:function(e){if(!a(e))return!1;var r=o(e);return!0===r?y(f(this,t)).delete(e):r&&c(r,this._i)&&delete r[this._i]},has:function(e){if(!a(e))return!1;var r=o(e);return!0===r?y(f(this,t)).has(e):r&&c(r,this._i)}}),l},def:function(e,t,r){var n=o(i(t),!0);return!0===n?y(e).set(t,r):n[e._i]=r,e},ufstore:y}},function(e,t,r){"use strict";var n=r(13);e.exports=function(e,t){if(!n(e)||e._t!==t)throw TypeError("Incompatible receiver, "+t+" required!");return e}},function(e,t,r){"use strict";var n=r(8),o=r(7),i=r(20),a=r(97),s=r(107),u=r(88),l=r(87),c=r(13),f=r(16),h=r(68),d=r(59),p=r(111);e.exports=function(e,t,r,y,v,m){var g=n[e],b=g,_=v?"set":"add",w=b&&b.prototype,S={},P=function(e){var t=w[e];i(w,e,"delete"==e?function(e){return!(m&&!c(e))&&t.call(this,0===e?0:e)}:"has"==e?function(e){return!(m&&!c(e))&&t.call(this,0===e?0:e)}:"get"==e?function(e){return m&&!c(e)?void 0:t.call(this,0===e?0:e)}:"add"==e?function(e){return t.call(this,0===e?0:e),this}:function(e,r){return t.call(this,0===e?0:e,r),this})};if("function"==typeof b&&(m||w.forEach&&!f((function(){(new b).entries().next()})))){var A=new b,k=A[_](m?{}:-0,1)!=A,E=f((function(){A.has(1)})),x=h((function(e){new b(e)})),O=!m&&f((function(){for(var e=new b,t=5;t--;)e[_](t,t);return!e.has(-0)}));x||((b=t((function(t,r){l(t,b,e);var n=p(new g,t,b);return null!=r&&u(r,v,n[_],n),n}))).prototype=w,w.constructor=b),(E||O)&&(P("delete"),P("has"),v&&P("get")),(O||k)&&P(_),m&&w.clear&&delete w.clear}else b=y.getConstructor(t,e,v,_),a(b.prototype,r),s.NEED=!0;return d(b,e),S[e]=b,o(o.G+o.W+o.F*(b!=g),S),m||y.setStrong(b,e,v),b}},function(e,t,r){"use strict";var n=r(13),o=r(112).set;e.exports=function(e,t,r){var i,a=t.constructor;return a!==r&&"function"==typeof a&&(i=a.prototype)!==r.prototype&&n(i)&&o&&o(e,i),e}},function(e,t,r){"use strict";var n=r(13),o=r(12),i=function(e,t){if(o(e),!n(t)&&null!==t)throw TypeError(t+": can't set as prototype!")};e.exports={set:Object.setPrototypeOf||("__proto__"in{}?function(e,t,n){try{(n=r(23)(Function.call,r(113).f(Object.prototype,"__proto__").set,2))(e,[]),t=!(e instanceof Array)}catch(e){t=!0}return function(e,r){return i(e,r),t?e.__proto__=r:n(e,r),e}}({},!1):void 0),check:i}},function(e,t,r){"use strict";var n=r(73),o=r(19),i=r(42),a=r(18),s=r(21),u=r(14),l=Object.getOwnPropertyDescriptor;t.f=r(15)?l:function(e,t){if(e=i(e),t=a(t,!0),u)try{return l(e,t)}catch(e){}if(s(e,t))return o(!n.f.call(e,t),e[t])}},function(e,t,r){"use strict";r(115)("WeakMap")},function(e,t,r){"use strict";var n=r(7);e.exports=function(e){n(n.S,e,{of:function(){for(var e=arguments.length,t=new Array(e);e--;)t[e]=arguments[e];return new this(t)}})}},function(e,t,r){"use strict";r(117)("WeakMap")},function(e,t,r){"use strict";var n=r(7),o=r(24),i=r(23),a=r(88);e.exports=function(e){n(n.S,e,{from:function(e){var t,r,n,s,u=arguments[1];return o(this),(t=void 0!==u)&&o(u),null==e?new this:(r=[],t?(n=0,s=i(u,arguments[2],2),a(e,!1,(function(e){r.push(s(e,n++))}))):a(e,!1,r.push,r),new this(r))}})}},function(e,t,r){"use strict";r(82),r(83),r(119),r(120),r(121),e.exports=r(9).WeakSet},function(e,t,r){"use strict";var n=r(108),o=r(109);r(110)("WeakSet",(function(e){return function(){return e(this,arguments.length>0?arguments[0]:void 0)}}),{add:function(e){return n.def(o(this,"WeakSet"),e,!0)}},n,!1,!0)},function(e,t,r){"use strict";r(115)("WeakSet")},function(e,t,r){"use strict";r(117)("WeakSet")},function(e,t,r){"use strict";r(123),e.exports=r(9).String.codePointAt},function(e,t,r){"use strict";var n=r(7),o=r(48)(!1);n(n.P,"String",{codePointAt:function(e){return o(this,e)}})},function(e,t,r){"use strict";r(125),e.exports=r(9).String.fromCodePoint},function(e,t,r){"use strict";var n=r(7),o=r(44),i=String.fromCharCode,a=String.fromCodePoint;n(n.S+n.F*(!!a&&1!=a.length),"String",{fromCodePoint:function(e){for(var t,r=[],n=arguments.length,a=0;n>a;){if(t=+arguments[a++],o(t,1114111)!==t)throw RangeError(t+" is not a valid code point");r.push(t<65536?i(t):i(55296+((t-=65536)>>10),t%1024+56320))}return r.join("")}})},function(e,t,r){"use strict";r(127),r(82),e.exports=r(9).Symbol},function(e,t,r){"use strict";function n(e){return(n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}var o=r(8),i=r(21),a=r(15),s=r(7),u=r(20),l=r(107).KEY,c=r(16),f=r(31),h=r(59),d=r(22),p=r(30),y=r(128),v=r(129),m=r(130),g=r(106),b=r(12),_=r(13),w=r(42),S=r(18),P=r(19),A=r(52),k=r(131),E=r(113),x=r(11),O=r(54),R=E.f,C=x.f,T=k.f,j=o.Symbol,L=o.JSON,I=L&&L.stringify,D=p("_hidden"),M=p("toPrimitive"),F={}.propertyIsEnumerable,N=f("symbol-registry"),q=f("symbols"),U=f("op-symbols"),W=Object.prototype,B="function"==typeof j,G=o.QObject,z=!G||!G.prototype||!G.prototype.findChild,H=a&&c((function(){return 7!=A(C({},"a",{get:function(){return C(this,"a",{value:7}).a}})).a}))?function(e,t,r){var n=R(W,t);n&&delete W[t],C(e,t,r),n&&e!==W&&C(W,t,n)}:C,V=function(e){var t=q[e]=A(j.prototype);return t._k=e,t},Y=B&&"symbol"==n(j.iterator)?function(e){return"symbol"==n(e)}:function(e){return e instanceof j},X=function(e,t,r){return e===W&&X(U,t,r),b(e),t=S(t,!0),b(r),i(q,t)?(r.enumerable?(i(e,D)&&e[D][t]&&(e[D][t]=!1),r=A(r,{enumerable:P(0,!1)})):(i(e,D)||C(e,D,P(1,{})),e[D][t]=!0),H(e,t,r)):C(e,t,r)},K=function(e,t){b(e);for(var r,n=m(t=w(t)),o=0,i=n.length;i>o;)X(e,r=n[o++],t[r]);return e},Q=function(e){var t=F.call(this,e=S(e,!0));return!(this===W&&i(q,e)&&!i(U,e))&&(!(t||!i(this,e)||!i(q,e)||i(this,D)&&this[D][e])||t)},J=function(e,t){if(e=w(e),t=S(t,!0),e!==W||!i(q,t)||i(U,t)){var r=R(e,t);return!r||!i(q,t)||i(e,D)&&e[D][t]||(r.enumerable=!0),r}},$=function(e){for(var t,r=T(w(e)),n=[],o=0;r.length>o;)i(q,t=r[o++])||t==D||t==l||n.push(t);return n},Z=function(e){for(var t,r=e===W,n=T(r?U:w(e)),o=[],a=0;n.length>a;)!i(q,t=n[a++])||r&&!i(W,t)||o.push(q[t]);return o};B||(u((j=function(){if(this instanceof j)throw TypeError("Symbol is not a constructor!");var e=d(arguments.length>0?arguments[0]:void 0),t=function t(r){this===W&&t.call(U,r),i(this,D)&&i(this[D],e)&&(this[D][e]=!1),H(this,e,P(1,r))};return a&&z&&H(W,e,{configurable:!0,set:t}),V(e)}).prototype,"toString",(function(){return this._k})),E.f=J,x.f=X,r(132).f=k.f=$,r(73).f=Q,r(72).f=Z,a&&!r(32)&&u(W,"propertyIsEnumerable",Q,!0),y.f=function(e){return V(p(e))}),s(s.G+s.W+s.F*!B,{Symbol:j});for(var ee="hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables".split(","),te=0;ee.length>te;)p(ee[te++]);for(var re=O(p.store),ne=0;re.length>ne;)v(re[ne++]);s(s.S+s.F*!B,"Symbol",{for:function(e){return i(N,e+="")?N[e]:N[e]=j(e)},keyFor:function(e){if(!Y(e))throw TypeError(e+" is not a symbol!");for(var t in N)if(N[t]===e)return t},useSetter:function(){z=!0},useSimple:function(){z=!1}}),s(s.S+s.F*!B,"Object",{create:function(e,t){return void 0===t?A(e):K(A(e),t)},defineProperty:X,defineProperties:K,getOwnPropertyDescriptor:J,getOwnPropertyNames:$,getOwnPropertySymbols:Z}),L&&s(s.S+s.F*(!B||c((function(){var e=j();return"[null]"!=I([e])||"{}"!=I({a:e})||"{}"!=I(Object(e))}))),"JSON",{stringify:function(e){for(var t,r,n=[e],o=1;arguments.length>o;)n.push(arguments[o++]);if(r=t=n[1],(_(t)||void 0!==e)&&!Y(e))return g(t)||(t=function(e,t){if("function"==typeof r&&(t=r.call(this,e,t)),!Y(t))return t}),n[1]=t,I.apply(L,n)}}),j.prototype[M]||r(10)(j.prototype,M,j.prototype.valueOf),h(j,"Symbol"),h(Math,"Math",!0),h(o.JSON,"JSON",!0)},function(e,t,r){"use strict";t.f=r(30)},function(e,t,r){"use strict";var n=r(8),o=r(9),i=r(32),a=r(128),s=r(11).f;e.exports=function(e){var t=o.Symbol||(o.Symbol=i?{}:n.Symbol||{});"_"==e.charAt(0)||e in t||s(t,e,{value:a.f(e)})}},function(e,t,r){"use strict";var n=r(54),o=r(72),i=r(73);e.exports=function(e){var t=n(e),r=o.f;if(r)for(var a,s=r(e),u=i.f,l=0;s.length>l;)u.call(e,a=s[l++])&&t.push(a);return t}},function(e,t,r){"use strict";function n(e){return(n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}var o=r(42),i=r(132).f,a={}.toString,s="object"==("undefined"==typeof window?"undefined":n(window))&&window&&Object.getOwnPropertyNames?Object.getOwnPropertyNames(window):[];e.exports.f=function(e){return s&&"[object Window]"==a.call(e)?function(e){try{return i(e)}catch(e){return s.slice()}}(e):i(o(e))}},function(e,t,r){"use strict";var n=r(55),o=r(57).concat("length","prototype");t.f=Object.getOwnPropertyNames||function(e){return n(e,o)}},function(e,t,r){"use strict";r(134),e.exports=r(9).String.padStart},function(e,t,r){"use strict";var n=r(7),o=r(135),i=r(95);n(n.P+n.F*/Version\/10\.\d+(\.\d+)? Safari\//.test(i),"String",{padStart:function(e){return o(this,e,arguments.length>1?arguments[1]:void 0,!0)}})},function(e,t,r){"use strict";var n=r(25),o=r(136),i=r(33);e.exports=function(e,t,r,a){var s=String(i(e)),u=s.length,l=void 0===r?" ":String(r),c=n(t);if(c<=u||""==l)return s;var f=c-u,h=o.call(l,Math.ceil(f/l.length));return h.length>f&&(h=h.slice(0,f)),a?h+s:s+h}},function(e,t,r){"use strict";var n=r(26),o=r(33);e.exports=function(e){var t=String(o(this)),r="",i=n(e);if(i<0||i==1/0)throw RangeError("Count can't be negative");for(;i>0;(i>>>=1)&&(t+=t))1&i&&(r+=t);return r}},function(e,t,r){"use strict";r(138),e.exports=r(9).String.padEnd},function(e,t,r){"use strict";var n=r(7),o=r(135),i=r(95);n(n.P+n.F*/Version\/10\.\d+(\.\d+)? Safari\//.test(i),"String",{padEnd:function(e){return o(this,e,arguments.length>1?arguments[1]:void 0,!1)}})},function(e,t,r){"use strict";r(140),e.exports=r(9).Object.values},function(e,t,r){"use strict";var n=r(7),o=r(141)(!1);n(n.S,"Object",{values:function(e){return o(e)}})},function(e,t,r){"use strict";var n=r(54),o=r(42),i=r(73).f;e.exports=function(e){return function(t){for(var r,a=o(t),s=n(a),u=s.length,l=0,c=[];u>l;)i.call(a,r=s[l++])&&c.push(e?[r,a[r]]:a[r]);return c}}},function(e,t,r){"use strict";var n=!1;if("undefined"!=typeof ReadableStream)try{new ReadableStream({start:function(e){e.close()}}),n=!0}catch(e){}t.ReadableStream=n?ReadableStream:r(143).ReadableStream},function(e,t,r){"use strict";function n(e){return(n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}!function(e,t){for(var r in t)e[r]=t[r]}(t,function(e){var t={};function r(n){if(t[n])return t[n].exports;var o=t[n]={i:n,l:!1,exports:{}};return e[n].call(o.exports,o,o.exports,r),o.l=!0,o.exports}return r.m=e,r.c=t,r.i=function(e){return e},r.d=function(e,t,n){r.o(e,t)||Object.defineProperty(e,t,{configurable:!1,enumerable:!0,get:n})},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,"a",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p="",r(r.s=7)}([function(e,t,r){var o="function"==typeof Symbol&&"symbol"===n(Symbol.iterator)?function(e){return n(e)}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":n(e)},i=r(1).assert;function a(e){return"string"==typeof e||"symbol"===(void 0===e?"undefined":o(e))}function s(e,t,r){if("function"!=typeof e)throw new TypeError("Argument is not a function");return Function.prototype.apply.call(e,t,r)}t.typeIsObject=function(e){return"object"===(void 0===e?"undefined":o(e))&&null!==e||"function"==typeof e},t.createDataProperty=function(e,r,n){i(t.typeIsObject(e)),Object.defineProperty(e,r,{value:n,writable:!0,enumerable:!0,configurable:!0})},t.createArrayFromList=function(e){return e.slice()},t.ArrayBufferCopy=function(e,t,r,n,o){new Uint8Array(e).set(new Uint8Array(r,n,o),t)},t.CreateIterResultObject=function(e,t){i("boolean"==typeof t);var r={};return Object.defineProperty(r,"value",{value:e,enumerable:!0,writable:!0,configurable:!0}),Object.defineProperty(r,"done",{value:t,enumerable:!0,writable:!0,configurable:!0}),r},t.IsFiniteNonNegativeNumber=function(e){return!(Number.isNaN(e)||e===1/0||e<0)},t.InvokeOrNoop=function(e,t,r){i(void 0!==e),i(a(t)),i(Array.isArray(r));var n=e[t];if(void 0!==n)return s(n,e,r)},t.PromiseInvokeOrNoop=function(e,r,n){i(void 0!==e),i(a(r)),i(Array.isArray(n));try{return Promise.resolve(t.InvokeOrNoop(e,r,n))}catch(e){return Promise.reject(e)}},t.PromiseInvokeOrPerformFallback=function(e,t,r,n,o){i(void 0!==e),i(a(t)),i(Array.isArray(r)),i(Array.isArray(o));var u=void 0;try{u=e[t]}catch(e){return Promise.reject(e)}if(void 0===u)return n.apply(null,o);try{return Promise.resolve(s(u,e,r))}catch(e){return Promise.reject(e)}},t.TransferArrayBuffer=function(e){return e.slice()},t.ValidateAndNormalizeHighWaterMark=function(e){if(e=Number(e),Number.isNaN(e)||e<0)throw new RangeError("highWaterMark property of a queuing strategy must be non-negative and non-NaN");return e},t.ValidateAndNormalizeQueuingStrategy=function(e,r){if(void 0!==e&&"function"!=typeof e)throw new TypeError("size property of a queuing strategy must be a function");return{size:e,highWaterMark:r=t.ValidateAndNormalizeHighWaterMark(r)}}},function(e,t,r){function n(e){this.name="AssertionError",this.message=e||"",this.stack=(new Error).stack}n.prototype=Object.create(Error.prototype),n.prototype.constructor=n,e.exports={rethrowAssertionErrorRejection:function(e){e&&e.constructor===n&&setTimeout((function(){throw e}),0)},AssertionError:n,assert:function(e,t){if(!e)throw new n(t)}}},function(e,t,r){var n=function(){function e(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,r,n){return r&&e(t.prototype,r),n&&e(t,n),t}}();function o(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}var i=r(0),a=i.InvokeOrNoop,s=i.PromiseInvokeOrNoop,u=i.ValidateAndNormalizeQueuingStrategy,l=i.typeIsObject,c=r(1),f=c.assert,h=c.rethrowAssertionErrorRejection,d=r(3),p=d.DequeueValue,y=d.EnqueueValueWithSize,v=d.PeekQueueValue,m=d.ResetQueue,g=function(){function e(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=r.size,i=r.highWaterMark,a=void 0===i?1:i;if(o(this,e),this._state="writable",this._storedError=void 0,this._writer=void 0,this._writableStreamController=void 0,this._writeRequests=[],this._inFlightWriteRequest=void 0,this._closeRequest=void 0,this._inFlightCloseRequest=void 0,this._pendingAbortRequest=void 0,this._backpressure=!1,void 0!==t.type)throw new RangeError("Invalid type is specified");this._writableStreamController=new N(this,t,n,a),this._writableStreamController.__startSteps()}return n(e,[{key:"abort",value:function(e){return!1===_(this)?Promise.reject(z("abort")):!0===w(this)?Promise.reject(new TypeError("Cannot abort a stream that already has a writer")):S(this,e)}},{key:"getWriter",value:function(){if(!1===_(this))throw z("getWriter");return b(this)}},{key:"locked",get:function(){if(!1===_(this))throw z("locked");return w(this)}}]),e}();function b(e){return new T(e)}function _(e){return!!l(e)&&!!Object.prototype.hasOwnProperty.call(e,"_writableStreamController")}function w(e){return f(!0===_(e),"IsWritableStreamLocked should only be used on known writable streams"),void 0!==e._writer}function S(e,t){var r=e._state;if("closed"===r)return Promise.resolve(void 0);if("errored"===r)return Promise.reject(e._storedError);var n=new TypeError("Requested to abort");if(void 0!==e._pendingAbortRequest)return Promise.reject(n);f("writable"===r||"erroring"===r,"state must be writable or erroring");var o=!1;"erroring"===r&&(o=!0,t=void 0);var i=new Promise((function(r,n){e._pendingAbortRequest={_resolve:r,_reject:n,_reason:t,_wasAlreadyErroring:o}}));return!1===o&&A(e,n),i}function P(e,t){var r=e._state;"writable"!==r?(f("erroring"===r),k(e)):A(e,t)}function A(e,t){f(void 0===e._storedError,"stream._storedError === undefined"),f("writable"===e._state,"state must be writable");var r=e._writableStreamController;f(void 0!==r,"controller must not be undefined"),e._state="erroring",e._storedError=t;var n=e._writer;void 0!==n&&D(n,t),!1===O(e)&&!0===r._started&&k(e)}function k(e){f("erroring"===e._state,"stream._state === erroring"),f(!1===O(e),"WritableStreamHasOperationMarkedInFlight(stream) === false"),e._state="errored",e._writableStreamController.__errorSteps();for(var t=e._storedError,r=0;r<e._writeRequests.length;r++)e._writeRequests[r]._reject(t);if(e._writeRequests=[],void 0!==e._pendingAbortRequest){var n=e._pendingAbortRequest;if(e._pendingAbortRequest=void 0,!0===n._wasAlreadyErroring)return n._reject(t),void R(e);e._writableStreamController.__abortSteps(n._reason).then((function(){n._resolve(),R(e)}),(function(t){n._reject(t),R(e)}))}else R(e)}function E(e){f(void 0!==e._inFlightCloseRequest),e._inFlightCloseRequest._resolve(void 0),e._inFlightCloseRequest=void 0;var t=e._state;f("writable"===t||"erroring"===t),"erroring"===t&&(e._storedError=void 0,void 0!==e._pendingAbortRequest&&(e._pendingAbortRequest._resolve(),e._pendingAbortRequest=void 0)),e._state="closed";var r=e._writer;void 0!==r&&function(e){f(void 0!==e._closedPromise_resolve,"writer._closedPromise_resolve !== undefined"),f(void 0!==e._closedPromise_reject,"writer._closedPromise_reject !== undefined"),f("pending"===e._closedPromiseState,"writer._closedPromiseState is pending"),e._closedPromise_resolve(void 0),e._closedPromise_resolve=void 0,e._closedPromise_reject=void 0,e._closedPromiseState="resolved"}(r),f(void 0===e._pendingAbortRequest,"stream._pendingAbortRequest === undefined"),f(void 0===e._storedError,"stream._storedError === undefined")}function x(e){return void 0!==e._closeRequest||void 0!==e._inFlightCloseRequest}function O(e){return void 0!==e._inFlightWriteRequest||void 0!==e._inFlightCloseRequest}function R(e){f("errored"===e._state,'_stream_.[[state]] is `"errored"`'),void 0!==e._closeRequest&&(f(void 0===e._inFlightCloseRequest),e._closeRequest._reject(e._storedError),e._closeRequest=void 0);var t=e._writer;void 0!==t&&(X(t,e._storedError),t._closedPromise.catch((function(){})))}function C(e,t){f("writable"===e._state),f(!1===x(e));var r=e._writer;void 0!==r&&t!==e._backpressure&&(!0===t?function(e){f(void 0===e._readyPromise_resolve,"writer._readyPromise_resolve === undefined"),f(void 0===e._readyPromise_reject,"writer._readyPromise_reject === undefined"),e._readyPromise=new Promise((function(t,r){e._readyPromise_resolve=t,e._readyPromise_reject=r})),e._readyPromiseState="pending"}(r):(f(!1===t),J(r))),e._backpressure=t}e.exports={AcquireWritableStreamDefaultWriter:b,IsWritableStream:_,IsWritableStreamLocked:w,WritableStream:g,WritableStreamAbort:S,WritableStreamDefaultControllerError:G,WritableStreamDefaultWriterCloseWithErrorPropagation:function(e){var t=e._ownerWritableStream;f(void 0!==t);var r=t._state;return!0===x(t)||"closed"===r?Promise.resolve():"errored"===r?Promise.reject(t._storedError):(f("writable"===r||"erroring"===r),L(e))},WritableStreamDefaultWriterRelease:M,WritableStreamDefaultWriterWrite:F,WritableStreamCloseQueuedOrInFlight:x};var T=function(){function e(t){if(o(this,e),!1===_(t))throw new TypeError("WritableStreamDefaultWriter can only be constructed with a WritableStream instance");if(!0===w(t))throw new TypeError("This stream has already been locked for exclusive writing by another writer");this._ownerWritableStream=t,t._writer=this;var r,n=t._state;if("writable"===n)!1===x(t)&&!0===t._backpressure?((r=this)._readyPromise=new Promise((function(e,t){r._readyPromise_resolve=e,r._readyPromise_reject=t})),r._readyPromiseState="pending"):Q(this),Y(this);else if("erroring"===n)K(this,t._storedError),this._readyPromise.catch((function(){})),Y(this);else if("closed"===n)Q(this),function(e){e._closedPromise=Promise.resolve(void 0),e._closedPromise_resolve=void 0,e._closedPromise_reject=void 0,e._closedPromiseState="resolved"}(this);else{f("errored"===n,"state must be errored");var i=t._storedError;K(this,i),this._readyPromise.catch((function(){})),function(e,t){e._closedPromise=Promise.reject(t),e._closedPromise_resolve=void 0,e._closedPromise_reject=void 0,e._closedPromiseState="rejected"}(this,i),this._closedPromise.catch((function(){}))}}return n(e,[{key:"abort",value:function(e){return!1===j(this)?Promise.reject(H("abort")):void 0===this._ownerWritableStream?Promise.reject(V("abort")):function(e,t){var r=e._ownerWritableStream;return f(void 0!==r),S(r,t)}(this,e)}},{key:"close",value:function(){if(!1===j(this))return Promise.reject(H("close"));var e=this._ownerWritableStream;return void 0===e?Promise.reject(V("close")):!0===x(e)?Promise.reject(new TypeError("cannot close an already-closing stream")):L(this)}},{key:"releaseLock",value:function(){if(!1===j(this))throw H("releaseLock");var e=this._ownerWritableStream;void 0!==e&&(f(void 0!==e._writer),M(this))}},{key:"write",value:function(e){return!1===j(this)?Promise.reject(H("write")):void 0===this._ownerWritableStream?Promise.reject(V("write to")):F(this,e)}},{key:"closed",get:function(){return!1===j(this)?Promise.reject(H("closed")):this._closedPromise}},{key:"desiredSize",get:function(){if(!1===j(this))throw H("desiredSize");if(void 0===this._ownerWritableStream)throw V("desiredSize");return e=this._ownerWritableStream,"errored"===(t=e._state)||"erroring"===t?null:"closed"===t?0:q(e._writableStreamController);var e,t}},{key:"ready",get:function(){return!1===j(this)?Promise.reject(H("ready")):this._readyPromise}}]),e}();function j(e){return!!l(e)&&!!Object.prototype.hasOwnProperty.call(e,"_ownerWritableStream")}function L(e){var t=e._ownerWritableStream;f(void 0!==t);var r=t._state;if("closed"===r||"errored"===r)return Promise.reject(new TypeError("The stream (in "+r+" state) is not in the writable state and cannot be closed"));f("writable"===r||"erroring"===r),f(!1===x(t));var n,o=new Promise((function(e,r){var n={_resolve:e,_reject:r};t._closeRequest=n}));return!0===t._backpressure&&"writable"===r&&J(e),n=t._writableStreamController,y(n,"close",0),U(n),o}function I(e,t){"pending"===e._closedPromiseState?X(e,t):function(e,t){f(void 0===e._closedPromise_resolve,"writer._closedPromise_resolve === undefined"),f(void 0===e._closedPromise_reject,"writer._closedPromise_reject === undefined"),f("pending"!==e._closedPromiseState,"writer._closedPromiseState is not pending"),e._closedPromise=Promise.reject(t),e._closedPromiseState="rejected"}(e,t),e._closedPromise.catch((function(){}))}function D(e,t){"pending"===e._readyPromiseState?function(e,t){f(void 0!==e._readyPromise_resolve,"writer._readyPromise_resolve !== undefined"),f(void 0!==e._readyPromise_reject,"writer._readyPromise_reject !== undefined"),e._readyPromise_reject(t),e._readyPromise_resolve=void 0,e._readyPromise_reject=void 0,e._readyPromiseState="rejected"}(e,t):function(e,t){f(void 0===e._readyPromise_resolve,"writer._readyPromise_resolve === undefined"),f(void 0===e._readyPromise_reject,"writer._readyPromise_reject === undefined"),e._readyPromise=Promise.reject(t),e._readyPromiseState="rejected"}(e,t),e._readyPromise.catch((function(){}))}function M(e){var t=e._ownerWritableStream;f(void 0!==t),f(t._writer===e);var r=new TypeError("Writer was released and can no longer be used to monitor the stream's closedness");D(e,r),I(e,r),t._writer=void 0,e._ownerWritableStream=void 0}function F(e,t){var r=e._ownerWritableStream;f(void 0!==r);var n=r._writableStreamController,o=function(e,t){var r=e._strategySize;if(void 0===r)return 1;try{return r(t)}catch(t){return W(e,t),1}}(n,t);if(r!==e._ownerWritableStream)return Promise.reject(V("write to"));var i=r._state;if("errored"===i)return Promise.reject(r._storedError);if(!0===x(r)||"closed"===i)return Promise.reject(new TypeError("The stream is closing or closed and cannot be written to"));if("erroring"===i)return Promise.reject(r._storedError);f("writable"===i);var a=function(e){return f(!0===w(e)),f("writable"===e._state),new Promise((function(t,r){var n={_resolve:t,_reject:r};e._writeRequests.push(n)}))}(r);return function(e,t,r){var n={chunk:t};try{y(e,n,r)}catch(t){return void W(e,t)}var o=e._controlledWritableStream;if(!1===x(o)&&"writable"===o._state){var i=B(e);C(o,i)}U(e)}(n,t,o),a}var N=function(){function e(t,r,n,i){if(o(this,e),!1===_(t))throw new TypeError("WritableStreamDefaultController can only be constructed with a WritableStream instance");if(void 0!==t._writableStreamController)throw new TypeError("WritableStreamDefaultController instances can only be created by the WritableStream constructor");this._controlledWritableStream=t,this._underlyingSink=r,this._queue=void 0,this._queueTotalSize=void 0,m(this),this._started=!1;var a=u(n,i);this._strategySize=a.size,this._strategyHWM=a.highWaterMark,C(t,B(this))}return n(e,[{key:"error",value:function(e){if(!1==(!!l(t=this)&&!!Object.prototype.hasOwnProperty.call(t,"_underlyingSink")))throw new TypeError("WritableStreamDefaultController.prototype.error can only be used on a WritableStreamDefaultController");var t;"writable"===this._controlledWritableStream._state&&G(this,e)}},{key:"__abortSteps",value:function(e){return s(this._underlyingSink,"abort",[e])}},{key:"__errorSteps",value:function(){m(this)}},{key:"__startSteps",value:function(){var e=this,t=a(this._underlyingSink,"start",[this]),r=this._controlledWritableStream;Promise.resolve(t).then((function(){f("writable"===r._state||"erroring"===r._state),e._started=!0,U(e)}),(function(t){f("writable"===r._state||"erroring"===r._state),e._started=!0,P(r,t)})).catch(h)}}]),e}();function q(e){return e._strategyHWM-e._queueTotalSize}function U(e){var t=e._controlledWritableStream;if(!1!==e._started&&void 0===t._inFlightWriteRequest){var r=t._state;if("closed"!==r&&"errored"!==r)if("erroring"!==r){if(0!==e._queue.length){var n=v(e);"close"===n?function(e){var t=e._controlledWritableStream;(function(e){f(void 0===e._inFlightCloseRequest),f(void 0!==e._closeRequest),e._inFlightCloseRequest=e._closeRequest,e._closeRequest=void 0})(t),p(e),f(0===e._queue.length,"queue must be empty once the final write record is dequeued"),s(e._underlyingSink,"close",[]).then((function(){E(t)}),(function(e){!function(e,t){f(void 0!==e._inFlightCloseRequest),e._inFlightCloseRequest._reject(t),e._inFlightCloseRequest=void 0,f("writable"===e._state||"erroring"===e._state),void 0!==e._pendingAbortRequest&&(e._pendingAbortRequest._reject(t),e._pendingAbortRequest=void 0),P(e,t)}(t,e)})).catch(h)}(e):function(e,t){var r=e._controlledWritableStream;(function(e){f(void 0===e._inFlightWriteRequest,"there must be no pending write request"),f(0!==e._writeRequests.length,"writeRequests must not be empty"),e._inFlightWriteRequest=e._writeRequests.shift()})(r),s(e._underlyingSink,"write",[t,e]).then((function(){!function(e){f(void 0!==e._inFlightWriteRequest),e._inFlightWriteRequest._resolve(void 0),e._inFlightWriteRequest=void 0}(r);var t=r._state;if(f("writable"===t||"erroring"===t),p(e),!1===x(r)&&"writable"===t){var n=B(e);C(r,n)}U(e)}),(function(e){!function(e,t){f(void 0!==e._inFlightWriteRequest),e._inFlightWriteRequest._reject(t),e._inFlightWriteRequest=void 0,f("writable"===e._state||"erroring"===e._state),P(e,t)}(r,e)})).catch(h)}(e,n.chunk)}}else k(t)}}function W(e,t){"writable"===e._controlledWritableStream._state&&G(e,t)}function B(e){return q(e)<=0}function G(e,t){var r=e._controlledWritableStream;f("writable"===r._state),A(r,t)}function z(e){return new TypeError("WritableStream.prototype."+e+" can only be used on a WritableStream")}function H(e){return new TypeError("WritableStreamDefaultWriter.prototype."+e+" can only be used on a WritableStreamDefaultWriter")}function V(e){return new TypeError("Cannot "+e+" a stream using a released writer")}function Y(e){e._closedPromise=new Promise((function(t,r){e._closedPromise_resolve=t,e._closedPromise_reject=r,e._closedPromiseState="pending"}))}function X(e,t){f(void 0!==e._closedPromise_resolve,"writer._closedPromise_resolve !== undefined"),f(void 0!==e._closedPromise_reject,"writer._closedPromise_reject !== undefined"),f("pending"===e._closedPromiseState,"writer._closedPromiseState is pending"),e._closedPromise_reject(t),e._closedPromise_resolve=void 0,e._closedPromise_reject=void 0,e._closedPromiseState="rejected"}function K(e,t){e._readyPromise=Promise.reject(t),e._readyPromise_resolve=void 0,e._readyPromise_reject=void 0,e._readyPromiseState="rejected"}function Q(e){e._readyPromise=Promise.resolve(void 0),e._readyPromise_resolve=void 0,e._readyPromise_reject=void 0,e._readyPromiseState="fulfilled"}function J(e){f(void 0!==e._readyPromise_resolve,"writer._readyPromise_resolve !== undefined"),f(void 0!==e._readyPromise_reject,"writer._readyPromise_reject !== undefined"),e._readyPromise_resolve(void 0),e._readyPromise_resolve=void 0,e._readyPromise_reject=void 0,e._readyPromiseState="fulfilled"}},function(e,t,r){var n=r(0).IsFiniteNonNegativeNumber,o=r(1).assert;t.DequeueValue=function(e){o("_queue"in e&&"_queueTotalSize"in e,"Spec-level failure: DequeueValue should only be used on containers with [[queue]] and [[queueTotalSize]]."),o(e._queue.length>0,"Spec-level failure: should never dequeue from an empty queue.");var t=e._queue.shift();return e._queueTotalSize-=t.size,e._queueTotalSize<0&&(e._queueTotalSize=0),t.value},t.EnqueueValueWithSize=function(e,t,r){if(o("_queue"in e&&"_queueTotalSize"in e,"Spec-level failure: EnqueueValueWithSize should only be used on containers with [[queue]] and [[queueTotalSize]]."),r=Number(r),!n(r))throw new RangeError("Size must be a finite, non-NaN, non-negative number.");e._queue.push({value:t,size:r}),e._queueTotalSize+=r},t.PeekQueueValue=function(e){return o("_queue"in e&&"_queueTotalSize"in e,"Spec-level failure: PeekQueueValue should only be used on containers with [[queue]] and [[queueTotalSize]]."),o(e._queue.length>0,"Spec-level failure: should never peek at an empty queue."),e._queue[0].value},t.ResetQueue=function(e){o("_queue"in e&&"_queueTotalSize"in e,"Spec-level failure: ResetQueue should only be used on containers with [[queue]] and [[queueTotalSize]]."),e._queue=[],e._queueTotalSize=0}},function(e,t,r){var n=function(){function e(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,r,n){return r&&e(t.prototype,r),n&&e(t,n),t}}();function o(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}var i=r(0),a=i.ArrayBufferCopy,s=i.CreateIterResultObject,u=i.IsFiniteNonNegativeNumber,l=i.InvokeOrNoop,c=i.PromiseInvokeOrNoop,f=i.TransferArrayBuffer,h=i.ValidateAndNormalizeQueuingStrategy,d=i.ValidateAndNormalizeHighWaterMark,p=r(0),y=p.createArrayFromList,v=p.createDataProperty,m=p.typeIsObject,g=r(1),b=g.assert,_=g.rethrowAssertionErrorRejection,w=r(3),S=w.DequeueValue,P=w.EnqueueValueWithSize,A=w.ResetQueue,k=r(2),E=k.AcquireWritableStreamDefaultWriter,x=k.IsWritableStream,O=k.IsWritableStreamLocked,R=k.WritableStreamAbort,C=k.WritableStreamDefaultWriterCloseWithErrorPropagation,T=k.WritableStreamDefaultWriterRelease,j=k.WritableStreamDefaultWriterWrite,L=k.WritableStreamCloseQueuedOrInFlight,I=function(){function e(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=r.size,i=r.highWaterMark;o(this,e),this._state="readable",this._reader=void 0,this._storedError=void 0,this._disturbed=!1,this._readableStreamController=void 0;var a=t.type;if("bytes"===String(a))void 0===i&&(i=0),this._readableStreamController=new de(this,t,i);else{if(void 0!==a)throw new RangeError("Invalid type is specified");void 0===i&&(i=1),this._readableStreamController=new oe(this,t,n,i)}}return n(e,[{key:"cancel",value:function(e){return!1===F(this)?Promise.reject(Ce("cancel")):!0===N(this)?Promise.reject(new TypeError("Cannot cancel a stream that already has a reader")):B(this,e)}},{key:"getReader",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=e.mode;if(!1===F(this))throw Ce("getReader");if(void 0===t)return M(this);if("byob"===(t=String(t)))return D(this);throw new RangeError("Invalid mode is specified")}},{key:"pipeThrough",value:function(e,t){var r=e.writable,n=e.readable;return function(e){try{Promise.prototype.then.call(e,void 0,(function(){}))}catch(e){}}(this.pipeTo(r,t)),n}},{key:"pipeTo",value:function(e){var t=this,r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=r.preventClose,o=r.preventAbort,i=r.preventCancel;if(!1===F(this))return Promise.reject(Ce("pipeTo"));if(!1===x(e))return Promise.reject(new TypeError("ReadableStream.prototype.pipeTo's first argument must be a WritableStream"));if(n=Boolean(n),o=Boolean(o),i=Boolean(i),!0===N(this))return Promise.reject(new TypeError("ReadableStream.prototype.pipeTo cannot be used on a locked ReadableStream"));if(!0===O(e))return Promise.reject(new TypeError("ReadableStream.prototype.pipeTo cannot be used on a locked WritableStream"));var a=M(this),s=E(e),u=!1,l=Promise.resolve();return new Promise((function(r,c){var f,h,d;if(v(t,a._closedPromise,(function(t){!1===o?m((function(){return R(e,t)}),!0,t):g(!0,t)})),v(e,s._closedPromise,(function(e){!1===i?m((function(){return B(t,e)}),!0,e):g(!0,e)})),f=t,h=a._closedPromise,d=function(){!1===n?m((function(){return C(s)})):g()},"closed"===f._state?d():h.then(d).catch(_),!0===L(e)||"closed"===e._state){var p=new TypeError("the destination writable stream closed before all data could be piped to it");!1===i?m((function(){return B(t,p)}),!0,p):g(!0,p)}function y(){var e=l;return l.then((function(){return e!==l?y():void 0}))}function v(e,t,r){"errored"===e._state?r(e._storedError):t.catch(r).catch(_)}function m(t,r,n){function o(){t().then((function(){return b(r,n)}),(function(e){return b(!0,e)})).catch(_)}!0!==u&&(u=!0,"writable"===e._state&&!1===L(e)?y().then(o):o())}function g(t,r){!0!==u&&(u=!0,"writable"===e._state&&!1===L(e)?y().then((function(){return b(t,r)})).catch(_):b(t,r))}function b(e,t){T(s),re(a),e?c(t):r(void 0)}(function e(){return l=Promise.resolve(),!0===u?Promise.resolve():s._readyPromise.then((function(){return ne(a).then((function(e){var t=e.value;!0!==e.done&&(l=j(s,t).catch((function(){})))}))})).then(e)})().catch((function(e){l=Promise.resolve(),_(e)}))}))}},{key:"tee",value:function(){if(!1===F(this))throw Ce("tee");var e=q(this,!1);return y(e)}},{key:"locked",get:function(){if(!1===F(this))throw Ce("locked");return N(this)}}]),e}();function D(e){return new J(e)}function M(e){return new Q(e)}function F(e){return!!m(e)&&!!Object.prototype.hasOwnProperty.call(e,"_readableStreamController")}function N(e){return b(!0===F(e),"IsReadableStreamLocked should only be used on known readable streams"),void 0!==e._reader}function q(e,t){b(!0===F(e)),b("boolean"==typeof t);var r=M(e),n={closedOrErrored:!1,canceled1:!1,canceled2:!1,reason1:void 0,reason2:void 0};n.promise=new Promise((function(e){n._resolve=e}));var o=function e(){var t=e._branch1,r=e._branch2,n=e._teeState;return ne(e._reader).then((function(e){b(m(e));var o=e.value,i=e.done;if(b("boolean"==typeof i),!0===i&&!1===n.closedOrErrored&&(!1===n.canceled1&&se(t),!1===n.canceled2&&se(r),n.closedOrErrored=!0),!0!==n.closedOrErrored){var a=o,s=o;!1===n.canceled1&&ue(t,a),!1===n.canceled2&&ue(r,s)}}))};o._reader=r,o._teeState=n,o._cloneForBranch2=t;var i=function e(t){var r=e._stream,n=e._teeState;if(n.canceled1=!0,n.reason1=t,!0===n.canceled2){var o=B(r,y([n.reason1,n.reason2]));n._resolve(o)}return n.promise};i._stream=e,i._teeState=n;var a=function e(t){var r=e._stream,n=e._teeState;if(n.canceled2=!0,n.reason2=t,!0===n.canceled1){var o=B(r,y([n.reason1,n.reason2]));n._resolve(o)}return n.promise};a._stream=e,a._teeState=n;var s=Object.create(Object.prototype);v(s,"pull",o),v(s,"cancel",i);var u=new I(s),l=Object.create(Object.prototype);v(l,"pull",o),v(l,"cancel",a);var c=new I(l);return o._branch1=u._readableStreamController,o._branch2=c._readableStreamController,r._closedPromise.catch((function(e){!0!==n.closedOrErrored&&(le(o._branch1,e),le(o._branch2,e),n.closedOrErrored=!0)})),[u,c]}function U(e){return b(!0===$(e._reader)),b("readable"===e._state||"closed"===e._state),new Promise((function(t,r){var n={_resolve:t,_reject:r};e._reader._readIntoRequests.push(n)}))}function W(e){return b(!0===Z(e._reader)),b("readable"===e._state),new Promise((function(t,r){var n={_resolve:t,_reject:r};e._reader._readRequests.push(n)}))}function B(e,t){return e._disturbed=!0,"closed"===e._state?Promise.resolve(void 0):"errored"===e._state?Promise.reject(e._storedError):(G(e),e._readableStreamController.__cancelSteps(t).then((function(){})))}function G(e){b("readable"===e._state),e._state="closed";var t=e._reader;if(void 0!==t){if(!0===Z(t)){for(var r=0;r<t._readRequests.length;r++)(0,t._readRequests[r]._resolve)(s(void 0,!0));t._readRequests=[]}!function(e){b(void 0!==e._closedPromise_resolve),b(void 0!==e._closedPromise_reject),e._closedPromise_resolve(void 0),e._closedPromise_resolve=void 0,e._closedPromise_reject=void 0}(t)}}function z(e,t){b(!0===F(e),"stream must be ReadableStream"),b("readable"===e._state,"state must be readable"),e._state="errored",e._storedError=t;var r=e._reader;if(void 0!==r){if(!0===Z(r)){for(var n=0;n<r._readRequests.length;n++)r._readRequests[n]._reject(t);r._readRequests=[]}else{b($(r),"reader must be ReadableStreamBYOBReader");for(var o=0;o<r._readIntoRequests.length;o++)r._readIntoRequests[o]._reject(t);r._readIntoRequests=[]}Le(r,t),r._closedPromise.catch((function(){}))}}function H(e,t,r){var n=e._reader;b(n._readRequests.length>0),n._readRequests.shift()._resolve(s(t,r))}function V(e){return e._reader._readIntoRequests.length}function Y(e){return e._reader._readRequests.length}function X(e){var t=e._reader;return void 0!==t&&!1!==$(t)}function K(e){var t=e._reader;return void 0!==t&&!1!==Z(t)}e.exports={ReadableStream:I,IsReadableStreamDisturbed:function(e){return b(!0===F(e),"IsReadableStreamDisturbed should only be used on known readable streams"),e._disturbed},ReadableStreamDefaultControllerClose:se,ReadableStreamDefaultControllerEnqueue:ue,ReadableStreamDefaultControllerError:le,ReadableStreamDefaultControllerGetDesiredSize:fe};var Q=function(){function e(t){if(o(this,e),!1===F(t))throw new TypeError("ReadableStreamDefaultReader can only be constructed with a ReadableStream instance");if(!0===N(t))throw new TypeError("This stream has already been locked for exclusive reading by another reader");ee(this,t),this._readRequests=[]}return n(e,[{key:"cancel",value:function(e){return!1===Z(this)?Promise.reject(je("cancel")):void 0===this._ownerReadableStream?Promise.reject(Te("cancel")):te(this,e)}},{key:"read",value:function(){return!1===Z(this)?Promise.reject(je("read")):void 0===this._ownerReadableStream?Promise.reject(Te("read from")):ne(this)}},{key:"releaseLock",value:function(){if(!1===Z(this))throw je("releaseLock");if(void 0!==this._ownerReadableStream){if(this._readRequests.length>0)throw new TypeError("Tried to release a reader lock when that reader has pending read() calls un-settled");re(this)}}},{key:"closed",get:function(){return!1===Z(this)?Promise.reject(je("closed")):this._closedPromise}}]),e}(),J=function(){function e(t){if(o(this,e),!F(t))throw new TypeError("ReadableStreamBYOBReader can only be constructed with a ReadableStream instance given a byte source");if(!1===pe(t._readableStreamController))throw new TypeError("Cannot construct a ReadableStreamBYOBReader for a stream not constructed with a byte source");if(N(t))throw new TypeError("This stream has already been locked for exclusive reading by another reader");ee(this,t),this._readIntoRequests=[]}return n(e,[{key:"cancel",value:function(e){return $(this)?void 0===this._ownerReadableStream?Promise.reject(Te("cancel")):te(this,e):Promise.reject(Ie("cancel"))}},{key:"read",value:function(e){return $(this)?void 0===this._ownerReadableStream?Promise.reject(Te("read from")):ArrayBuffer.isView(e)?0===e.byteLength?Promise.reject(new TypeError("view must have non-zero byteLength")):function(e,t){var r=e._ownerReadableStream;return b(void 0!==r),r._disturbed=!0,"errored"===r._state?Promise.reject(r._storedError):function(e,t){var r=e._controlledReadableStream,n=1;t.constructor!==DataView&&(n=t.constructor.BYTES_PER_ELEMENT);var o=t.constructor,i={buffer:t.buffer,byteOffset:t.byteOffset,byteLength:t.byteLength,bytesFilled:0,elementSize:n,ctor:o,readerType:"byob"};if(e._pendingPullIntos.length>0)return i.buffer=f(i.buffer),e._pendingPullIntos.push(i),U(r);if("closed"===r._state){var a=new t.constructor(i.buffer,i.byteOffset,0);return Promise.resolve(s(a,!0))}if(e._queueTotalSize>0){if(!0===we(e,i)){var u=be(i);return Pe(e),Promise.resolve(s(u,!1))}if(!0===e._closeRequested){var l=new TypeError("Insufficient bytes to fill elements in the given buffer");return Oe(e,l),Promise.reject(l)}}i.buffer=f(i.buffer),e._pendingPullIntos.push(i);var c=U(r);return ve(e),c}(r._readableStreamController,t)}(this,e):Promise.reject(new TypeError("view must be an array buffer view")):Promise.reject(Ie("read"))}},{key:"releaseLock",value:function(){if(!$(this))throw Ie("releaseLock");if(void 0!==this._ownerReadableStream){if(this._readIntoRequests.length>0)throw new TypeError("Tried to release a reader lock when that reader has pending read() calls un-settled");re(this)}}},{key:"closed",get:function(){return $(this)?this._closedPromise:Promise.reject(Ie("closed"))}}]),e}();function $(e){return!!m(e)&&!!Object.prototype.hasOwnProperty.call(e,"_readIntoRequests")}function Z(e){return!!m(e)&&!!Object.prototype.hasOwnProperty.call(e,"_readRequests")}function ee(e,t){e._ownerReadableStream=t,t._reader=e,"readable"===t._state?function(e){e._closedPromise=new Promise((function(t,r){e._closedPromise_resolve=t,e._closedPromise_reject=r}))}(e):"closed"===t._state?function(e){e._closedPromise=Promise.resolve(void 0),e._closedPromise_resolve=void 0,e._closedPromise_reject=void 0}(e):(b("errored"===t._state,"state must be errored"),function(e,t){e._closedPromise=Promise.reject(t),e._closedPromise_resolve=void 0,e._closedPromise_reject=void 0}(e,t._storedError),e._closedPromise.catch((function(){})))}function te(e,t){var r=e._ownerReadableStream;return b(void 0!==r),B(r,t)}function re(e){b(void 0!==e._ownerReadableStream),b(e._ownerReadableStream._reader===e),"readable"===e._ownerReadableStream._state?Le(e,new TypeError("Reader was released and can no longer be used to monitor the stream's closedness")):function(e,t){b(void 0===e._closedPromise_resolve),b(void 0===e._closedPromise_reject),e._closedPromise=Promise.reject(t)}(e,new TypeError("Reader was released and can no longer be used to monitor the stream's closedness")),e._closedPromise.catch((function(){})),e._ownerReadableStream._reader=void 0,e._ownerReadableStream=void 0}function ne(e){var t=e._ownerReadableStream;return b(void 0!==t),t._disturbed=!0,"closed"===t._state?Promise.resolve(s(void 0,!0)):"errored"===t._state?Promise.reject(t._storedError):(b("readable"===t._state),t._readableStreamController.__pullSteps())}var oe=function(){function e(t,r,n,i){if(o(this,e),!1===F(t))throw new TypeError("ReadableStreamDefaultController can only be constructed with a ReadableStream instance");if(void 0!==t._readableStreamController)throw new TypeError("ReadableStreamDefaultController instances can only be created by the ReadableStream constructor");this._controlledReadableStream=t,this._underlyingSource=r,this._queue=void 0,this._queueTotalSize=void 0,A(this),this._started=!1,this._closeRequested=!1,this._pullAgain=!1,this._pulling=!1;var a=h(n,i);this._strategySize=a.size,this._strategyHWM=a.highWaterMark;var s=this,u=l(r,"start",[this]);Promise.resolve(u).then((function(){s._started=!0,b(!1===s._pulling),b(!1===s._pullAgain),ae(s)}),(function(e){ce(s,e)})).catch(_)}return n(e,[{key:"close",value:function(){if(!1===ie(this))throw De("close");if(!0===this._closeRequested)throw new TypeError("The stream has already been closed; do not close it again!");var e=this._controlledReadableStream._state;if("readable"!==e)throw new TypeError("The stream (in "+e+" state) is not in the readable state and cannot be closed");se(this)}},{key:"enqueue",value:function(e){if(!1===ie(this))throw De("enqueue");if(!0===this._closeRequested)throw new TypeError("stream is closed or draining");var t=this._controlledReadableStream._state;if("readable"!==t)throw new TypeError("The stream (in "+t+" state) is not in the readable state and cannot be enqueued to");return ue(this,e)}},{key:"error",value:function(e){if(!1===ie(this))throw De("error");var t=this._controlledReadableStream;if("readable"!==t._state)throw new TypeError("The stream is "+t._state+" and so cannot be errored");le(this,e)}},{key:"__cancelSteps",value:function(e){return A(this),c(this._underlyingSource,"cancel",[e])}},{key:"__pullSteps",value:function(){var e=this._controlledReadableStream;if(this._queue.length>0){var t=S(this);return!0===this._closeRequested&&0===this._queue.length?G(e):ae(this),Promise.resolve(s(t,!1))}var r=W(e);return ae(this),r}},{key:"desiredSize",get:function(){if(!1===ie(this))throw De("desiredSize");return fe(this)}}]),e}();function ie(e){return!!m(e)&&!!Object.prototype.hasOwnProperty.call(e,"_underlyingSource")}function ae(e){!1!==function(e){var t=e._controlledReadableStream;return"closed"!==t._state&&"errored"!==t._state&&(!0!==e._closeRequested&&(!1!==e._started&&(!0===N(t)&&Y(t)>0||fe(e)>0)))}(e)&&(!0!==e._pulling?(b(!1===e._pullAgain),e._pulling=!0,c(e._underlyingSource,"pull",[e]).then((function(){if(e._pulling=!1,!0===e._pullAgain)return e._pullAgain=!1,ae(e)}),(function(t){ce(e,t)})).catch(_)):e._pullAgain=!0)}function se(e){var t=e._controlledReadableStream;b(!1===e._closeRequested),b("readable"===t._state),e._closeRequested=!0,0===e._queue.length&&G(t)}function ue(e,t){var r=e._controlledReadableStream;if(b(!1===e._closeRequested),b("readable"===r._state),!0===N(r)&&Y(r)>0)H(r,t,!1);else{var n=1;if(void 0!==e._strategySize){var o=e._strategySize;try{n=o(t)}catch(t){throw ce(e,t),t}}try{P(e,t,n)}catch(t){throw ce(e,t),t}}ae(e)}function le(e,t){var r=e._controlledReadableStream;b("readable"===r._state),A(e),z(r,t)}function ce(e,t){"readable"===e._controlledReadableStream._state&&le(e,t)}function fe(e){var t=e._controlledReadableStream._state;return"errored"===t?null:"closed"===t?0:e._strategyHWM-e._queueTotalSize}var he=function(){function e(t,r){o(this,e),this._associatedReadableByteStreamController=t,this._view=r}return n(e,[{key:"respond",value:function(e){if(!1===ye(this))throw Me("respond");if(void 0===this._associatedReadableByteStreamController)throw new TypeError("This BYOB request has been invalidated");!function(e,t){if(t=Number(t),!1===u(t))throw new RangeError("bytesWritten must be a finite");b(e._pendingPullIntos.length>0),Ee(e,t)}(this._associatedReadableByteStreamController,e)}},{key:"respondWithNewView",value:function(e){if(!1===ye(this))throw Me("respond");if(void 0===this._associatedReadableByteStreamController)throw new TypeError("This BYOB request has been invalidated");if(!ArrayBuffer.isView(e))throw new TypeError("You can only respond with array buffer views");!function(e,t){b(e._pendingPullIntos.length>0);var r=e._pendingPullIntos[0];if(r.byteOffset+r.bytesFilled!==t.byteOffset)throw new RangeError("The region specified by view does not match byobRequest");if(r.byteLength!==t.byteLength)throw new RangeError("The buffer of view has different capacity than byobRequest");r.buffer=t.buffer,Ee(e,t.byteLength)}(this._associatedReadableByteStreamController,e)}},{key:"view",get:function(){return this._view}}]),e}(),de=function(){function e(t,r,n){if(o(this,e),!1===F(t))throw new TypeError("ReadableByteStreamController can only be constructed with a ReadableStream instance given a byte source");if(void 0!==t._readableStreamController)throw new TypeError("ReadableByteStreamController instances can only be created by the ReadableStream constructor given a byte source");this._controlledReadableStream=t,this._underlyingByteSource=r,this._pullAgain=!1,this._pulling=!1,me(this),this._queue=this._queueTotalSize=void 0,A(this),this._closeRequested=!1,this._started=!1,this._strategyHWM=d(n);var i=r.autoAllocateChunkSize;if(void 0!==i&&(!1===Number.isInteger(i)||i<=0))throw new RangeError("autoAllocateChunkSize must be a positive integer");this._autoAllocateChunkSize=i,this._pendingPullIntos=[];var a=this,s=l(r,"start",[this]);Promise.resolve(s).then((function(){a._started=!0,b(!1===a._pulling),b(!1===a._pullAgain),ve(a)}),(function(e){"readable"===t._state&&Oe(a,e)})).catch(_)}return n(e,[{key:"close",value:function(){if(!1===pe(this))throw Fe("close");if(!0===this._closeRequested)throw new TypeError("The stream has already been closed; do not close it again!");var e=this._controlledReadableStream._state;if("readable"!==e)throw new TypeError("The stream (in "+e+" state) is not in the readable state and cannot be closed");!function(e){var t=e._controlledReadableStream;if(b(!1===e._closeRequested),b("readable"===t._state),e._queueTotalSize>0)e._closeRequested=!0;else{if(e._pendingPullIntos.length>0&&e._pendingPullIntos[0].bytesFilled>0){var r=new TypeError("Insufficient bytes to fill elements in the given buffer");throw Oe(e,r),r}G(t)}}(this)}},{key:"enqueue",value:function(e){if(!1===pe(this))throw Fe("enqueue");if(!0===this._closeRequested)throw new TypeError("stream is closed or draining");var t=this._controlledReadableStream._state;if("readable"!==t)throw new TypeError("The stream (in "+t+" state) is not in the readable state and cannot be enqueued to");if(!ArrayBuffer.isView(e))throw new TypeError("You can only enqueue array buffer views when using a ReadableByteStreamController");!function(e,t){var r=e._controlledReadableStream;b(!1===e._closeRequested),b("readable"===r._state);var n=t.buffer,o=t.byteOffset,i=t.byteLength,a=f(n);if(!0===K(r))if(0===Y(r))_e(e,a,o,i);else{b(0===e._queue.length);var s=new Uint8Array(a,o,i);H(r,s,!1)}else!0===X(r)?(_e(e,a,o,i),ke(e)):(b(!1===N(r),"stream must not be locked"),_e(e,a,o,i))}(this,e)}},{key:"error",value:function(e){if(!1===pe(this))throw Fe("error");var t=this._controlledReadableStream;if("readable"!==t._state)throw new TypeError("The stream is "+t._state+" and so cannot be errored");Oe(this,e)}},{key:"__cancelSteps",value:function(e){return this._pendingPullIntos.length>0&&(this._pendingPullIntos[0].bytesFilled=0),A(this),c(this._underlyingByteSource,"cancel",[e])}},{key:"__pullSteps",value:function(){var e=this._controlledReadableStream;if(b(!0===K(e)),this._queueTotalSize>0){b(0===Y(e));var t=this._queue.shift();this._queueTotalSize-=t.byteLength,Pe(this);var r=void 0;try{r=new Uint8Array(t.buffer,t.byteOffset,t.byteLength)}catch(e){return Promise.reject(e)}return Promise.resolve(s(r,!1))}var n=this._autoAllocateChunkSize;if(void 0!==n){var o=void 0;try{o=new ArrayBuffer(n)}catch(e){return Promise.reject(e)}var i={buffer:o,byteOffset:0,byteLength:n,bytesFilled:0,elementSize:1,ctor:Uint8Array,readerType:"default"};this._pendingPullIntos.push(i)}var a=W(e);return ve(this),a}},{key:"byobRequest",get:function(){if(!1===pe(this))throw Fe("byobRequest");if(void 0===this._byobRequest&&this._pendingPullIntos.length>0){var e=this._pendingPullIntos[0],t=new Uint8Array(e.buffer,e.byteOffset+e.bytesFilled,e.byteLength-e.bytesFilled);this._byobRequest=new he(this,t)}return this._byobRequest}},{key:"desiredSize",get:function(){if(!1===pe(this))throw Fe("desiredSize");return Re(this)}}]),e}();function pe(e){return!!m(e)&&!!Object.prototype.hasOwnProperty.call(e,"_underlyingByteSource")}function ye(e){return!!m(e)&&!!Object.prototype.hasOwnProperty.call(e,"_associatedReadableByteStreamController")}function ve(e){!1!==function(e){var t=e._controlledReadableStream;return"readable"===t._state&&(!0!==e._closeRequested&&(!1!==e._started&&(!0===K(t)&&Y(t)>0||(!0===X(t)&&V(t)>0||Re(e)>0))))}(e)&&(!0!==e._pulling?(b(!1===e._pullAgain),e._pulling=!0,c(e._underlyingByteSource,"pull",[e]).then((function(){e._pulling=!1,!0===e._pullAgain&&(e._pullAgain=!1,ve(e))}),(function(t){"readable"===e._controlledReadableStream._state&&Oe(e,t)})).catch(_)):e._pullAgain=!0)}function me(e){Ae(e),e._pendingPullIntos=[]}function ge(e,t){b("errored"!==e._state,"state must not be errored");var r=!1;"closed"===e._state&&(b(0===t.bytesFilled),r=!0);var n=be(t);"default"===t.readerType?H(e,n,r):(b("byob"===t.readerType),function(e,t,r){var n=e._reader;b(n._readIntoRequests.length>0),n._readIntoRequests.shift()._resolve(s(t,r))}(e,n,r))}function be(e){var t=e.bytesFilled,r=e.elementSize;return b(t<=e.byteLength),b(t%r==0),new e.ctor(e.buffer,e.byteOffset,t/r)}function _e(e,t,r,n){e._queue.push({buffer:t,byteOffset:r,byteLength:n}),e._queueTotalSize+=n}function we(e,t){var r=t.elementSize,n=t.bytesFilled-t.bytesFilled%r,o=Math.min(e._queueTotalSize,t.byteLength-t.bytesFilled),i=t.bytesFilled+o,s=i-i%r,u=o,l=!1;s>n&&(u=s-t.bytesFilled,l=!0);for(var c=e._queue;u>0;){var f=c[0],h=Math.min(u,f.byteLength),d=t.byteOffset+t.bytesFilled;a(t.buffer,d,f.buffer,f.byteOffset,h),f.byteLength===h?c.shift():(f.byteOffset+=h,f.byteLength-=h),e._queueTotalSize-=h,Se(e,h,t),u-=h}return!1===l&&(b(0===e._queueTotalSize,"queue must be empty"),b(t.bytesFilled>0),b(t.bytesFilled<t.elementSize)),l}function Se(e,t,r){b(0===e._pendingPullIntos.length||e._pendingPullIntos[0]===r),Ae(e),r.bytesFilled+=t}function Pe(e){b("readable"===e._controlledReadableStream._state),0===e._queueTotalSize&&!0===e._closeRequested?G(e._controlledReadableStream):ve(e)}function Ae(e){void 0!==e._byobRequest&&(e._byobRequest._associatedReadableByteStreamController=void 0,e._byobRequest._view=void 0,e._byobRequest=void 0)}function ke(e){for(b(!1===e._closeRequested);e._pendingPullIntos.length>0;){if(0===e._queueTotalSize)return;var t=e._pendingPullIntos[0];!0===we(e,t)&&(xe(e),ge(e._controlledReadableStream,t))}}function Ee(e,t){var r=e._pendingPullIntos[0],n=e._controlledReadableStream;if("closed"===n._state){if(0!==t)throw new TypeError("bytesWritten must be 0 when calling respond() on a closed stream");!function(e,t){t.buffer=f(t.buffer),b(0===t.bytesFilled,"bytesFilled must be 0");var r=e._controlledReadableStream;if(!0===X(r))for(;V(r)>0;)ge(r,xe(e))}(e,r)}else b("readable"===n._state),function(e,t,r){if(r.bytesFilled+t>r.byteLength)throw new RangeError("bytesWritten out of range");if(Se(e,t,r),!(r.bytesFilled<r.elementSize)){xe(e);var n=r.bytesFilled%r.elementSize;if(n>0){var o=r.byteOffset+r.bytesFilled,i=r.buffer.slice(o-n,o);_e(e,i,0,i.byteLength)}r.buffer=f(r.buffer),r.bytesFilled-=n,ge(e._controlledReadableStream,r),ke(e)}}(e,t,r)}function xe(e){var t=e._pendingPullIntos.shift();return Ae(e),t}function Oe(e,t){var r=e._controlledReadableStream;b("readable"===r._state),me(e),A(e),z(r,t)}function Re(e){var t=e._controlledReadableStream._state;return"errored"===t?null:"closed"===t?0:e._strategyHWM-e._queueTotalSize}function Ce(e){return new TypeError("ReadableStream.prototype."+e+" can only be used on a ReadableStream")}function Te(e){return new TypeError("Cannot "+e+" a stream using a released reader")}function je(e){return new TypeError("ReadableStreamDefaultReader.prototype."+e+" can only be used on a ReadableStreamDefaultReader")}function Le(e,t){b(void 0!==e._closedPromise_resolve),b(void 0!==e._closedPromise_reject),e._closedPromise_reject(t),e._closedPromise_resolve=void 0,e._closedPromise_reject=void 0}function Ie(e){return new TypeError("ReadableStreamBYOBReader.prototype."+e+" can only be used on a ReadableStreamBYOBReader")}function De(e){return new TypeError("ReadableStreamDefaultController.prototype."+e+" can only be used on a ReadableStreamDefaultController")}function Me(e){return new TypeError("ReadableStreamBYOBRequest.prototype."+e+" can only be used on a ReadableStreamBYOBRequest")}function Fe(e){return new TypeError("ReadableByteStreamController.prototype."+e+" can only be used on a ReadableByteStreamController")}},function(e,t,r){var n=r(6),o=r(4),i=r(2);t.TransformStream=n.TransformStream,t.ReadableStream=o.ReadableStream,t.IsReadableStreamDisturbed=o.IsReadableStreamDisturbed,t.ReadableStreamDefaultControllerClose=o.ReadableStreamDefaultControllerClose,t.ReadableStreamDefaultControllerEnqueue=o.ReadableStreamDefaultControllerEnqueue,t.ReadableStreamDefaultControllerError=o.ReadableStreamDefaultControllerError,t.ReadableStreamDefaultControllerGetDesiredSize=o.ReadableStreamDefaultControllerGetDesiredSize,t.AcquireWritableStreamDefaultWriter=i.AcquireWritableStreamDefaultWriter,t.IsWritableStream=i.IsWritableStream,t.IsWritableStreamLocked=i.IsWritableStreamLocked,t.WritableStream=i.WritableStream,t.WritableStreamAbort=i.WritableStreamAbort,t.WritableStreamDefaultControllerError=i.WritableStreamDefaultControllerError,t.WritableStreamDefaultWriterCloseWithErrorPropagation=i.WritableStreamDefaultWriterCloseWithErrorPropagation,t.WritableStreamDefaultWriterRelease=i.WritableStreamDefaultWriterRelease,t.WritableStreamDefaultWriterWrite=i.WritableStreamDefaultWriterWrite},function(e,t,r){var n=function(){function e(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,r,n){return r&&e(t.prototype,r),n&&e(t,n),t}}();function o(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}var i=r(1).assert,a=r(0),s=a.InvokeOrNoop,u=a.PromiseInvokeOrPerformFallback,l=a.PromiseInvokeOrNoop,c=a.typeIsObject,f=r(4),h=f.ReadableStream,d=f.ReadableStreamDefaultControllerClose,p=f.ReadableStreamDefaultControllerEnqueue,y=f.ReadableStreamDefaultControllerError,v=f.ReadableStreamDefaultControllerGetDesiredSize,m=r(2),g=m.WritableStream,b=m.WritableStreamDefaultControllerError;function _(e,t){if(!0===e._errored)throw new TypeError("TransformStream is already errored");if(!0===e._readableClosed)throw new TypeError("Readable side is already closed");var r=e._readableController;try{p(r,t)}catch(t){throw e._readableClosed=!0,S(e,t),e._storedError}!0==v(r)<=0&&!1===e._backpressure&&k(e,!0)}function w(e){i(!1===e._errored),i(!1===e._readableClosed);try{d(e._readableController)}catch(e){i(!1)}e._readableClosed=!0}function S(e,t){!1===e._errored&&P(e,t)}function P(e,t){i(!1===e._errored),e._errored=!0,e._storedError=t,!1===e._writableDone&&b(e._writableController,t),!1===e._readableClosed&&y(e._readableController,t)}function A(e){return i(void 0!==e._backpressureChangePromise,"_backpressureChangePromise should have been initialized"),!1===e._backpressure?Promise.resolve():(i(!0===e._backpressure,"_backpressure should have been initialized"),e._backpressureChangePromise)}function k(e,t){i(e._backpressure!==t,"TransformStreamSetBackpressure() should be called only when backpressure is changed"),void 0!==e._backpressureChangePromise&&e._backpressureChangePromise_resolve(t),e._backpressureChangePromise=new Promise((function(t){e._backpressureChangePromise_resolve=t})),e._backpressureChangePromise.then((function(e){i(e!==t,"_backpressureChangePromise should be fulfilled only when backpressure is changed")})),e._backpressure=t}function E(e,t){return _(t._controlledTransformStream,e),Promise.resolve()}function x(e){return!!c(e)&&!!Object.prototype.hasOwnProperty.call(e,"_controlledTransformStream")}function O(e){return!!c(e)&&!!Object.prototype.hasOwnProperty.call(e,"_transformStreamController")}var R=function(){function e(t,r){o(this,e),this._transformStream=t,this._startPromise=r}return n(e,[{key:"start",value:function(e){var t=this._transformStream;return t._writableController=e,this._startPromise.then((function(){return A(t)}))}},{key:"write",value:function(e){return function(e,t){i(!1===e._errored),i(!1===e._transforming),i(!1===e._backpressure),e._transforming=!0;var r=e._transformer,n=e._transformStreamController;return u(r,"transform",[t,n],E,[t,n]).then((function(){return e._transforming=!1,A(e)}),(function(t){return S(e,t),Promise.reject(t)}))}(this._transformStream,e)}},{key:"abort",value:function(){var e=this._transformStream;e._writableDone=!0,P(e,new TypeError("Writable side aborted"))}},{key:"close",value:function(){var e=this._transformStream;return i(!1===e._transforming),e._writableDone=!0,l(e._transformer,"flush",[e._transformStreamController]).then((function(){return!0===e._errored?Promise.reject(e._storedError):(!1===e._readableClosed&&w(e),Promise.resolve())})).catch((function(t){return S(e,t),Promise.reject(e._storedError)}))}}]),e}(),C=function(){function e(t,r){o(this,e),this._transformStream=t,this._startPromise=r}return n(e,[{key:"start",value:function(e){var t=this._transformStream;return t._readableController=e,this._startPromise.then((function(){return i(void 0!==t._backpressureChangePromise,"_backpressureChangePromise should have been initialized"),!0===t._backpressure?Promise.resolve():(i(!1===t._backpressure,"_backpressure should have been initialized"),t._backpressureChangePromise)}))}},{key:"pull",value:function(){var e=this._transformStream;return i(!0===e._backpressure,"pull() should be never called while _backpressure is false"),i(void 0!==e._backpressureChangePromise,"_backpressureChangePromise should have been initialized"),k(e,!1),e._backpressureChangePromise}},{key:"cancel",value:function(){var e=this._transformStream;e._readableClosed=!0,P(e,new TypeError("Readable side canceled"))}}]),e}(),T=function(){function e(t){if(o(this,e),!1===O(t))throw new TypeError("TransformStreamDefaultController can only be constructed with a TransformStream instance");if(void 0!==t._transformStreamController)throw new TypeError("TransformStreamDefaultController instances can only be created by the TransformStream constructor");this._controlledTransformStream=t}return n(e,[{key:"enqueue",value:function(e){if(!1===x(this))throw L("enqueue");_(this._controlledTransformStream,e)}},{key:"close",value:function(){if(!1===x(this))throw L("close");!function(e){if(!0===e._errored)throw new TypeError("TransformStream is already errored");if(!0===e._readableClosed)throw new TypeError("Readable side is already closed");w(e)}(this._controlledTransformStream)}},{key:"error",value:function(e){if(!1===x(this))throw L("error");!function(e,t){if(!0===e._errored)throw new TypeError("TransformStream is already errored");P(e,t)}(this._controlledTransformStream,e)}},{key:"desiredSize",get:function(){if(!1===x(this))throw L("desiredSize");var e=this._controlledTransformStream._readableController;return v(e)}}]),e}(),j=function(){function e(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};o(this,e),this._transformer=t;var r=t.readableStrategy,n=t.writableStrategy;this._transforming=!1,this._errored=!1,this._storedError=void 0,this._writableController=void 0,this._readableController=void 0,this._transformStreamController=void 0,this._writableDone=!1,this._readableClosed=!1,this._backpressure=void 0,this._backpressureChangePromise=void 0,this._backpressureChangePromise_resolve=void 0,this._transformStreamController=new T(this);var a=void 0,u=new Promise((function(e){a=e})),l=new C(this,u);this._readable=new h(l,r);var c=new R(this,u);this._writable=new g(c,n),i(void 0!==this._writableController),i(void 0!==this._readableController),k(this,v(this._readableController)<=0);var f=this,d=s(t,"start",[f._transformStreamController]);a(d),u.catch((function(e){!1===f._errored&&(f._errored=!0,f._storedError=e)}))}return n(e,[{key:"readable",get:function(){if(!1===O(this))throw I("readable");return this._readable}},{key:"writable",get:function(){if(!1===O(this))throw I("writable");return this._writable}}]),e}();function L(e){return new TypeError("TransformStreamDefaultController.prototype."+e+" can only be used on a TransformStreamDefaultController")}function I(e){return new TypeError("TransformStream.prototype."+e+" can only be used on a TransformStream")}e.exports={TransformStream:j}},function(e,t,r){e.exports=r(5)}]))},function(e,t,r){"use strict";function n(e){return(n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}var o=!1;try{if("function"==typeof URL&&"object"===n(URL.prototype)&&"origin"in URL.prototype){var i=new URL("b","http://a");i.pathname="c%20d",o="http://a/c%20d"===i.href}}catch(e){}if(o)t.URL=URL;else{var a=r(145).URL,s=r(3).URL;s&&(a.createObjectURL=function(e){return s.createObjectURL.apply(s,arguments)},a.revokeObjectURL=function(e){s.revokeObjectURL(e)}),t.URL=a}},function(e,t,r){"use strict";!function(){var e=Object.create(null);e.ftp=21,e.file=0,e.gopher=70,e.http=80,e.https=443,e.ws=80,e.wss=443;var r=Object.create(null);function n(t){return void 0!==e[t]}function o(){h.call(this),this._isInvalid=!0}function i(e){return""===e&&o.call(this),e.toLowerCase()}function a(e){var t=e.charCodeAt(0);return t>32&&t<127&&-1===[34,35,60,62,63,96].indexOf(t)?e:encodeURIComponent(e)}function s(e){var t=e.charCodeAt(0);return t>32&&t<127&&-1===[34,35,60,62,96].indexOf(t)?e:encodeURIComponent(e)}r["%2e"]=".",r[".%2e"]="..",r["%2e."]="..",r["%2e%2e"]="..";var u,l=/[a-zA-Z]/,c=/[a-zA-Z0-9\+\-\.]/;function f(t,f,h){function d(e){b.push(e)}var p=f||"scheme start",y=0,v="",m=!1,g=!1,b=[];e:for(;(t[y-1]!==u||0===y)&&!this._isInvalid;){var _=t[y];switch(p){case"scheme start":if(!_||!l.test(_)){if(f){d("Invalid scheme.");break e}v="",p="no scheme";continue}v+=_.toLowerCase(),p="scheme";break;case"scheme":if(_&&c.test(_))v+=_.toLowerCase();else{if(":"!==_){if(f){if(_===u)break e;d("Code point not allowed in scheme: "+_);break e}v="",y=0,p="no scheme";continue}if(this._scheme=v,v="",f)break e;n(this._scheme)&&(this._isRelative=!0),p="file"===this._scheme?"relative":this._isRelative&&h&&h._scheme===this._scheme?"relative or authority":this._isRelative?"authority first slash":"scheme data"}break;case"scheme data":"?"===_?(this._query="?",p="query"):"#"===_?(this._fragment="#",p="fragment"):_!==u&&"\t"!==_&&"\n"!==_&&"\r"!==_&&(this._schemeData+=a(_));break;case"no scheme":if(h&&n(h._scheme)){p="relative";continue}d("Missing scheme."),o.call(this);break;case"relative or authority":if("/"!==_||"/"!==t[y+1]){d("Expected /, got: "+_),p="relative";continue}p="authority ignore slashes";break;case"relative":if(this._isRelative=!0,"file"!==this._scheme&&(this._scheme=h._scheme),_===u){this._host=h._host,this._port=h._port,this._path=h._path.slice(),this._query=h._query,this._username=h._username,this._password=h._password;break e}if("/"===_||"\\"===_)"\\"===_&&d("\\ is an invalid code point."),p="relative slash";else if("?"===_)this._host=h._host,this._port=h._port,this._path=h._path.slice(),this._query="?",this._username=h._username,this._password=h._password,p="query";else{if("#"!==_){var w=t[y+1],S=t[y+2];("file"!==this._scheme||!l.test(_)||":"!==w&&"|"!==w||S!==u&&"/"!==S&&"\\"!==S&&"?"!==S&&"#"!==S)&&(this._host=h._host,this._port=h._port,this._username=h._username,this._password=h._password,this._path=h._path.slice(),this._path.pop()),p="relative path";continue}this._host=h._host,this._port=h._port,this._path=h._path.slice(),this._query=h._query,this._fragment="#",this._username=h._username,this._password=h._password,p="fragment"}break;case"relative slash":if("/"!==_&&"\\"!==_){"file"!==this._scheme&&(this._host=h._host,this._port=h._port,this._username=h._username,this._password=h._password),p="relative path";continue}"\\"===_&&d("\\ is an invalid code point."),p="file"===this._scheme?"file host":"authority ignore slashes";break;case"authority first slash":if("/"!==_){d("Expected '/', got: "+_),p="authority ignore slashes";continue}p="authority second slash";break;case"authority second slash":if(p="authority ignore slashes","/"!==_){d("Expected '/', got: "+_);continue}break;case"authority ignore slashes":if("/"!==_&&"\\"!==_){p="authority";continue}d("Expected authority, got: "+_);break;case"authority":if("@"===_){m&&(d("@ already seen."),v+="%40"),m=!0;for(var P=0;P<v.length;P++){var A=v[P];if("\t"!==A&&"\n"!==A&&"\r"!==A)if(":"!==A||null!==this._password){var k=a(A);null!==this._password?this._password+=k:this._username+=k}else this._password="";else d("Invalid whitespace in authority.")}v=""}else{if(_===u||"/"===_||"\\"===_||"?"===_||"#"===_){y-=v.length,v="",p="host";continue}v+=_}break;case"file host":if(_===u||"/"===_||"\\"===_||"?"===_||"#"===_){2!==v.length||!l.test(v[0])||":"!==v[1]&&"|"!==v[1]?0===v.length?p="relative path start":(this._host=i.call(this,v),v="",p="relative path start"):p="relative path";continue}"\t"===_||"\n"===_||"\r"===_?d("Invalid whitespace in file host."):v+=_;break;case"host":case"hostname":if(":"!==_||g){if(_===u||"/"===_||"\\"===_||"?"===_||"#"===_){if(this._host=i.call(this,v),v="",p="relative path start",f)break e;continue}"\t"!==_&&"\n"!==_&&"\r"!==_?("["===_?g=!0:"]"===_&&(g=!1),v+=_):d("Invalid code point in host/hostname: "+_)}else if(this._host=i.call(this,v),v="",p="port","hostname"===f)break e;break;case"port":if(/[0-9]/.test(_))v+=_;else{if(_===u||"/"===_||"\\"===_||"?"===_||"#"===_||f){if(""!==v){var E=parseInt(v,10);E!==e[this._scheme]&&(this._port=E+""),v=""}if(f)break e;p="relative path start";continue}"\t"===_||"\n"===_||"\r"===_?d("Invalid code point in port: "+_):o.call(this)}break;case"relative path start":if("\\"===_&&d("'\\' not allowed in path."),p="relative path","/"!==_&&"\\"!==_)continue;break;case"relative path":var x;_!==u&&"/"!==_&&"\\"!==_&&(f||"?"!==_&&"#"!==_)?"\t"!==_&&"\n"!==_&&"\r"!==_&&(v+=a(_)):("\\"===_&&d("\\ not allowed in relative path."),(x=r[v.toLowerCase()])&&(v=x),".."===v?(this._path.pop(),"/"!==_&&"\\"!==_&&this._path.push("")):"."===v&&"/"!==_&&"\\"!==_?this._path.push(""):"."!==v&&("file"===this._scheme&&0===this._path.length&&2===v.length&&l.test(v[0])&&"|"===v[1]&&(v=v[0]+":"),this._path.push(v)),v="","?"===_?(this._query="?",p="query"):"#"===_&&(this._fragment="#",p="fragment"));break;case"query":f||"#"!==_?_!==u&&"\t"!==_&&"\n"!==_&&"\r"!==_&&(this._query+=s(_)):(this._fragment="#",p="fragment");break;case"fragment":_!==u&&"\t"!==_&&"\n"!==_&&"\r"!==_&&(this._fragment+=_)}y++}}function h(){this._scheme="",this._schemeData="",this._username="",this._password=null,this._host="",this._port="",this._path=[],this._query="",this._fragment="",this._isInvalid=!1,this._isRelative=!1}function d(e,t){void 0===t||t instanceof d||(t=new d(String(t))),this._url=e,h.call(this);var r=e.replace(/^[ \t\r\n\f]+|[ \t\r\n\f]+$/g,"");f.call(this,r,null,t)}d.prototype={toString:function(){return this.href},get href(){if(this._isInvalid)return this._url;var e="";return""===this._username&&null===this._password||(e=this._username+(null!==this._password?":"+this._password:"")+"@"),this.protocol+(this._isRelative?"//"+e+this.host:"")+this.pathname+this._query+this._fragment},set href(e){h.call(this),f.call(this,e)},get protocol(){return this._scheme+":"},set protocol(e){this._isInvalid||f.call(this,e+":","scheme start")},get host(){return this._isInvalid?"":this._port?this._host+":"+this._port:this._host},set host(e){!this._isInvalid&&this._isRelative&&f.call(this,e,"host")},get hostname(){return this._host},set hostname(e){!this._isInvalid&&this._isRelative&&f.call(this,e,"hostname")},get port(){return this._port},set port(e){!this._isInvalid&&this._isRelative&&f.call(this,e,"port")},get pathname(){return this._isInvalid?"":this._isRelative?"/"+this._path.join("/"):this._schemeData},set pathname(e){!this._isInvalid&&this._isRelative&&(this._path=[],f.call(this,e,"relative path start"))},get search(){return this._isInvalid||!this._query||"?"===this._query?"":this._query},set search(e){!this._isInvalid&&this._isRelative&&(this._query="?","?"===e[0]&&(e=e.slice(1)),f.call(this,e,"query"))},get hash(){return this._isInvalid||!this._fragment||"#"===this._fragment?"":this._fragment},set hash(e){this._isInvalid||(this._fragment="#","#"===e[0]&&(e=e.slice(1)),f.call(this,e,"fragment"))},get origin(){var e;if(this._isInvalid||!this._scheme)return"";switch(this._scheme){case"data":case"file":case"javascript":case"mailto":return"null";case"blob":try{return new d(this._schemeData).origin||"null"}catch(e){}return"null"}return(e=this.host)?this._scheme+"://"+e:""}},t.URL=d}()},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.getDocument=function(e){var t,r=new L;if("string"==typeof e)t={url:e};else if((0,i.isArrayBuffer)(e))t={data:e};else if(e instanceof I)t={range:e};else{if("object"!==P(e))throw new Error("Invalid parameter in getDocument, need either Uint8Array, string or a parameter object");if(!e.url&&!e.data&&!e.range)throw new Error("Invalid parameter object: need either .data, .range or .url");t=e}var n=Object.create(null),o=null,s=null;for(var l in t)if("url"!==l||"undefined"==typeof window)if("range"!==l)if("worker"!==l)if("data"!==l||t[l]instanceof Uint8Array)n[l]=t[l];else{var c=t[l];if("string"==typeof c)n[l]=(0,i.stringToBytes)(c);else if("object"!==P(c)||null===c||isNaN(c.length)){if(!(0,i.isArrayBuffer)(c))throw new Error("Invalid PDF binary data: either typed array, string or array-like object is expected in the data property.");n[l]=new Uint8Array(c)}else n[l]=new Uint8Array(c)}else s=t[l];else o=t[l];else n[l]=new i.URL(t[l],window.location).href;n.rangeChunkSize=n.rangeChunkSize||k,n.CMapReaderFactory=n.CMapReaderFactory||a.DOMCMapReaderFactory,n.ignoreErrors=!0!==n.stopAtErrors,n.pdfBug=!0===n.pdfBug;var d=Object.values(i.NativeImageDecoding);if(void 0!==n.nativeImageDecoderSupport&&d.includes(n.nativeImageDecoderSupport)||(n.nativeImageDecoderSupport=u.apiCompatibilityParams.nativeImageDecoderSupport||i.NativeImageDecoding.DECODE),Number.isInteger(n.maxImageSize)||(n.maxImageSize=-1),"boolean"!=typeof n.isEvalSupported&&(n.isEvalSupported=!0),"boolean"!=typeof n.disableFontFace&&(n.disableFontFace=u.apiCompatibilityParams.disableFontFace||!1),"boolean"!=typeof n.disableRange&&(n.disableRange=!1),"boolean"!=typeof n.disableStream&&(n.disableStream=!1),"boolean"!=typeof n.disableAutoFetch&&(n.disableAutoFetch=!1),"boolean"!=typeof n.disableCreateObjectURL&&(n.disableCreateObjectURL=u.apiCompatibilityParams.disableCreateObjectURL||!1),(0,i.setVerbosityLevel)(n.verbosity),!s){var y={postMessageTransfers:n.postMessageTransfers,verbosity:n.verbosity,port:f.GlobalWorkerOptions.workerPort};s=y.port?N.fromPort(y):new N(y),r._worker=s}var v=r.docId;return s.promise.then((function(){if(r.destroyed)throw new Error("Loading aborted");return function(e,t,r,n){return e.destroyed?Promise.reject(new Error("Worker was destroyed")):(r&&(t.length=r.length,t.initialData=r.initialData),e.messageHandler.sendWithPromise("GetDocRequest",{docId:n,apiVersion:"2.1.266",source:{data:t.data,url:t.url,password:t.password,disableAutoFetch:t.disableAutoFetch,rangeChunkSize:t.rangeChunkSize,length:t.length},maxImageSize:t.maxImageSize,disableFontFace:t.disableFontFace,disableCreateObjectURL:t.disableCreateObjectURL,postMessageTransfers:e.postMessageTransfers,docBaseUrl:t.docBaseUrl,nativeImageDecoderSupport:t.nativeImageDecoderSupport,ignoreErrors:t.ignoreErrors,isEvalSupported:t.isEvalSupported}).then((function(t){if(e.destroyed)throw new Error("Worker was destroyed");return t})))}(s,n,o,v).then((function(e){if(r.destroyed)throw new Error("Loading aborted");var t;o?t=new p.PDFDataTransportStream({length:n.length,initialData:n.initialData,disableRange:n.disableRange,disableStream:n.disableStream},o):n.data||(t=R({url:n.url,length:n.length,httpHeaders:n.httpHeaders,withCredentials:n.withCredentials,rangeChunkSize:n.rangeChunkSize,disableRange:n.disableRange,disableStream:n.disableStream}));var i=new h.MessageHandler(v,e,s.port);i.postMessageTransfers=s.postMessageTransfers;var a=new U(i,r,t,n);r._transport=a,i.send("Ready",null)}))})).catch(r._capability.reject),r},t.setPDFNetworkStreamFactory=function(e){R=e},t.build=t.version=t.PDFPageProxy=t.PDFDocumentProxy=t.PDFWorker=t.PDFDataRangeTransport=t.LoopbackPort=void 0;var o=v(n(147)),i=n(1),a=n(151),s=n(152),u=n(153),l=n(154),c=v(n(3)),f=n(156),h=n(157),d=n(158),p=n(160),y=n(161);function v(e){return e&&e.__esModule?e:{default:e}}function m(e,t,r,n,o,i,a){try{var s=e[i](a),u=s.value}catch(e){return void r(e)}s.done?t(u):Promise.resolve(u).then(n,o)}function g(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var r=[],n=!0,o=!1,i=void 0;try{for(var a,s=e[Symbol.iterator]();!(n=(a=s.next()).done)&&(r.push(a.value),!t||r.length!==t);n=!0);}catch(e){o=!0,i=e}finally{try{n||null==s.return||s.return()}finally{if(o)throw i}}return r}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}function b(e){return function(e){if(Array.isArray(e)){for(var t=0,r=new Array(e.length);t<e.length;t++)r[t]=e[t];return r}}(e)||function(e){if(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e))return Array.from(e)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}function _(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function w(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function S(e,t,r){return t&&w(e.prototype,t),r&&w(e,r),e}function P(e){return(P="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}var A,k=65536,E=!1,x=null,O=!1;"undefined"==typeof window?(E=!0,O=!0):O=!0,"undefined"!=typeof requirejs&&requirejs.toUrl&&(A=requirejs.toUrl("pdfjs-dist/build/pdf.worker.js"));var R,C="undefined"!=typeof requirejs&&requirejs.load;if(x=O?function(){return new Promise((function(e,t){r.e(1).then(function(){try{var n;n=r(96),e(n.WorkerMessageHandler)}catch(e){t(e)}}.bind(null,r)).catch(t)}))}:C?function(){return new Promise((function(e,t){requirejs(["pdfjs-dist/build/pdf.worker"],(function(r){try{e(r.WorkerMessageHandler)}catch(e){t(e)}}),t)}))}:null,!A&&"object"===("undefined"==typeof document?"undefined":P(document))&&"currentScript"in document){var T=document.currentScript&&document.currentScript.src;T&&(A=T.replace(/(\.(?:min\.)?js)(\?.*)?$/i,".worker$1$2"))}var j,L=(j=0,function(){function e(){_(this,e),this._capability=(0,i.createPromiseCapability)(),this._transport=null,this._worker=null,this.docId="d"+j++,this.destroyed=!1,this.onPassword=null,this.onProgress=null,this.onUnsupportedFeature=null}return S(e,[{key:"destroy",value:function(){var e=this;return this.destroyed=!0,(this._transport?this._transport.destroy():Promise.resolve()).then((function(){e._transport=null,e._worker&&(e._worker.destroy(),e._worker=null)}))}},{key:"then",value:function(e,t){return(0,i.deprecated)("PDFDocumentLoadingTask.then method, use the `promise` getter instead."),this.promise.then.apply(this.promise,arguments)}},{key:"promise",get:function(){return this._capability.promise}}]),e}()),I=function(){function e(t,r){_(this,e),this.length=t,this.initialData=r,this._rangeListeners=[],this._progressListeners=[],this._progressiveReadListeners=[],this._readyCapability=(0,i.createPromiseCapability)()}return S(e,[{key:"addRangeListener",value:function(e){this._rangeListeners.push(e)}},{key:"addProgressListener",value:function(e){this._progressListeners.push(e)}},{key:"addProgressiveReadListener",value:function(e){this._progressiveReadListeners.push(e)}},{key:"onDataRange",value:function(e,t){var r=!0,n=!1,o=void 0;try{for(var i,a=this._rangeListeners[Symbol.iterator]();!(r=(i=a.next()).done);r=!0)(0,i.value)(e,t)}catch(e){n=!0,o=e}finally{try{r||null==a.return||a.return()}finally{if(n)throw o}}}},{key:"onDataProgress",value:function(e){var t=this;this._readyCapability.promise.then((function(){var r=!0,n=!1,o=void 0;try{for(var i,a=t._progressListeners[Symbol.iterator]();!(r=(i=a.next()).done);r=!0)(0,i.value)(e)}catch(e){n=!0,o=e}finally{try{r||null==a.return||a.return()}finally{if(n)throw o}}}))}},{key:"onDataProgressiveRead",value:function(e){var t=this;this._readyCapability.promise.then((function(){var r=!0,n=!1,o=void 0;try{for(var i,a=t._progressiveReadListeners[Symbol.iterator]();!(r=(i=a.next()).done);r=!0)(0,i.value)(e)}catch(e){n=!0,o=e}finally{try{r||null==a.return||a.return()}finally{if(n)throw o}}}))}},{key:"transportReady",value:function(){this._readyCapability.resolve()}},{key:"requestDataRange",value:function(e,t){(0,i.unreachable)("Abstract method PDFDataRangeTransport.requestDataRange")}},{key:"abort",value:function(){}}]),e}();t.PDFDataRangeTransport=I;var D=function(){function e(t,r,n){_(this,e),this.loadingTask=n,this._pdfInfo=t,this._transport=r}return S(e,[{key:"getPage",value:function(e){return this._transport.getPage(e)}},{key:"getPageIndex",value:function(e){return this._transport.getPageIndex(e)}},{key:"getDestinations",value:function(){return this._transport.getDestinations()}},{key:"getDestination",value:function(e){return this._transport.getDestination(e)}},{key:"getPageLabels",value:function(){return this._transport.getPageLabels()}},{key:"getPageMode",value:function(){return this._transport.getPageMode()}},{key:"getOpenActionDestination",value:function(){return this._transport.getOpenActionDestination()}},{key:"getAttachments",value:function(){return this._transport.getAttachments()}},{key:"getJavaScript",value:function(){return this._transport.getJavaScript()}},{key:"getOutline",value:function(){return this._transport.getOutline()}},{key:"getPermissions",value:function(){return this._transport.getPermissions()}},{key:"getMetadata",value:function(){return this._transport.getMetadata()}},{key:"getData",value:function(){return this._transport.getData()}},{key:"getDownloadInfo",value:function(){return this._transport.downloadInfoCapability.promise}},{key:"getStats",value:function(){return this._transport.getStats()}},{key:"cleanup",value:function(){this._transport.startCleanup()}},{key:"destroy",value:function(){return this.loadingTask.destroy()}},{key:"numPages",get:function(){return this._pdfInfo.numPages}},{key:"fingerprint",get:function(){return this._pdfInfo.fingerprint}},{key:"loadingParams",get:function(){return this._transport.loadingParams}}]),e}();t.PDFDocumentProxy=D;var M=function(){function e(t,r,n){var o=arguments.length>3&&void 0!==arguments[3]&&arguments[3];_(this,e),this.pageIndex=t,this._pageInfo=r,this._transport=n,this._stats=o?new a.StatTimer:a.DummyStatTimer,this._pdfBug=o,this.commonObjs=n.commonObjs,this.objs=new W,this.cleanupAfterRender=!1,this.pendingCleanup=!1,this.intentStates=Object.create(null),this.destroyed=!1}return S(e,[{key:"getViewport",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=e.scale,r=e.rotation,n=void 0===r?this.rotate:r,o=e.dontFlip,s=void 0!==o&&o;return(arguments.length>1||"number"==typeof arguments[0])&&((0,i.deprecated)("getViewport is called with obsolete arguments."),t=arguments[0],n="number"==typeof arguments[1]?arguments[1]:this.rotate,s="boolean"==typeof arguments[2]&&arguments[2]),new a.PageViewport({viewBox:this.view,scale:t,rotation:n,dontFlip:s})}},{key:"getAnnotations",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=e.intent,r=void 0===t?null:t;return this.annotationsPromise&&this.annotationsIntent===r||(this.annotationsPromise=this._transport.getAnnotations(this.pageIndex,r),this.annotationsIntent=r),this.annotationsPromise}},{key:"render",value:function(e){var t=this,r=e.canvasContext,n=e.viewport,o=e.intent,s=void 0===o?"display":o,u=e.enableWebGL,l=void 0!==u&&u,c=e.renderInteractiveForms,f=void 0!==c&&c,h=e.transform,d=void 0===h?null:h,p=e.imageLayer,v=void 0===p?null:p,m=e.canvasFactory,g=void 0===m?null:m,b=e.background,_=void 0===b?null:b,w=this._stats;w.time("Overall"),this.pendingCleanup=!1;var S="print"===s?"print":"display",P=g||new a.DOMCanvasFactory,A=new y.WebGLContext({enable:l});this.intentStates[S]||(this.intentStates[S]=Object.create(null));var k=this.intentStates[S];k.displayReadyCapability||(k.receivingOperatorList=!0,k.displayReadyCapability=(0,i.createPromiseCapability)(),k.operatorList={fnArray:[],argsArray:[],lastChunk:!1},w.time("Page Request"),this._transport.messageHandler.send("RenderPageRequest",{pageIndex:this.pageNumber-1,intent:S,renderInteractiveForms:!0===f}));var E=function(e){var r=k.renderTasks.indexOf(x);r>=0&&k.renderTasks.splice(r,1),t.cleanupAfterRender&&(t.pendingCleanup=!0),t._tryCleanup(),e?x.capability.reject(e):x.capability.resolve(),w.timeEnd("Rendering"),w.timeEnd("Overall")},x=new G({callback:E,params:{canvasContext:r,viewport:n,transform:d,imageLayer:v,background:_},objs:this.objs,commonObjs:this.commonObjs,operatorList:k.operatorList,pageNumber:this.pageNumber,canvasFactory:P,webGLContext:A,useRequestAnimationFrame:"print"!==S,pdfBug:this._pdfBug});k.renderTasks||(k.renderTasks=[]),k.renderTasks.push(x);var O=x.task;return k.displayReadyCapability.promise.then((function(e){t.pendingCleanup?E():(w.time("Rendering"),x.initializeGraphics(e),x.operatorListChanged())})).catch(E),O}},{key:"getOperatorList",value:function(){this.intentStates.oplist||(this.intentStates.oplist=Object.create(null));var e,t=this.intentStates.oplist;return t.opListReadCapability||((e={}).operatorListChanged=function(){if(t.operatorList.lastChunk){t.opListReadCapability.resolve(t.operatorList);var r=t.renderTasks.indexOf(e);r>=0&&t.renderTasks.splice(r,1)}},t.receivingOperatorList=!0,t.opListReadCapability=(0,i.createPromiseCapability)(),t.renderTasks=[],t.renderTasks.push(e),t.operatorList={fnArray:[],argsArray:[],lastChunk:!1},this._stats.time("Page Request"),this._transport.messageHandler.send("RenderPageRequest",{pageIndex:this.pageIndex,intent:"oplist"})),t.opListReadCapability.promise}},{key:"streamTextContent",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=e.normalizeWhitespace,r=void 0!==t&&t,n=e.disableCombineTextItems,o=void 0!==n&&n,i=100;return this._transport.messageHandler.sendWithStream("GetTextContent",{pageIndex:this.pageNumber-1,normalizeWhitespace:!0===r,combineTextItems:!0!==o},{highWaterMark:i,size:function(e){return e.items.length}})}},{key:"getTextContent",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=this.streamTextContent(e);return new Promise((function(e,r){var n=t.getReader(),o={items:[],styles:Object.create(null)};!function t(){n.read().then((function(r){var n,i=r.value;r.done?e(o):(Object.assign(o.styles,i.styles),(n=o.items).push.apply(n,b(i.items)),t())}),r)}()}))}},{key:"_destroy",value:function(){this.destroyed=!0,this._transport.pageCache[this.pageIndex]=null;var e=[];return Object.keys(this.intentStates).forEach((function(t){"oplist"!==t&&this.intentStates[t].renderTasks.forEach((function(t){var r=t.capability.promise.catch((function(){}));e.push(r),t.cancel()}))}),this),this.objs.clear(),this.annotationsPromise=null,this.pendingCleanup=!1,Promise.all(e)}},{key:"cleanup",value:function(){var e=arguments.length>0&&void 0!==arguments[0]&&arguments[0];this.pendingCleanup=!0,this._tryCleanup(e)}},{key:"_tryCleanup",value:function(){var e=arguments.length>0&&void 0!==arguments[0]&&arguments[0];this.pendingCleanup&&!Object.keys(this.intentStates).some((function(e){var t=this.intentStates[e];return 0!==t.renderTasks.length||t.receivingOperatorList}),this)&&(Object.keys(this.intentStates).forEach((function(e){delete this.intentStates[e]}),this),this.objs.clear(),this.annotationsPromise=null,e&&this._stats instanceof a.StatTimer&&(this._stats=new a.StatTimer),this.pendingCleanup=!1)}},{key:"_startRenderPage",value:function(e,t){var r=this.intentStates[t];r.displayReadyCapability&&r.displayReadyCapability.resolve(e)}},{key:"_renderPageChunk",value:function(e,t){for(var r=this.intentStates[t],n=0,o=e.length;n<o;n++)r.operatorList.fnArray.push(e.fnArray[n]),r.operatorList.argsArray.push(e.argsArray[n]);r.operatorList.lastChunk=e.lastChunk;for(var i=0;i<r.renderTasks.length;i++)r.renderTasks[i].operatorListChanged();e.lastChunk&&(r.receivingOperatorList=!1,this._tryCleanup())}},{key:"pageNumber",get:function(){return this.pageIndex+1}},{key:"rotate",get:function(){return this._pageInfo.rotate}},{key:"ref",get:function(){return this._pageInfo.ref}},{key:"userUnit",get:function(){return this._pageInfo.userUnit}},{key:"view",get:function(){return this._pageInfo.view}},{key:"stats",get:function(){return this._stats instanceof a.StatTimer?this._stats:null}}]),e}();t.PDFPageProxy=M;var F=function(){function e(){var t=!(arguments.length>0&&void 0!==arguments[0])||arguments[0];_(this,e),this._listeners=[],this._defer=t,this._deferred=Promise.resolve(void 0)}return S(e,[{key:"postMessage",value:function(e,t){var r=this;if(this._defer){var n=new WeakMap,o={data:function e(r){if("object"!==P(r)||null===r)return r;if(n.has(r))return n.get(r);var o,a;if((o=r.buffer)&&(0,i.isArrayBuffer)(o)){var s=t&&t.includes(o);return a=r===o?r:s?new r.constructor(o,r.byteOffset,r.byteLength):new r.constructor(r),n.set(r,a),a}for(var u in a=Array.isArray(r)?[]:{},n.set(r,a),r){for(var l=void 0,c=r;!(l=Object.getOwnPropertyDescriptor(c,u));)c=Object.getPrototypeOf(c);void 0!==l.value&&"function"!=typeof l.value&&(a[u]=e(l.value))}return a}(e)};this._deferred.then((function(){r._listeners.forEach((function(e){e.call(this,o)}),r)}))}else this._listeners.forEach((function(t){t.call(this,{data:e})}),this)}},{key:"addEventListener",value:function(e,t){this._listeners.push(t)}},{key:"removeEventListener",value:function(e,t){var r=this._listeners.indexOf(t);this._listeners.splice(r,1)}},{key:"terminate",value:function(){this._listeners=[]}}]),e}();t.LoopbackPort=F;var N=function(){var e,t=new WeakMap,r=0;function n(){if(f.GlobalWorkerOptions.workerSrc)return f.GlobalWorkerOptions.workerSrc;if(void 0!==A)return A;throw new Error('No "GlobalWorkerOptions.workerSrc" specified.')}function o(){try{if("undefined"!=typeof window)return window.pdfjsWorker&&window.pdfjsWorker.WorkerMessageHandler}catch(e){}return null}return function(){function s(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},r=e.name,n=void 0===r?null:r,o=e.port,a=void 0===o?null:o,u=e.postMessageTransfers,l=void 0===u||u,c=e.verbosity,f=void 0===c?(0,i.getVerbosityLevel)():c;if(_(this,s),a&&t.has(a))throw new Error("Cannot use more than one PDFWorker per port");if(this.name=n,this.destroyed=!1,this.postMessageTransfers=!1!==l,this.verbosity=f,this._readyCapability=(0,i.createPromiseCapability)(),this._port=null,this._webWorker=null,this._messageHandler=null,a)return t.set(a,this),void this._initializeFromPort(a);this._initialize()}return S(s,[{key:"_initializeFromPort",value:function(e){this._port=e,this._messageHandler=new h.MessageHandler("main","worker",e),this._messageHandler.on("ready",(function(){})),this._readyCapability.resolve()}},{key:"_initialize",value:function(){var e,t,r=this;if("undefined"!=typeof Worker&&!E&&!o()){var a=n();try{(0,i.isSameOrigin)(window.location.href,a)||(e=new i.URL(a,window.location).href,t="importScripts('"+e+"');",a=i.URL.createObjectURL(new Blob([t])));var s=new Worker(a),u=new h.MessageHandler("main","worker",s),l=function(){s.removeEventListener("error",c),u.destroy(),s.terminate(),r.destroyed?r._readyCapability.reject(new Error("Worker was destroyed")):r._setupFakeWorker()},c=function(){r._webWorker||l()};s.addEventListener("error",c),u.on("test",(function(e){s.removeEventListener("error",c),r.destroyed?l():e&&e.supportTypedArray?(r._messageHandler=u,r._port=s,r._webWorker=s,e.supportTransfers||(r.postMessageTransfers=!1),r._readyCapability.resolve(),u.send("configure",{verbosity:r.verbosity})):(r._setupFakeWorker(),u.destroy(),s.terminate())})),u.on("ready",(function(e){if(s.removeEventListener("error",c),r.destroyed)l();else try{f()}catch(e){r._setupFakeWorker()}}));var f=function(){var e=new Uint8Array([r.postMessageTransfers?255:0]);try{u.send("test",e,[e.buffer])}catch(t){(0,i.info)("Cannot use postMessage transfers"),e[0]=0,u.send("test",e)}};return void f()}catch(e){(0,i.info)("The worker has been disabled.")}}this._setupFakeWorker()}},{key:"_setupFakeWorker",value:function(){var t=this;E||((0,i.warn)("Setting up fake worker."),E=!0),function(){if(e)return e.promise;e=(0,i.createPromiseCapability)();var t=o();return t?(e.resolve(t),e.promise):((x||function(){return(0,a.loadScript)(n()).then((function(){return window.pdfjsWorker.WorkerMessageHandler}))})().then(e.resolve,e.reject),e.promise)}().then((function(e){if(t.destroyed)t._readyCapability.reject(new Error("Worker was destroyed"));else{var n=new F;t._port=n;var o="fake"+r++,i=new h.MessageHandler(o+"_worker",o,n);e.setup(i,n);var a=new h.MessageHandler(o,o+"_worker",n);t._messageHandler=a,t._readyCapability.resolve()}})).catch((function(e){t._readyCapability.reject(new Error('Setting up fake worker failed: "'.concat(e.message,'".')))}))}},{key:"destroy",value:function(){this.destroyed=!0,this._webWorker&&(this._webWorker.terminate(),this._webWorker=null),t.delete(this._port),this._port=null,this._messageHandler&&(this._messageHandler.destroy(),this._messageHandler=null)}},{key:"promise",get:function(){return this._readyCapability.promise}},{key:"port",get:function(){return this._port}},{key:"messageHandler",get:function(){return this._messageHandler}}],[{key:"fromPort",value:function(e){if(!e||!e.port)throw new Error("PDFWorker.fromPort - invalid method signature.");return t.has(e.port)?t.get(e.port):new s(e)}},{key:"getWorkerSrc",value:function(){return n()}}]),s}()}();t.PDFWorker=N;var q,U=function(){function e(t,r,n,o){_(this,e),this.messageHandler=t,this.loadingTask=r,this.commonObjs=new W,this.fontLoader=new s.FontLoader({docId:r.docId,onUnsupportedFeature:this._onUnsupportedFeature.bind(this)}),this._params=o,this.CMapReaderFactory=new o.CMapReaderFactory({baseUrl:o.cMapUrl,isCompressed:o.cMapPacked}),this.destroyed=!1,this.destroyCapability=null,this._passwordCapability=null,this._networkStream=n,this._fullReader=null,this._lastProgress=null,this.pageCache=[],this.pagePromises=[],this.downloadInfoCapability=(0,i.createPromiseCapability)(),this.setupMessageHandler()}return S(e,[{key:"destroy",value:function(){var e=this;if(this.destroyCapability)return this.destroyCapability.promise;this.destroyed=!0,this.destroyCapability=(0,i.createPromiseCapability)(),this._passwordCapability&&this._passwordCapability.reject(new Error("Worker was destroyed during onPassword callback"));var t=[];this.pageCache.forEach((function(e){e&&t.push(e._destroy())})),this.pageCache=[],this.pagePromises=[];var r=this.messageHandler.sendWithPromise("Terminate",null);return t.push(r),Promise.all(t).then((function(){e.fontLoader.clear(),e._networkStream&&e._networkStream.cancelAllRequests(),e.messageHandler&&(e.messageHandler.destroy(),e.messageHandler=null),e.destroyCapability.resolve()}),this.destroyCapability.reject),this.destroyCapability.promise}},{key:"setupMessageHandler",value:function(){var e=this.messageHandler,t=this.loadingTask;e.on("GetReader",(function(e,t){var r=this;(0,i.assert)(this._networkStream),this._fullReader=this._networkStream.getFullReader(),this._fullReader.onProgress=function(e){r._lastProgress={loaded:e.loaded,total:e.total}},t.onPull=function(){r._fullReader.read().then((function(e){var r=e.value;e.done?t.close():((0,i.assert)((0,i.isArrayBuffer)(r)),t.enqueue(new Uint8Array(r),1,[r]))})).catch((function(e){t.error(e)}))},t.onCancel=function(e){r._fullReader.cancel(e)}}),this),e.on("ReaderHeadersReady",(function(e){var r=this,n=(0,i.createPromiseCapability)(),o=this._fullReader;return o.headersReady.then((function(){o.isStreamingSupported&&o.isRangeSupported||(r._lastProgress&&t.onProgress&&t.onProgress(r._lastProgress),o.onProgress=function(e){t.onProgress&&t.onProgress({loaded:e.loaded,total:e.total})}),n.resolve({isStreamingSupported:o.isStreamingSupported,isRangeSupported:o.isRangeSupported,contentLength:o.contentLength})}),n.reject),n.promise}),this),e.on("GetRangeReader",(function(e,t){(0,i.assert)(this._networkStream);var r=this._networkStream.getRangeReader(e.begin,e.end);t.onPull=function(){r.read().then((function(e){var r=e.value;e.done?t.close():((0,i.assert)((0,i.isArrayBuffer)(r)),t.enqueue(new Uint8Array(r),1,[r]))})).catch((function(e){t.error(e)}))},t.onCancel=function(e){r.cancel(e)}}),this),e.on("GetDoc",(function(e){var r=e.pdfInfo;this.numPages=r.numPages,this.pdfDocument=new D(r,this,t),t._capability.resolve(this.pdfDocument)}),this),e.on("PasswordRequest",(function(e){var r=this;if(this._passwordCapability=(0,i.createPromiseCapability)(),t.onPassword)try{t.onPassword((function(e){r._passwordCapability.resolve({password:e})}),e.code)}catch(e){this._passwordCapability.reject(e)}else this._passwordCapability.reject(new i.PasswordException(e.message,e.code));return this._passwordCapability.promise}),this),e.on("PasswordException",(function(e){t._capability.reject(new i.PasswordException(e.message,e.code))}),this),e.on("InvalidPDF",(function(e){t._capability.reject(new i.InvalidPDFException(e.message))}),this),e.on("MissingPDF",(function(e){t._capability.reject(new i.MissingPDFException(e.message))}),this),e.on("UnexpectedResponse",(function(e){t._capability.reject(new i.UnexpectedResponseException(e.message,e.status))}),this),e.on("UnknownError",(function(e){t._capability.reject(new i.UnknownErrorException(e.message,e.details))}),this),e.on("DataLoaded",(function(e){t.onProgress&&t.onProgress({loaded:e.length,total:e.length}),this.downloadInfoCapability.resolve(e)}),this),e.on("StartRenderPage",(function(e){if(!this.destroyed){var t=this.pageCache[e.pageIndex];t._stats.timeEnd("Page Request"),t._startRenderPage(e.transparency,e.intent)}}),this),e.on("RenderPageChunk",(function(e){this.destroyed||this.pageCache[e.pageIndex]._renderPageChunk(e.operatorList,e.intent)}),this),e.on("commonobj",(function(t){var r=this;if(!this.destroyed){var n=g(t,3),o=n[0],a=n[1],u=n[2];if(!this.commonObjs.has(o))switch(a){case"Font":var l=this._params;if("error"in u){var f=u.error;(0,i.warn)("Error during font loading: ".concat(f)),this.commonObjs.resolve(o,f);break}var h=null;l.pdfBug&&c.default.FontInspector&&c.default.FontInspector.enabled&&(h={registerFont:function(e,t){c.default.FontInspector.fontAdded(e,t)}});var d=new s.FontFaceObject(u,{isEvalSupported:l.isEvalSupported,disableFontFace:l.disableFontFace,ignoreErrors:l.ignoreErrors,onUnsupportedFeature:this._onUnsupportedFeature.bind(this),fontRegistry:h});this.fontLoader.bind(d).then((function(){r.commonObjs.resolve(o,d)}),(function(t){e.sendWithPromise("FontFallback",{id:o}).finally((function(){r.commonObjs.resolve(o,d)}))}));break;case"FontPath":this.commonObjs.resolve(o,u);break;default:throw new Error("Got unknown common object type ".concat(a))}}}),this),e.on("obj",(function(e){if(!this.destroyed){var t=g(e,4),r=t[0],n=t[1],o=t[2],i=t[3],a=this.pageCache[n];if(!a.objs.has(r))switch(o){case"JpegStream":return new Promise((function(e,t){var r=new Image;r.onload=function(){e(r)},r.onerror=function(){t(new Error("Error during JPEG image loading"))},r.src=i})).then((function(e){a.objs.resolve(r,e)}));case"Image":a.objs.resolve(r,i),i&&"data"in i&&i.data.length>8e6&&(a.cleanupAfterRender=!0);break;default:throw new Error("Got unknown object type ".concat(o))}}}),this),e.on("DocProgress",(function(e){this.destroyed||t.onProgress&&t.onProgress({loaded:e.loaded,total:e.total})}),this),e.on("PageError",(function(e){if(!this.destroyed){var t=this.pageCache[e.pageNum-1].intentStates[e.intent];if(!t.displayReadyCapability)throw new Error(e.error);if(t.displayReadyCapability.reject(e.error),t.operatorList){t.operatorList.lastChunk=!0;for(var r=0;r<t.renderTasks.length;r++)t.renderTasks[r].operatorListChanged()}}}),this),e.on("UnsupportedFeature",this._onUnsupportedFeature,this),e.on("JpegDecode",(function(e){if(this.destroyed)return Promise.reject(new Error("Worker was destroyed"));if("undefined"==typeof document)return Promise.reject(new Error('"document" is not defined.'));var t=g(e,2),r=t[0],n=t[1];return 3!==n&&1!==n?Promise.reject(new Error("Only 3 components or 1 component can be returned")):new Promise((function(e,t){var o=new Image;o.onload=function(){var t=o.width,r=o.height,i=t*r,a=4*i,s=new Uint8ClampedArray(i*n),u=document.createElement("canvas");u.width=t,u.height=r;var l=u.getContext("2d");l.drawImage(o,0,0);var c=l.getImageData(0,0,t,r).data;if(3===n)for(var f=0,h=0;f<a;f+=4,h+=3)s[h]=c[f],s[h+1]=c[f+1],s[h+2]=c[f+2];else if(1===n)for(var d=0,p=0;d<a;d+=4,p++)s[p]=c[d];e({data:s,width:t,height:r})},o.onerror=function(){t(new Error("JpegDecode failed to load image"))},o.src=r}))}),this),e.on("FetchBuiltInCMap",(function(e){return this.destroyed?Promise.reject(new Error("Worker was destroyed")):this.CMapReaderFactory.fetch({name:e.name})}),this)}},{key:"_onUnsupportedFeature",value:function(e){var t=e.featureId;this.destroyed||this.loadingTask.onUnsupportedFeature&&this.loadingTask.onUnsupportedFeature(t)}},{key:"getData",value:function(){return this.messageHandler.sendWithPromise("GetData",null)}},{key:"getPage",value:function(e){var t=this;if(!Number.isInteger(e)||e<=0||e>this.numPages)return Promise.reject(new Error("Invalid page request"));var r=e-1;if(r in this.pagePromises)return this.pagePromises[r];var n=this.messageHandler.sendWithPromise("GetPage",{pageIndex:r}).then((function(e){if(t.destroyed)throw new Error("Transport destroyed");var n=new M(r,e,t,t._params.pdfBug);return t.pageCache[r]=n,n}));return this.pagePromises[r]=n,n}},{key:"getPageIndex",value:function(e){return this.messageHandler.sendWithPromise("GetPageIndex",{ref:e}).catch((function(e){return Promise.reject(new Error(e))}))}},{key:"getAnnotations",value:function(e,t){return this.messageHandler.sendWithPromise("GetAnnotations",{pageIndex:e,intent:t})}},{key:"getDestinations",value:function(){return this.messageHandler.sendWithPromise("GetDestinations",null)}},{key:"getDestination",value:function(e){return"string"!=typeof e?Promise.reject(new Error("Invalid destination request.")):this.messageHandler.sendWithPromise("GetDestination",{id:e})}},{key:"getPageLabels",value:function(){return this.messageHandler.sendWithPromise("GetPageLabels",null)}},{key:"getPageMode",value:function(){return this.messageHandler.sendWithPromise("GetPageMode",null)}},{key:"getOpenActionDestination",value:function(){return this.messageHandler.sendWithPromise("getOpenActionDestination",null)}},{key:"getAttachments",value:function(){return this.messageHandler.sendWithPromise("GetAttachments",null)}},{key:"getJavaScript",value:function(){return this.messageHandler.sendWithPromise("GetJavaScript",null)}},{key:"getOutline",value:function(){return this.messageHandler.sendWithPromise("GetOutline",null)}},{key:"getPermissions",value:function(){return this.messageHandler.sendWithPromise("GetPermissions",null)}},{key:"getMetadata",value:function(){var e=this;return this.messageHandler.sendWithPromise("GetMetadata",null).then((function(t){return{info:t[0],metadata:t[1]?new d.Metadata(t[1]):null,contentDispositionFilename:e._fullReader?e._fullReader.filename:null}}))}},{key:"getStats",value:function(){return this.messageHandler.sendWithPromise("GetStats",null)}},{key:"startCleanup",value:function(){var e=this;this.messageHandler.sendWithPromise("Cleanup",null).then((function(){for(var t=0,r=e.pageCache.length;t<r;t++){var n=e.pageCache[t];n&&n.cleanup()}e.commonObjs.clear(),e.fontLoader.clear()}))}},{key:"loadingParams",get:function(){var e=this._params;return(0,i.shadow)(this,"loadingParams",{disableAutoFetch:e.disableAutoFetch,disableCreateObjectURL:e.disableCreateObjectURL,disableFontFace:e.disableFontFace,nativeImageDecoderSupport:e.nativeImageDecoderSupport})}}]),e}(),W=function(){function e(){_(this,e),this._objs=Object.create(null)}return S(e,[{key:"_ensureObj",value:function(e){return this._objs[e]?this._objs[e]:this._objs[e]={capability:(0,i.createPromiseCapability)(),data:null,resolved:!1}}},{key:"get",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null;if(t)return this._ensureObj(e).capability.promise.then(t),null;var r=this._objs[e];if(!r||!r.resolved)throw new Error("Requesting object that isn't resolved yet ".concat(e,"."));return r.data}},{key:"has",value:function(e){var t=this._objs[e];return!!t&&t.resolved}},{key:"resolve",value:function(e,t){var r=this._ensureObj(e);r.resolved=!0,r.data=t,r.capability.resolve(t)}},{key:"clear",value:function(){this._objs=Object.create(null)}}]),e}(),B=function(){function e(t){_(this,e),this._internalRenderTask=t,this.onContinue=null}return S(e,[{key:"cancel",value:function(){this._internalRenderTask.cancel()}},{key:"then",value:function(e,t){return(0,i.deprecated)("RenderTask.then method, use the `promise` getter instead."),this.promise.then.apply(this.promise,arguments)}},{key:"promise",get:function(){return this._internalRenderTask.capability.promise}}]),e}(),G=(q=new WeakSet,function(){function e(t){var r=t.callback,n=t.params,o=t.objs,a=t.commonObjs,s=t.operatorList,u=t.pageNumber,l=t.canvasFactory,c=t.webGLContext,f=t.useRequestAnimationFrame,h=void 0!==f&&f,d=t.pdfBug,p=void 0!==d&&d;_(this,e),this.callback=r,this.params=n,this.objs=o,this.commonObjs=a,this.operatorListIdx=null,this.operatorList=s,this.pageNumber=u,this.canvasFactory=l,this.webGLContext=c,this._pdfBug=p,this.running=!1,this.graphicsReadyCallback=null,this.graphicsReady=!1,this._useRequestAnimationFrame=!0===h&&"undefined"!=typeof window,this.cancelled=!1,this.capability=(0,i.createPromiseCapability)(),this.task=new B(this),this._continueBound=this._continue.bind(this),this._scheduleNextBound=this._scheduleNext.bind(this),this._nextBound=this._next.bind(this),this._canvas=n.canvasContext.canvas}var t,r;return S(e,[{key:"initializeGraphics",value:function(){var e=arguments.length>0&&void 0!==arguments[0]&&arguments[0];if(!this.cancelled){if(this._canvas){if(q.has(this._canvas))throw new Error("Cannot use the same canvas during multiple render() operations. Use different canvas or ensure previous operations were cancelled or completed.");q.add(this._canvas)}this._pdfBug&&c.default.StepperManager&&c.default.StepperManager.enabled&&(this.stepper=c.default.StepperManager.create(this.pageNumber-1),this.stepper.init(this.operatorList),this.stepper.nextBreakPoint=this.stepper.getNextBreakPoint());var t=this.params,r=t.canvasContext,n=t.viewport,o=t.transform,i=t.imageLayer,a=t.background;this.gfx=new l.CanvasGraphics(r,this.commonObjs,this.objs,this.canvasFactory,this.webGLContext,i),this.gfx.beginDrawing({transform:o,viewport:n,transparency:e,background:a}),this.operatorListIdx=0,this.graphicsReady=!0,this.graphicsReadyCallback&&this.graphicsReadyCallback()}}},{key:"cancel",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:null;this.running=!1,this.cancelled=!0,this.gfx&&this.gfx.endDrawing(),this._canvas&&q.delete(this._canvas),this.callback(e||new a.RenderingCancelledException("Rendering cancelled, page ".concat(this.pageNumber),"canvas"))}},{key:"operatorListChanged",value:function(){this.graphicsReady?(this.stepper&&this.stepper.updateOperatorList(this.operatorList),this.running||this._continue()):this.graphicsReadyCallback||(this.graphicsReadyCallback=this._continueBound)}},{key:"_continue",value:function(){this.running=!0,this.cancelled||(this.task.onContinue?this.task.onContinue(this._scheduleNextBound):this._scheduleNext())}},{key:"_scheduleNext",value:function(){var e=this;this._useRequestAnimationFrame?window.requestAnimationFrame((function(){e._nextBound().catch(e.cancel.bind(e))})):Promise.resolve().then(this._nextBound).catch(this.cancel.bind(this))}},{key:"_next",value:(t=o.default.mark((function e(){return o.default.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(!this.cancelled){e.next=2;break}return e.abrupt("return");case 2:this.operatorListIdx=this.gfx.executeOperatorList(this.operatorList,this.operatorListIdx,this._continueBound,this.stepper),this.operatorListIdx===this.operatorList.argsArray.length&&(this.running=!1,this.operatorList.lastChunk&&(this.gfx.endDrawing(),this._canvas&&q.delete(this._canvas),this.callback()));case 4:case"end":return e.stop()}}),e,this)})),r=function(){var e=this,r=arguments;return new Promise((function(n,o){var i=t.apply(e,r);function a(e){m(i,n,o,a,s,"next",e)}function s(e){m(i,n,o,a,s,"throw",e)}a(void 0)}))},function(){return r.apply(this,arguments)})}]),e}());t.version="2.1.266",t.build="81f5835c"},function(e,t,r){"use strict";e.exports=r(148)},function(e,t,r){"use strict";function n(e){return(n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}var o=function(){return this||"object"===("undefined"==typeof self?"undefined":n(self))&&self}()||Function("return this")(),i=o.regeneratorRuntime&&Object.getOwnPropertyNames(o).indexOf("regeneratorRuntime")>=0,a=i&&o.regeneratorRuntime;if(o.regeneratorRuntime=void 0,e.exports=r(149),i)o.regeneratorRuntime=a;else try{delete o.regeneratorRuntime}catch(e){o.regeneratorRuntime=void 0}},function(e,t,r){"use strict";(function(e){function t(e){return(t="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}!function(r){var n,o=Object.prototype,i=o.hasOwnProperty,a="function"==typeof Symbol?Symbol:{},s=a.iterator||"@@iterator",u=a.asyncIterator||"@@asyncIterator",l=a.toStringTag||"@@toStringTag",c="object"===t(e),f=r.regeneratorRuntime;if(f)c&&(e.exports=f);else{(f=r.regeneratorRuntime=c?e.exports:{}).wrap=w;var h="suspendedStart",d="suspendedYield",p="executing",y="completed",v={},m={};m[s]=function(){return this};var g=Object.getPrototypeOf,b=g&&g(g(j([])));b&&b!==o&&i.call(b,s)&&(m=b);var _=k.prototype=P.prototype=Object.create(m);A.prototype=_.constructor=k,k.constructor=A,k[l]=A.displayName="GeneratorFunction",f.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===A||"GeneratorFunction"===(t.displayName||t.name))},f.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,k):(e.__proto__=k,l in e||(e[l]="GeneratorFunction")),e.prototype=Object.create(_),e},f.awrap=function(e){return{__await:e}},E(x.prototype),x.prototype[u]=function(){return this},f.AsyncIterator=x,f.async=function(e,t,r,n){var o=new x(w(e,t,r,n));return f.isGeneratorFunction(t)?o:o.next().then((function(e){return e.done?e.value:o.next()}))},E(_),_[l]="Generator",_[s]=function(){return this},_.toString=function(){return"[object Generator]"},f.keys=function(e){var t=[];for(var r in e)t.push(r);return t.reverse(),function r(){for(;t.length;){var n=t.pop();if(n in e)return r.value=n,r.done=!1,r}return r.done=!0,r}},f.values=j,T.prototype={constructor:T,reset:function(e){if(this.prev=0,this.next=0,this.sent=this._sent=n,this.done=!1,this.delegate=null,this.method="next",this.arg=n,this.tryEntries.forEach(C),!e)for(var t in this)"t"===t.charAt(0)&&i.call(this,t)&&!isNaN(+t.slice(1))&&(this[t]=n)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(e){if(this.done)throw e;var t=this;function r(r,o){return s.type="throw",s.arg=e,t.next=r,o&&(t.method="next",t.arg=n),!!o}for(var o=this.tryEntries.length-1;o>=0;--o){var a=this.tryEntries[o],s=a.completion;if("root"===a.tryLoc)return r("end");if(a.tryLoc<=this.prev){var u=i.call(a,"catchLoc"),l=i.call(a,"finallyLoc");if(u&&l){if(this.prev<a.catchLoc)return r(a.catchLoc,!0);if(this.prev<a.finallyLoc)return r(a.finallyLoc)}else if(u){if(this.prev<a.catchLoc)return r(a.catchLoc,!0)}else{if(!l)throw new Error("try statement without catch or finally");if(this.prev<a.finallyLoc)return r(a.finallyLoc)}}}},abrupt:function(e,t){for(var r=this.tryEntries.length-1;r>=0;--r){var n=this.tryEntries[r];if(n.tryLoc<=this.prev&&i.call(n,"finallyLoc")&&this.prev<n.finallyLoc){var o=n;break}}o&&("break"===e||"continue"===e)&&o.tryLoc<=t&&t<=o.finallyLoc&&(o=null);var a=o?o.completion:{};return a.type=e,a.arg=t,o?(this.method="next",this.next=o.finallyLoc,v):this.complete(a)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),v},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var r=this.tryEntries[t];if(r.finallyLoc===e)return this.complete(r.completion,r.afterLoc),C(r),v}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var r=this.tryEntries[t];if(r.tryLoc===e){var n=r.completion;if("throw"===n.type){var o=n.arg;C(r)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(e,t,r){return this.delegate={iterator:j(e),resultName:t,nextLoc:r},"next"===this.method&&(this.arg=n),v}}}function w(e,t,r,n){var o=t&&t.prototype instanceof P?t:P,i=Object.create(o.prototype),a=new T(n||[]);return i._invoke=function(e,t,r){var n=h;return function(o,i){if(n===p)throw new Error("Generator is already running");if(n===y){if("throw"===o)throw i;return L()}for(r.method=o,r.arg=i;;){var a=r.delegate;if(a){var s=O(a,r);if(s){if(s===v)continue;return s}}if("next"===r.method)r.sent=r._sent=r.arg;else if("throw"===r.method){if(n===h)throw n=y,r.arg;r.dispatchException(r.arg)}else"return"===r.method&&r.abrupt("return",r.arg);n=p;var u=S(e,t,r);if("normal"===u.type){if(n=r.done?y:d,u.arg===v)continue;return{value:u.arg,done:r.done}}"throw"===u.type&&(n=y,r.method="throw",r.arg=u.arg)}}}(e,r,a),i}function S(e,t,r){try{return{type:"normal",arg:e.call(t,r)}}catch(e){return{type:"throw",arg:e}}}function P(){}function A(){}function k(){}function E(e){["next","throw","return"].forEach((function(t){e[t]=function(e){return this._invoke(t,e)}}))}function x(e){var r;this._invoke=function(n,o){function a(){return new Promise((function(r,a){!function r(n,o,a,s){var u=S(e[n],e,o);if("throw"!==u.type){var l=u.arg,c=l.value;return c&&"object"===t(c)&&i.call(c,"__await")?Promise.resolve(c.__await).then((function(e){r("next",e,a,s)}),(function(e){r("throw",e,a,s)})):Promise.resolve(c).then((function(e){l.value=e,a(l)}),(function(e){return r("throw",e,a,s)}))}s(u.arg)}(n,o,r,a)}))}return r=r?r.then(a,a):a()}}function O(e,t){var r=e.iterator[t.method];if(r===n){if(t.delegate=null,"throw"===t.method){if(e.iterator.return&&(t.method="return",t.arg=n,O(e,t),"throw"===t.method))return v;t.method="throw",t.arg=new TypeError("The iterator does not provide a 'throw' method")}return v}var o=S(r,e.iterator,t.arg);if("throw"===o.type)return t.method="throw",t.arg=o.arg,t.delegate=null,v;var i=o.arg;return i?i.done?(t[e.resultName]=i.value,t.next=e.nextLoc,"return"!==t.method&&(t.method="next",t.arg=n),t.delegate=null,v):i:(t.method="throw",t.arg=new TypeError("iterator result is not an object"),t.delegate=null,v)}function R(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function C(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function T(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(R,this),this.reset(!0)}function j(e){if(e){var t=e[s];if(t)return t.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length)){var r=-1,o=function t(){for(;++r<e.length;)if(i.call(e,r))return t.value=e[r],t.done=!1,t;return t.value=n,t.done=!0,t};return o.next=o}}return{next:L}}function L(){return{value:n,done:!0}}}(function(){return this||"object"===("undefined"==typeof self?"undefined":t(self))&&self}()||Function("return this")())}).call(this,r(150)(e))},function(e,t,r){"use strict";e.exports=function(e){return e.webpackPolyfill||(e.deprecate=function(){},e.paths=[],e.children||(e.children=[]),Object.defineProperty(e,"loaded",{enumerable:!0,get:function(){return e.l}}),Object.defineProperty(e,"id",{enumerable:!0,get:function(){return e.i}}),e.webpackPolyfill=1),e}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.addLinkAttributes=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},r=t.url,o=t.target,i=t.rel;if(e.href=e.title=r?(0,n.removeNullCharacters)(r):"",r){var a=Object.values(p).includes(o)?o:p.NONE;e.target=y[a],e.rel="string"==typeof i?i:s}},t.getFilenameFromUrl=function(e){var t=e.indexOf("#"),r=e.indexOf("?"),n=Math.min(t>0?t:e.length,r>0?r:e.length);return e.substring(e.lastIndexOf("/",n)+1,n)},t.loadScript=function(e){return new Promise((function(t,r){var n=document.createElement("script");n.src=e,n.onload=t,n.onerror=function(){r(new Error("Cannot load script at: ".concat(n.src)))},(document.head||document.documentElement).appendChild(n)}))},t.DummyStatTimer=t.StatTimer=t.DOMSVGFactory=t.DOMCMapReaderFactory=t.DOMCanvasFactory=t.DEFAULT_LINK_REL=t.LinkTarget=t.RenderingCancelledException=t.PageViewport=void 0;var n=r(1);function o(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function i(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function a(e,t,r){return t&&i(e.prototype,t),r&&i(e,r),e}var s="noopener noreferrer nofollow";t.DEFAULT_LINK_REL=s;var u="http://www.w3.org/2000/svg",l=function(){function e(){o(this,e)}return a(e,[{key:"create",value:function(e,t){if(e<=0||t<=0)throw new Error("invalid canvas size");var r=document.createElement("canvas"),n=r.getContext("2d");return r.width=e,r.height=t,{canvas:r,context:n}}},{key:"reset",value:function(e,t,r){if(!e.canvas)throw new Error("canvas is not specified");if(t<=0||r<=0)throw new Error("invalid canvas size");e.canvas.width=t,e.canvas.height=r}},{key:"destroy",value:function(e){if(!e.canvas)throw new Error("canvas is not specified");e.canvas.width=0,e.canvas.height=0,e.canvas=null,e.context=null}}]),e}();t.DOMCanvasFactory=l;var c=function(){function e(t){var r=t.baseUrl,n=void 0===r?null:r,i=t.isCompressed,a=void 0!==i&&i;o(this,e),this.baseUrl=n,this.isCompressed=a}return a(e,[{key:"fetch",value:function(e){var t=this,r=e.name;return this.baseUrl?r?new Promise((function(e,o){var i=t.baseUrl+r+(t.isCompressed?".bcmap":""),a=new XMLHttpRequest;a.open("GET",i,!0),t.isCompressed&&(a.responseType="arraybuffer"),a.onreadystatechange=function(){if(a.readyState===XMLHttpRequest.DONE){var r;if((200===a.status||0===a.status)&&(t.isCompressed&&a.response?r=new Uint8Array(a.response):!t.isCompressed&&a.responseText&&(r=(0,n.stringToBytes)(a.responseText)),r))return void e({cMapData:r,compressionType:t.isCompressed?n.CMapCompressionType.BINARY:n.CMapCompressionType.NONE});o(new Error("Unable to load "+(t.isCompressed?"binary ":"")+"CMap at: "+i))}},a.send(null)})):Promise.reject(new Error("CMap name must be specified.")):Promise.reject(new Error('The CMap "baseUrl" parameter must be specified, ensure that the "cMapUrl" and "cMapPacked" API parameters are provided.'))}}]),e}();t.DOMCMapReaderFactory=c;var f=function(){function e(){o(this,e)}return a(e,[{key:"create",value:function(e,t){(0,n.assert)(e>0&&t>0,"Invalid SVG dimensions");var r=document.createElementNS(u,"svg:svg");return r.setAttribute("version","1.1"),r.setAttribute("width",e+"px"),r.setAttribute("height",t+"px"),r.setAttribute("preserveAspectRatio","none"),r.setAttribute("viewBox","0 0 "+e+" "+t),r}},{key:"createElement",value:function(e){return(0,n.assert)("string"==typeof e,"Invalid SVG element type"),document.createElementNS(u,e)}}]),e}();t.DOMSVGFactory=f;var h=function(){function e(t){var r=t.viewBox,n=t.scale,i=t.rotation,a=t.offsetX,s=void 0===a?0:a,u=t.offsetY,l=void 0===u?0:u,c=t.dontFlip,f=void 0!==c&&c;o(this,e),this.viewBox=r,this.scale=n,this.rotation=i,this.offsetX=s,this.offsetY=l;var h,d,p,y,v,m,g,b,_=(r[2]+r[0])/2,w=(r[3]+r[1])/2;switch(i=(i%=360)<0?i+360:i){case 180:h=-1,d=0,p=0,y=1;break;case 90:h=0,d=1,p=1,y=0;break;case 270:h=0,d=-1,p=-1,y=0;break;default:h=1,d=0,p=0,y=-1}f&&(p=-p,y=-y),0===h?(v=Math.abs(w-r[1])*n+s,m=Math.abs(_-r[0])*n+l,g=Math.abs(r[3]-r[1])*n,b=Math.abs(r[2]-r[0])*n):(v=Math.abs(_-r[0])*n+s,m=Math.abs(w-r[1])*n+l,g=Math.abs(r[2]-r[0])*n,b=Math.abs(r[3]-r[1])*n),this.transform=[h*n,d*n,p*n,y*n,v-h*n*_-p*n*w,m-d*n*_-y*n*w],this.width=g,this.height=b}return a(e,[{key:"clone",value:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},r=t.scale,n=void 0===r?this.scale:r,o=t.rotation,i=void 0===o?this.rotation:o,a=t.dontFlip,s=void 0!==a&&a;return new e({viewBox:this.viewBox.slice(),scale:n,rotation:i,offsetX:this.offsetX,offsetY:this.offsetY,dontFlip:s})}},{key:"convertToViewportPoint",value:function(e,t){return n.Util.applyTransform([e,t],this.transform)}},{key:"convertToViewportRectangle",value:function(e){var t=n.Util.applyTransform([e[0],e[1]],this.transform),r=n.Util.applyTransform([e[2],e[3]],this.transform);return[t[0],t[1],r[0],r[1]]}},{key:"convertToPdfPoint",value:function(e,t){return n.Util.applyInverseTransform([e,t],this.transform)}}]),e}();t.PageViewport=h;var d=function(){function e(e,t){this.message=e,this.type=t}return e.prototype=new Error,e.prototype.name="RenderingCancelledException",e.constructor=e,e}();t.RenderingCancelledException=d;var p={NONE:0,SELF:1,BLANK:2,PARENT:3,TOP:4};t.LinkTarget=p;var y=["","_self","_blank","_parent","_top"],v=function(){function e(){var t=!(arguments.length>0&&void 0!==arguments[0])||arguments[0];o(this,e),this.enabled=!!t,this.started=Object.create(null),this.times=[]}return a(e,[{key:"time",value:function(e){this.enabled&&(e in this.started&&(0,n.warn)("Timer is already running for "+e),this.started[e]=Date.now())}},{key:"timeEnd",value:function(e){this.enabled&&(e in this.started||(0,n.warn)("Timer has not been started for "+e),this.times.push({name:e,start:this.started[e],end:Date.now()}),delete this.started[e])}},{key:"toString",value:function(){for(var e=this.times,t="",r=0,n=0,o=e.length;n<o;++n){var i=e[n].name;i.length>r&&(r=i.length)}for(var a=0,s=e.length;a<s;++a){var u=e[a],l=u.end-u.start;t+="".concat(u.name.padEnd(r)," ").concat(l,"ms\n")}return t}}]),e}();t.StatTimer=v;var m=function(){function e(){o(this,e),(0,n.unreachable)("Cannot initialize DummyStatTimer.")}return a(e,null,[{key:"time",value:function(e){}},{key:"timeEnd",value:function(e){}},{key:"toString",value:function(){return""}}]),e}();t.DummyStatTimer=m},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.FontLoader=t.FontFaceObject=void 0;var n,o=(n=r(147))&&n.__esModule?n:{default:n},i=r(1);function a(e){return(a="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function s(e,t){return!t||"object"!==a(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function u(e){return(u=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function l(e,t){return(l=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function c(e,t,r,n,o,i,a){try{var s=e[i](a),u=s.value}catch(e){return void r(e)}s.done?t(u):Promise.resolve(u).then(n,o)}function f(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function h(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function d(e,t,r){return t&&h(e.prototype,t),r&&h(e,r),e}var p,y=function(){function e(t){var r=t.docId,n=t.onUnsupportedFeature;f(this,e),this.constructor===e&&(0,i.unreachable)("Cannot initialize BaseFontLoader."),this.docId=r,this._onUnsupportedFeature=n,this.nativeFontFaces=[],this.styleElement=null}var t,r;return d(e,[{key:"addNativeFontFace",value:function(e){this.nativeFontFaces.push(e),document.fonts.add(e)}},{key:"insertRule",value:function(e){var t=this.styleElement;t||((t=this.styleElement=document.createElement("style")).id="PDFJS_FONT_STYLE_TAG_".concat(this.docId),document.documentElement.getElementsByTagName("head")[0].appendChild(t));var r=t.sheet;r.insertRule(e,r.cssRules.length)}},{key:"clear",value:function(){this.nativeFontFaces.forEach((function(e){document.fonts.delete(e)})),this.nativeFontFaces.length=0,this.styleElement&&(this.styleElement.remove(),this.styleElement=null)}},{key:"bind",value:(t=o.default.mark((function e(t){var r,n,a=this;return o.default.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(!t.attached&&!t.missingFile){e.next=2;break}return e.abrupt("return");case 2:if(t.attached=!0,!this.isFontLoadingAPISupported){e.next=19;break}if(!(r=t.createNativeFontFace())){e.next=18;break}return this.addNativeFontFace(r),e.prev=7,e.next=10,r.loaded;case 10:e.next=18;break;case 12:throw e.prev=12,e.t0=e.catch(7),this._onUnsupportedFeature({featureId:i.UNSUPPORTED_FEATURES.font}),(0,i.warn)("Failed to load font '".concat(r.family,"': '").concat(e.t0,"'.")),t.disableFontFace=!0,e.t0;case 18:return e.abrupt("return");case 19:if(!(n=t.createFontFaceRule())){e.next=25;break}if(this.insertRule(n),!this.isSyncFontLoadingSupported){e.next=24;break}return e.abrupt("return");case 24:return e.abrupt("return",new Promise((function(e){var r=a._queueLoadingCallback(e);a._prepareFontLoadEvent([n],[t],r)})));case 25:case"end":return e.stop()}}),e,this,[[7,12]])})),r=function(){var e=this,r=arguments;return new Promise((function(n,o){var i=t.apply(e,r);function a(e){c(i,n,o,a,s,"next",e)}function s(e){c(i,n,o,a,s,"throw",e)}a(void 0)}))},function(e){return r.apply(this,arguments)})},{key:"_queueLoadingCallback",value:function(e){(0,i.unreachable)("Abstract method `_queueLoadingCallback`.")}},{key:"_prepareFontLoadEvent",value:function(e,t,r){(0,i.unreachable)("Abstract method `_prepareFontLoadEvent`.")}},{key:"isFontLoadingAPISupported",get:function(){(0,i.unreachable)("Abstract method `isFontLoadingAPISupported`.")}},{key:"isSyncFontLoadingSupported",get:function(){(0,i.unreachable)("Abstract method `isSyncFontLoadingSupported`.")}},{key:"_loadTestFont",get:function(){(0,i.unreachable)("Abstract method `_loadTestFont`.")}}]),e}();t.FontLoader=p,t.FontLoader=p=function(e){function t(e){var r;return f(this,t),(r=s(this,u(t).call(this,e))).loadingContext={requests:[],nextRequestId:0},r.loadTestFontId=0,r}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&l(e,t)}(t,e),d(t,[{key:"_queueLoadingCallback",value:function(e){var t=this.loadingContext,r={id:"pdfjs-font-loading-".concat(t.nextRequestId++),done:!1,complete:function(){for((0,i.assert)(!r.done,"completeRequest() cannot be called twice."),r.done=!0;t.requests.length>0&&t.requests[0].done;){var e=t.requests.shift();setTimeout(e.callback,0)}},callback:e};return t.requests.push(r),r}},{key:"_prepareFontLoadEvent",value:function(e,t,r){function n(e,t){return e.charCodeAt(t)<<24|e.charCodeAt(t+1)<<16|e.charCodeAt(t+2)<<8|255&e.charCodeAt(t+3)}function o(e,t,r,n){return e.substring(0,t)+n+e.substring(t+r)}var a,s,u=document.createElement("canvas");u.width=1,u.height=1;var l=u.getContext("2d"),c=0,f="lt".concat(Date.now()).concat(this.loadTestFontId++),h=this._loadTestFont,d=n(h=o(h,976,f.length,f),16);for(a=0,s=f.length-3;a<s;a+=4)d=d-1482184792+n(f,a)|0;a<f.length&&(d=d-1482184792+n(f+"XXX",a)|0),h=o(h,16,4,(0,i.string32)(d));var p="url(data:font/opentype;base64,".concat(btoa(h),");"),y='@font-face {font-family:"'.concat(f,'";src:').concat(p,"}");this.insertRule(y);var v=[];for(a=0,s=t.length;a<s;a++)v.push(t[a].loadedName);v.push(f);var m=document.createElement("div");for(m.setAttribute("style","visibility: hidden;width: 10px; height: 10px;position: absolute; top: 0px; left: 0px;"),a=0,s=v.length;a<s;++a){var g=document.createElement("span");g.textContent="Hi",g.style.fontFamily=v[a],m.appendChild(g)}document.body.appendChild(m),function e(t,r){if(++c>30)return(0,i.warn)("Load test font never loaded."),void r();l.font="30px "+t,l.fillText(".",0,20),l.getImageData(0,0,1,1).data[3]>0?r():setTimeout(e.bind(null,t,r))}(f,(function(){document.body.removeChild(m),r.complete()}))}},{key:"isFontLoadingAPISupported",get:function(){var e="undefined"!=typeof document&&!!document.fonts;if(e&&"undefined"!=typeof navigator){var t=/Mozilla\/5.0.*?rv:(\d+).*? Gecko/.exec(navigator.userAgent);t&&t[1]<63&&(e=!1)}return(0,i.shadow)(this,"isFontLoadingAPISupported",e)}},{key:"isSyncFontLoadingSupported",get:function(){var e=!1;if("undefined"==typeof navigator)e=!0;else{var t=/Mozilla\/5.0.*?rv:(\d+).*? Gecko/.exec(navigator.userAgent);t&&t[1]>=14&&(e=!0)}return(0,i.shadow)(this,"isSyncFontLoadingSupported",e)}},{key:"_loadTestFont",get:function(){return(0,i.shadow)(this,"_loadTestFont",atob("T1RUTwALAIAAAwAwQ0ZGIDHtZg4AAAOYAAAAgUZGVE1lkzZwAAAEHAAAABxHREVGABQAFQAABDgAAAAeT1MvMlYNYwkAAAEgAAAAYGNtYXABDQLUAAACNAAAAUJoZWFk/xVFDQAAALwAAAA2aGhlYQdkA+oAAAD0AAAAJGhtdHgD6AAAAAAEWAAAAAZtYXhwAAJQAAAAARgAAAAGbmFtZVjmdH4AAAGAAAAAsXBvc3T/hgAzAAADeAAAACAAAQAAAAEAALZRFsRfDzz1AAsD6AAAAADOBOTLAAAAAM4KHDwAAAAAA+gDIQAAAAgAAgAAAAAAAAABAAADIQAAAFoD6AAAAAAD6AABAAAAAAAAAAAAAAAAAAAAAQAAUAAAAgAAAAQD6AH0AAUAAAKKArwAAACMAooCvAAAAeAAMQECAAACAAYJAAAAAAAAAAAAAQAAAAAAAAAAAAAAAFBmRWQAwAAuAC4DIP84AFoDIQAAAAAAAQAAAAAAAAAAACAAIAABAAAADgCuAAEAAAAAAAAAAQAAAAEAAAAAAAEAAQAAAAEAAAAAAAIAAQAAAAEAAAAAAAMAAQAAAAEAAAAAAAQAAQAAAAEAAAAAAAUAAQAAAAEAAAAAAAYAAQAAAAMAAQQJAAAAAgABAAMAAQQJAAEAAgABAAMAAQQJAAIAAgABAAMAAQQJAAMAAgABAAMAAQQJAAQAAgABAAMAAQQJAAUAAgABAAMAAQQJAAYAAgABWABYAAAAAAAAAwAAAAMAAAAcAAEAAAAAADwAAwABAAAAHAAEACAAAAAEAAQAAQAAAC7//wAAAC7////TAAEAAAAAAAABBgAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAD/gwAyAAAAAQAAAAAAAAAAAAAAAAAAAAABAAQEAAEBAQJYAAEBASH4DwD4GwHEAvgcA/gXBIwMAYuL+nz5tQXkD5j3CBLnEQACAQEBIVhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYAAABAQAADwACAQEEE/t3Dov6fAH6fAT+fPp8+nwHDosMCvm1Cvm1DAz6fBQAAAAAAAABAAAAAMmJbzEAAAAAzgTjFQAAAADOBOQpAAEAAAAAAAAADAAUAAQAAAABAAAAAgABAAAAAAAAAAAD6AAAAAAAAA=="))}}]),t}(y);var v={get value(){return(0,i.shadow)(this,"value",(0,i.isEvalSupported)())}},m=function(){function e(t,r){var n=r.isEvalSupported,o=void 0===n||n,i=r.disableFontFace,a=void 0!==i&&i,s=r.ignoreErrors,u=void 0!==s&&s,l=r.onUnsupportedFeature,c=void 0===l?null:l,h=r.fontRegistry,d=void 0===h?null:h;for(var p in f(this,e),this.compiledGlyphs=Object.create(null),t)this[p]=t[p];this.isEvalSupported=!1!==o,this.disableFontFace=!0===a,this.ignoreErrors=!0===u,this._onUnsupportedFeature=c,this.fontRegistry=d}return d(e,[{key:"createNativeFontFace",value:function(){if(!this.data||this.disableFontFace)return null;var e=new FontFace(this.loadedName,this.data,{});return this.fontRegistry&&this.fontRegistry.registerFont(this),e}},{key:"createFontFaceRule",value:function(){if(!this.data||this.disableFontFace)return null;var e=(0,i.bytesToString)(new Uint8Array(this.data)),t="url(data:".concat(this.mimetype,";base64,").concat(btoa(e),");"),r='@font-face {font-family:"'.concat(this.loadedName,'";src:').concat(t,"}");return this.fontRegistry&&this.fontRegistry.registerFont(this,t),r}},{key:"getPathGenerator",value:function(e,t){if(void 0!==this.compiledGlyphs[t])return this.compiledGlyphs[t];var r,n;try{r=e.get(this.loadedName+"_path_"+t)}catch(e){if(!this.ignoreErrors)throw e;return this._onUnsupportedFeature&&this._onUnsupportedFeature({featureId:i.UNSUPPORTED_FEATURES.font}),(0,i.warn)('getPathGenerator - ignoring character: "'.concat(e,'".')),this.compiledGlyphs[t]=function(e,t){}}if(this.isEvalSupported&&v.value){for(var o,a="",s=0,u=r.length;s<u;s++)o=void 0!==(n=r[s]).args?n.args.join(","):"",a+="c."+n.cmd+"("+o+");\n";return this.compiledGlyphs[t]=new Function("c","size",a)}return this.compiledGlyphs[t]=function(e,t){for(var o=0,i=r.length;o<i;o++)"scale"===(n=r[o]).cmd&&(n.args=[t,-t]),e[n.cmd].apply(e,n.args)}}}]),e}();t.FontFaceObject=m},function(e,t,r){"use strict";var n=Object.create(null),o=r(4),i="undefined"!=typeof navigator&&navigator.userAgent||"",a=/Trident/.test(i),s=/CriOS/.test(i);(a||s)&&(n.disableCreateObjectURL=!0),o()&&(n.disableFontFace=!0,n.nativeImageDecoderSupport="none"),t.apiCompatibilityParams=Object.freeze(n)},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.CanvasGraphics=void 0;var n=r(1),o=r(155),i=16,a={get value(){return(0,n.shadow)(a,"value",(0,n.isLittleEndian)())}};function s(e){e.mozCurrentTransform||(e._originalSave=e.save,e._originalRestore=e.restore,e._originalRotate=e.rotate,e._originalScale=e.scale,e._originalTranslate=e.translate,e._originalTransform=e.transform,e._originalSetTransform=e.setTransform,e._transformMatrix=e._transformMatrix||[1,0,0,1,0,0],e._transformStack=[],Object.defineProperty(e,"mozCurrentTransform",{get:function(){return this._transformMatrix}}),Object.defineProperty(e,"mozCurrentTransformInverse",{get:function(){var e=this._transformMatrix,t=e[0],r=e[1],n=e[2],o=e[3],i=e[4],a=e[5],s=t*o-r*n,u=r*n-t*o;return[o/s,r/u,n/u,t/s,(o*i-n*a)/u,(r*i-t*a)/s]}}),e.save=function(){var e=this._transformMatrix;this._transformStack.push(e),this._transformMatrix=e.slice(0,6),this._originalSave()},e.restore=function(){var e=this._transformStack.pop();e&&(this._transformMatrix=e,this._originalRestore())},e.translate=function(e,t){var r=this._transformMatrix;r[4]=r[0]*e+r[2]*t+r[4],r[5]=r[1]*e+r[3]*t+r[5],this._originalTranslate(e,t)},e.scale=function(e,t){var r=this._transformMatrix;r[0]=r[0]*e,r[1]=r[1]*e,r[2]=r[2]*t,r[3]=r[3]*t,this._originalScale(e,t)},e.transform=function(t,r,n,o,i,a){var s=this._transformMatrix;this._transformMatrix=[s[0]*t+s[2]*r,s[1]*t+s[3]*r,s[0]*n+s[2]*o,s[1]*n+s[3]*o,s[0]*i+s[2]*a+s[4],s[1]*i+s[3]*a+s[5]],e._originalTransform(t,r,n,o,i,a)},e.setTransform=function(t,r,n,o,i,a){this._transformMatrix=[t,r,n,o,i,a],e._originalSetTransform(t,r,n,o,i,a)},e.rotate=function(e){var t=Math.cos(e),r=Math.sin(e),n=this._transformMatrix;this._transformMatrix=[n[0]*t+n[2]*r,n[1]*t+n[3]*r,n[0]*-r+n[2]*t,n[1]*-r+n[3]*t,n[4],n[5]],this._originalRotate(e)})}var u=function(){function e(e){this.canvasFactory=e,this.cache=Object.create(null)}return e.prototype={getCanvas:function(e,t,r,n){var o;return void 0!==this.cache[e]?(o=this.cache[e],this.canvasFactory.reset(o,t,r),o.context.setTransform(1,0,0,1,0,0)):(o=this.canvasFactory.create(t,r),this.cache[e]=o),n&&s(o.context),o},clear:function(){for(var e in this.cache){var t=this.cache[e];this.canvasFactory.destroy(t),delete this.cache[e]}}},e}(),l=function(){function e(){this.alphaIsShape=!1,this.fontSize=0,this.fontSizeScale=1,this.textMatrix=n.IDENTITY_MATRIX,this.textMatrixScale=1,this.fontMatrix=n.FONT_IDENTITY_MATRIX,this.leading=0,this.x=0,this.y=0,this.lineX=0,this.lineY=0,this.charSpacing=0,this.wordSpacing=0,this.textHScale=1,this.textRenderingMode=n.TextRenderingMode.FILL,this.textRise=0,this.fillColor="#000000",this.strokeColor="#000000",this.patternFill=!1,this.fillAlpha=1,this.strokeAlpha=1,this.lineWidth=1,this.activeSMask=null,this.resumeSMaskCtx=null}return e.prototype={clone:function(){return Object.create(this)},setCurrentPoint:function(e,t){this.x=e,this.y=t}},e}(),c=function(){function e(e,t,r,n,o,i){this.ctx=e,this.current=new l,this.stateStack=[],this.pendingClip=null,this.pendingEOFill=!1,this.res=null,this.xobjs=null,this.commonObjs=t,this.objs=r,this.canvasFactory=n,this.webGLContext=o,this.imageLayer=i,this.groupStack=[],this.processingType3=null,this.baseTransform=null,this.baseTransformStack=[],this.groupLevel=0,this.smaskStack=[],this.smaskCounter=0,this.tempSMask=null,this.cachedCanvases=new u(this.canvasFactory),e&&s(e),this._cachedGetSinglePixelWidth=null}function t(e,t){if("undefined"!=typeof ImageData&&t instanceof ImageData)e.putImageData(t,0,0);else{var r,o,s,u,l,c=t.height,f=t.width,h=c%i,d=(c-h)/i,p=0===h?d:d+1,y=e.createImageData(f,i),v=0,m=t.data,g=y.data;if(t.kind===n.ImageKind.GRAYSCALE_1BPP){var b=m.byteLength,_=new Uint32Array(g.buffer,0,g.byteLength>>2),w=_.length,S=f+7>>3,P=4294967295,A=a.value?4278190080:255;for(o=0;o<p;o++){for(u=o<d?i:h,r=0,s=0;s<u;s++){for(var k=b-v,E=0,x=k>S?f:8*k-7,O=-8&x,R=0,C=0;E<O;E+=8)C=m[v++],_[r++]=128&C?P:A,_[r++]=64&C?P:A,_[r++]=32&C?P:A,_[r++]=16&C?P:A,_[r++]=8&C?P:A,_[r++]=4&C?P:A,_[r++]=2&C?P:A,_[r++]=1&C?P:A;for(;E<x;E++)0===R&&(C=m[v++],R=128),_[r++]=C&R?P:A,R>>=1}for(;r<w;)_[r++]=0;e.putImageData(y,0,o*i)}}else if(t.kind===n.ImageKind.RGBA_32BPP){for(s=0,l=f*i*4,o=0;o<d;o++)g.set(m.subarray(v,v+l)),v+=l,e.putImageData(y,0,s),s+=i;o<p&&(l=f*h*4,g.set(m.subarray(v,v+l)),e.putImageData(y,0,s))}else{if(t.kind!==n.ImageKind.RGB_24BPP)throw new Error("bad image kind: ".concat(t.kind));for(l=f*(u=i),o=0;o<p;o++){for(o>=d&&(l=f*(u=h)),r=0,s=l;s--;)g[r++]=m[v++],g[r++]=m[v++],g[r++]=m[v++],g[r++]=255;e.putImageData(y,0,o*i)}}}}function r(e,t){for(var r=t.height,n=t.width,o=r%i,a=(r-o)/i,s=0===o?a:a+1,u=e.createImageData(n,i),l=0,c=t.data,f=u.data,h=0;h<s;h++){for(var d=h<a?i:o,p=3,y=0;y<d;y++)for(var v=0,m=0;m<n;m++){if(!v){var g=c[l++];v=128}f[p]=g&v?0:255,p+=4,v>>=1}e.putImageData(u,0,h*i)}}function c(e,t){for(var r=["strokeStyle","fillStyle","fillRule","globalAlpha","lineWidth","lineCap","lineJoin","miterLimit","globalCompositeOperation","font"],n=0,o=r.length;n<o;n++){var i=r[n];void 0!==e[i]&&(t[i]=e[i])}void 0!==e.setLineDash&&(t.setLineDash(e.getLineDash()),t.lineDashOffset=e.lineDashOffset)}function f(e){e.strokeStyle="#000000",e.fillStyle="#000000",e.fillRule="nonzero",e.globalAlpha=1,e.lineWidth=1,e.lineCap="butt",e.lineJoin="miter",e.miterLimit=10,e.globalCompositeOperation="source-over",e.font="10px sans-serif",void 0!==e.setLineDash&&(e.setLineDash([]),e.lineDashOffset=0)}function h(e,t,r,n){for(var o=e.length,i=3;i<o;i+=4){var a=e[i];if(0===a)e[i-3]=t,e[i-2]=r,e[i-1]=n;else if(a<255){var s=255-a;e[i-3]=e[i-3]*a+t*s>>8,e[i-2]=e[i-2]*a+r*s>>8,e[i-1]=e[i-1]*a+n*s>>8}}}function d(e,t,r){for(var n=e.length,o=3;o<n;o+=4){var i=r?r[e[o]]:e[o];t[o]=t[o]*i*(1/255)|0}}function p(e,t,r){for(var n=e.length,o=3;o<n;o+=4){var i=77*e[o-3]+152*e[o-2]+28*e[o-1];t[o]=r?t[o]*r[i>>8]>>8:t[o]*i>>16}}function y(e,t,r,n){var o=t.canvas,i=t.context;e.setTransform(t.scaleX,0,0,t.scaleY,t.offsetX,t.offsetY);var a=t.backdrop||null;if(!t.transferMap&&n.isEnabled){var s=n.composeSMask({layer:r.canvas,mask:o,properties:{subtype:t.subtype,backdrop:a}});return e.setTransform(1,0,0,1,0,0),void e.drawImage(s,t.offsetX,t.offsetY)}!function(e,t,r,n,o,i,a){var s,u=!!i,l=u?i[0]:0,c=u?i[1]:0,f=u?i[2]:0;s="Luminosity"===o?p:d;for(var y=Math.min(n,Math.ceil(1048576/r)),v=0;v<n;v+=y){var m=Math.min(y,n-v),g=e.getImageData(0,v,r,m),b=t.getImageData(0,v,r,m);u&&h(g.data,l,c,f),s(g.data,b.data,a),e.putImageData(b,0,v)}}(i,r,o.width,o.height,t.subtype,a,t.transferMap),e.drawImage(o,0,0)}var v=["butt","round","square"],m=["miter","round","bevel"],g={},b={};for(var _ in e.prototype={beginDrawing:function(e){var t=e.transform,r=e.viewport,n=e.transparency,o=void 0!==n&&n,i=e.background,a=void 0===i?null:i,s=this.ctx.canvas.width,u=this.ctx.canvas.height;if(this.ctx.save(),this.ctx.fillStyle=a||"rgb(255, 255, 255)",this.ctx.fillRect(0,0,s,u),this.ctx.restore(),o){var l=this.cachedCanvases.getCanvas("transparent",s,u,!0);this.compositeCtx=this.ctx,this.transparentCanvas=l.canvas,this.ctx=l.context,this.ctx.save(),this.ctx.transform.apply(this.ctx,this.compositeCtx.mozCurrentTransform)}this.ctx.save(),f(this.ctx),t&&this.ctx.transform.apply(this.ctx,t),this.ctx.transform.apply(this.ctx,r.transform),this.baseTransform=this.ctx.mozCurrentTransform.slice(),this.imageLayer&&this.imageLayer.beginLayout()},executeOperatorList:function(e,t,r,o){var i=e.argsArray,a=e.fnArray,s=t||0,u=i.length;if(u===s)return s;for(var l,c=u-s>10&&"function"==typeof r,f=c?Date.now()+15:0,h=0,d=this.commonObjs,p=this.objs;;){if(void 0!==o&&s===o.nextBreakPoint)return o.breakIt(s,r),s;if((l=a[s])!==n.OPS.dependency)this[l].apply(this,i[s]);else for(var y=i[s],v=0,m=y.length;v<m;v++){var g=y[v],b="g"===g[0]&&"_"===g[1]?d:p;if(!b.has(g))return b.get(g,r),s}if(++s===u)return s;if(c&&++h>10){if(Date.now()>f)return r(),s;h=0}}},endDrawing:function(){null!==this.current.activeSMask&&this.endSMaskGroup(),this.ctx.restore(),this.transparentCanvas&&(this.ctx=this.compositeCtx,this.ctx.save(),this.ctx.setTransform(1,0,0,1,0,0),this.ctx.drawImage(this.transparentCanvas,0,0),this.ctx.restore(),this.transparentCanvas=null),this.cachedCanvases.clear(),this.webGLContext.clear(),this.imageLayer&&this.imageLayer.endLayout()},setLineWidth:function(e){this.current.lineWidth=e,this.ctx.lineWidth=e},setLineCap:function(e){this.ctx.lineCap=v[e]},setLineJoin:function(e){this.ctx.lineJoin=m[e]},setMiterLimit:function(e){this.ctx.miterLimit=e},setDash:function(e,t){var r=this.ctx;void 0!==r.setLineDash&&(r.setLineDash(e),r.lineDashOffset=t)},setRenderingIntent:function(e){},setFlatness:function(e){},setGState:function(e){for(var t=0,r=e.length;t<r;t++){var n=e[t],o=n[0],i=n[1];switch(o){case"LW":this.setLineWidth(i);break;case"LC":this.setLineCap(i);break;case"LJ":this.setLineJoin(i);break;case"ML":this.setMiterLimit(i);break;case"D":this.setDash(i[0],i[1]);break;case"RI":this.setRenderingIntent(i);break;case"FL":this.setFlatness(i);break;case"Font":this.setFont(i[0],i[1]);break;case"CA":this.current.strokeAlpha=n[1];break;case"ca":this.current.fillAlpha=n[1],this.ctx.globalAlpha=n[1];break;case"BM":this.ctx.globalCompositeOperation=i;break;case"SMask":this.current.activeSMask&&(this.stateStack.length>0&&this.stateStack[this.stateStack.length-1].activeSMask===this.current.activeSMask?this.suspendSMaskGroup():this.endSMaskGroup()),this.current.activeSMask=i?this.tempSMask:null,this.current.activeSMask&&this.beginSMaskGroup(),this.tempSMask=null}}},beginSMaskGroup:function(){var e=this.current.activeSMask,t=e.canvas.width,r=e.canvas.height,n="smaskGroupAt"+this.groupLevel,o=this.cachedCanvases.getCanvas(n,t,r,!0),i=this.ctx,a=i.mozCurrentTransform;this.ctx.save();var s=o.context;s.scale(1/e.scaleX,1/e.scaleY),s.translate(-e.offsetX,-e.offsetY),s.transform.apply(s,a),e.startTransformInverse=s.mozCurrentTransformInverse,c(i,s),this.ctx=s,this.setGState([["BM","source-over"],["ca",1],["CA",1]]),this.groupStack.push(i),this.groupLevel++},suspendSMaskGroup:function(){var e=this.ctx;this.groupLevel--,this.ctx=this.groupStack.pop(),y(this.ctx,this.current.activeSMask,e,this.webGLContext),this.ctx.restore(),this.ctx.save(),c(e,this.ctx),this.current.resumeSMaskCtx=e;var t=n.Util.transform(this.current.activeSMask.startTransformInverse,e.mozCurrentTransform);this.ctx.transform.apply(this.ctx,t),e.save(),e.setTransform(1,0,0,1,0,0),e.clearRect(0,0,e.canvas.width,e.canvas.height),e.restore()},resumeSMaskGroup:function(){var e=this.current.resumeSMaskCtx,t=this.ctx;this.ctx=e,this.groupStack.push(t),this.groupLevel++},endSMaskGroup:function(){var e=this.ctx;this.groupLevel--,this.ctx=this.groupStack.pop(),y(this.ctx,this.current.activeSMask,e,this.webGLContext),this.ctx.restore(),c(e,this.ctx);var t=n.Util.transform(this.current.activeSMask.startTransformInverse,e.mozCurrentTransform);this.ctx.transform.apply(this.ctx,t)},save:function(){this.ctx.save();var e=this.current;this.stateStack.push(e),this.current=e.clone(),this.current.resumeSMaskCtx=null},restore:function(){this.current.resumeSMaskCtx&&this.resumeSMaskGroup(),null===this.current.activeSMask||0!==this.stateStack.length&&this.stateStack[this.stateStack.length-1].activeSMask===this.current.activeSMask||this.endSMaskGroup(),0!==this.stateStack.length&&(this.current=this.stateStack.pop(),this.ctx.restore(),this.pendingClip=null,this._cachedGetSinglePixelWidth=null)},transform:function(e,t,r,n,o,i){this.ctx.transform(e,t,r,n,o,i),this._cachedGetSinglePixelWidth=null},constructPath:function(e,t){for(var r=this.ctx,o=this.current,i=o.x,a=o.y,s=0,u=0,l=e.length;s<l;s++)switch(0|e[s]){case n.OPS.rectangle:i=t[u++],a=t[u++];var c=t[u++],f=t[u++];0===c&&(c=this.getSinglePixelWidth()),0===f&&(f=this.getSinglePixelWidth());var h=i+c,d=a+f;this.ctx.moveTo(i,a),this.ctx.lineTo(h,a),this.ctx.lineTo(h,d),this.ctx.lineTo(i,d),this.ctx.lineTo(i,a),this.ctx.closePath();break;case n.OPS.moveTo:i=t[u++],a=t[u++],r.moveTo(i,a);break;case n.OPS.lineTo:i=t[u++],a=t[u++],r.lineTo(i,a);break;case n.OPS.curveTo:i=t[u+4],a=t[u+5],r.bezierCurveTo(t[u],t[u+1],t[u+2],t[u+3],i,a),u+=6;break;case n.OPS.curveTo2:r.bezierCurveTo(i,a,t[u],t[u+1],t[u+2],t[u+3]),i=t[u+2],a=t[u+3],u+=4;break;case n.OPS.curveTo3:i=t[u+2],a=t[u+3],r.bezierCurveTo(t[u],t[u+1],i,a,i,a),u+=4;break;case n.OPS.closePath:r.closePath()}o.setCurrentPoint(i,a)},closePath:function(){this.ctx.closePath()},stroke:function(e){e=void 0===e||e;var t=this.ctx,r=this.current.strokeColor;t.lineWidth=Math.max(.65*this.getSinglePixelWidth(),this.current.lineWidth),t.globalAlpha=this.current.strokeAlpha,r&&r.hasOwnProperty("type")&&"Pattern"===r.type?(t.save(),t.strokeStyle=r.getPattern(t,this),t.stroke(),t.restore()):t.stroke(),e&&this.consumePath(),t.globalAlpha=this.current.fillAlpha},closeStroke:function(){this.closePath(),this.stroke()},fill:function(e){e=void 0===e||e;var t=this.ctx,r=this.current.fillColor,n=!1;this.current.patternFill&&(t.save(),this.baseTransform&&t.setTransform.apply(t,this.baseTransform),t.fillStyle=r.getPattern(t,this),n=!0),this.pendingEOFill?(t.fill("evenodd"),this.pendingEOFill=!1):t.fill(),n&&t.restore(),e&&this.consumePath()},eoFill:function(){this.pendingEOFill=!0,this.fill()},fillStroke:function(){this.fill(!1),this.stroke(!1),this.consumePath()},eoFillStroke:function(){this.pendingEOFill=!0,this.fillStroke()},closeFillStroke:function(){this.closePath(),this.fillStroke()},closeEOFillStroke:function(){this.pendingEOFill=!0,this.closePath(),this.fillStroke()},endPath:function(){this.consumePath()},clip:function(){this.pendingClip=g},eoClip:function(){this.pendingClip=b},beginText:function(){this.current.textMatrix=n.IDENTITY_MATRIX,this.current.textMatrixScale=1,this.current.x=this.current.lineX=0,this.current.y=this.current.lineY=0},endText:function(){var e=this.pendingTextPaths,t=this.ctx;if(void 0!==e){t.save(),t.beginPath();for(var r=0;r<e.length;r++){var n=e[r];t.setTransform.apply(t,n.transform),t.translate(n.x,n.y),n.addToPath(t,n.fontSize)}t.restore(),t.clip(),t.beginPath(),delete this.pendingTextPaths}else t.beginPath()},setCharSpacing:function(e){this.current.charSpacing=e},setWordSpacing:function(e){this.current.wordSpacing=e},setHScale:function(e){this.current.textHScale=e/100},setLeading:function(e){this.current.leading=-e},setFont:function(e,t){var r=this.commonObjs.get(e),o=this.current;if(!r)throw new Error("Can't find font for ".concat(e));if(o.fontMatrix=r.fontMatrix?r.fontMatrix:n.FONT_IDENTITY_MATRIX,0!==o.fontMatrix[0]&&0!==o.fontMatrix[3]||(0,n.warn)("Invalid font matrix for font "+e),t<0?(t=-t,o.fontDirection=-1):o.fontDirection=1,this.current.font=r,this.current.fontSize=t,!r.isType3Font){var i=r.loadedName||"sans-serif",a=r.black?"900":r.bold?"bold":"normal",s=r.italic?"italic":"normal",u='"'.concat(i,'", ').concat(r.fallbackName),l=t<16?16:t>100?100:t;this.current.fontSizeScale=t/l,this.ctx.font="".concat(s," ").concat(a," ").concat(l,"px ").concat(u)}},setTextRenderingMode:function(e){this.current.textRenderingMode=e},setTextRise:function(e){this.current.textRise=e},moveText:function(e,t){this.current.x=this.current.lineX+=e,this.current.y=this.current.lineY+=t},setLeadingMoveText:function(e,t){this.setLeading(-t),this.moveText(e,t)},setTextMatrix:function(e,t,r,n,o,i){this.current.textMatrix=[e,t,r,n,o,i],this.current.textMatrixScale=Math.sqrt(e*e+t*t),this.current.x=this.current.lineX=0,this.current.y=this.current.lineY=0},nextLine:function(){this.moveText(0,this.current.leading)},paintChar:function(e,t,r,o){var i,a=this.ctx,s=this.current,u=s.font,l=s.textRenderingMode,c=s.fontSize/s.fontSizeScale,f=l&n.TextRenderingMode.FILL_STROKE_MASK,h=!!(l&n.TextRenderingMode.ADD_TO_PATH_FLAG),d=s.patternFill&&u.data;(u.disableFontFace||h||d)&&(i=u.getPathGenerator(this.commonObjs,e)),u.disableFontFace||d?(a.save(),a.translate(t,r),a.beginPath(),i(a,c),o&&a.setTransform.apply(a,o),f!==n.TextRenderingMode.FILL&&f!==n.TextRenderingMode.FILL_STROKE||a.fill(),f!==n.TextRenderingMode.STROKE&&f!==n.TextRenderingMode.FILL_STROKE||a.stroke(),a.restore()):(f!==n.TextRenderingMode.FILL&&f!==n.TextRenderingMode.FILL_STROKE||a.fillText(e,t,r),f!==n.TextRenderingMode.STROKE&&f!==n.TextRenderingMode.FILL_STROKE||a.strokeText(e,t,r)),h&&(this.pendingTextPaths||(this.pendingTextPaths=[])).push({transform:a.mozCurrentTransform,x:t,y:r,fontSize:c,addToPath:i})},get isFontSubpixelAAEnabled(){var e=this.canvasFactory.create(10,10).context;e.scale(1.5,1),e.fillText("I",0,10);for(var t=e.getImageData(0,0,10,10).data,r=!1,o=3;o<t.length;o+=4)if(t[o]>0&&t[o]<255){r=!0;break}return(0,n.shadow)(this,"isFontSubpixelAAEnabled",r)},showText:function(e){var t=this.current,r=t.font;if(r.isType3Font)return this.showType3Text(e);var o=t.fontSize;if(0!==o){var i,a=this.ctx,s=t.fontSizeScale,u=t.charSpacing,l=t.wordSpacing,c=t.fontDirection,f=t.textHScale*c,h=e.length,d=r.vertical,p=d?1:-1,y=r.defaultVMetrics,v=o*t.fontMatrix[0],m=t.textRenderingMode===n.TextRenderingMode.FILL&&!r.disableFontFace&&!t.patternFill;if(a.save(),t.patternFill){a.save();var g=t.fillColor.getPattern(a,this);i=a.mozCurrentTransform,a.restore(),a.fillStyle=g}a.transform.apply(a,t.textMatrix),a.translate(t.x,t.y+t.textRise),c>0?a.scale(f,-1):a.scale(f,1);var b=t.lineWidth,_=t.textMatrixScale;if(0===_||0===b){var w=t.textRenderingMode&n.TextRenderingMode.FILL_STROKE_MASK;w!==n.TextRenderingMode.STROKE&&w!==n.TextRenderingMode.FILL_STROKE||(this._cachedGetSinglePixelWidth=null,b=.65*this.getSinglePixelWidth())}else b/=_;1!==s&&(a.scale(s,s),b/=s),a.lineWidth=b;var S,P=0;for(S=0;S<h;++S){var A=e[S];if((0,n.isNum)(A))P+=p*A*o/1e3;else{var k,E,x,O,R,C,T,j=!1,L=(A.isSpace?l:0)+u,I=A.fontChar,D=A.accent,M=A.width;if(d?(R=A.vmetric||y,C=-(C=A.vmetric?R[1]:.5*M)*v,T=R[2]*v,M=R?-R[0]:M,k=C/s,E=(P+T)/s):(k=P/s,E=0),r.remeasure&&M>0){var F=1e3*a.measureText(I).width/o*s;if(M<F&&this.isFontSubpixelAAEnabled){var N=M/F;j=!0,a.save(),a.scale(N,1),k/=N}else M!==F&&(k+=(M-F)/2e3*o/s)}(A.isInFont||r.missingFile)&&(m&&!D?a.fillText(I,k,E):(this.paintChar(I,k,E,i),D&&(x=k+D.offset.x/s,O=E-D.offset.y/s,this.paintChar(D.fontChar,x,O,i)))),P+=M*v+L*c,j&&a.restore()}}d?t.y-=P*f:t.x+=P*f,a.restore()}},showType3Text:function(e){var t,r,o,i,a=this.ctx,s=this.current,u=s.font,l=s.fontSize,c=s.fontDirection,f=u.vertical?1:-1,h=s.charSpacing,d=s.wordSpacing,p=s.textHScale*c,y=s.fontMatrix||n.FONT_IDENTITY_MATRIX,v=e.length;if(s.textRenderingMode!==n.TextRenderingMode.INVISIBLE&&0!==l){for(this._cachedGetSinglePixelWidth=null,a.save(),a.transform.apply(a,s.textMatrix),a.translate(s.x,s.y),a.scale(p,c),t=0;t<v;++t)if(r=e[t],(0,n.isNum)(r))i=f*r*l/1e3,this.ctx.translate(i,0),s.x+=i*p;else{var m=(r.isSpace?d:0)+h,g=u.charProcOperatorList[r.operatorListId];g?(this.processingType3=r,this.save(),a.scale(l,l),a.transform.apply(a,y),this.executeOperatorList(g),this.restore(),o=n.Util.applyTransform([r.width,0],y)[0]*l+m,a.translate(o,0),s.x+=o*p):(0,n.warn)('Type3 character "'.concat(r.operatorListId,'" is not available.'))}a.restore(),this.processingType3=null}},setCharWidth:function(e,t){},setCharWidthAndBounds:function(e,t,r,n,o,i){this.ctx.rect(r,n,o-r,i-n),this.clip(),this.endPath()},getColorN_Pattern:function(t){var r,n=this;if("TilingPattern"===t[0]){var i=t[1],a=this.baseTransform||this.ctx.mozCurrentTransform.slice(),s={createCanvasGraphics:function(t){return new e(t,n.commonObjs,n.objs,n.canvasFactory,n.webGLContext)}};r=new o.TilingPattern(t,i,this.ctx,s,a)}else r=(0,o.getShadingPatternFromIR)(t);return r},setStrokeColorN:function(){this.current.strokeColor=this.getColorN_Pattern(arguments)},setFillColorN:function(){this.current.fillColor=this.getColorN_Pattern(arguments),this.current.patternFill=!0},setStrokeRGBColor:function(e,t,r){var o=n.Util.makeCssRgb(e,t,r);this.ctx.strokeStyle=o,this.current.strokeColor=o},setFillRGBColor:function(e,t,r){var o=n.Util.makeCssRgb(e,t,r);this.ctx.fillStyle=o,this.current.fillColor=o,this.current.patternFill=!1},shadingFill:function(e){var t=this.ctx;this.save();var r=(0,o.getShadingPatternFromIR)(e);t.fillStyle=r.getPattern(t,this,!0);var i=t.mozCurrentTransformInverse;if(i){var a=t.canvas,s=a.width,u=a.height,l=n.Util.applyTransform([0,0],i),c=n.Util.applyTransform([0,u],i),f=n.Util.applyTransform([s,0],i),h=n.Util.applyTransform([s,u],i),d=Math.min(l[0],c[0],f[0],h[0]),p=Math.min(l[1],c[1],f[1],h[1]),y=Math.max(l[0],c[0],f[0],h[0]),v=Math.max(l[1],c[1],f[1],h[1]);this.ctx.fillRect(d,p,y-d,v-p)}else this.ctx.fillRect(-1e10,-1e10,2e10,2e10);this.restore()},beginInlineImage:function(){(0,n.unreachable)("Should not call beginInlineImage")},beginImageData:function(){(0,n.unreachable)("Should not call beginImageData")},paintFormXObjectBegin:function(e,t){if(this.save(),this.baseTransformStack.push(this.baseTransform),Array.isArray(e)&&6===e.length&&this.transform.apply(this,e),this.baseTransform=this.ctx.mozCurrentTransform,t){var r=t[2]-t[0],n=t[3]-t[1];this.ctx.rect(t[0],t[1],r,n),this.clip(),this.endPath()}},paintFormXObjectEnd:function(){this.restore(),this.baseTransform=this.baseTransformStack.pop()},beginGroup:function(e){this.save();var t=this.ctx;e.isolated||(0,n.info)("TODO: Support non-isolated groups."),e.knockout&&(0,n.warn)("Knockout groups not supported.");var r=t.mozCurrentTransform;if(e.matrix&&t.transform.apply(t,e.matrix),!e.bbox)throw new Error("Bounding box is required.");var o=n.Util.getAxialAlignedBoundingBox(e.bbox,t.mozCurrentTransform),i=[0,0,t.canvas.width,t.canvas.height];o=n.Util.intersect(o,i)||[0,0,0,0];var a=Math.floor(o[0]),s=Math.floor(o[1]),u=Math.max(Math.ceil(o[2])-a,1),l=Math.max(Math.ceil(o[3])-s,1),f=1,h=1;u>4096&&(f=u/4096,u=4096),l>4096&&(h=l/4096,l=4096);var d="groupAt"+this.groupLevel;e.smask&&(d+="_smask_"+this.smaskCounter++%2);var p=this.cachedCanvases.getCanvas(d,u,l,!0),y=p.context;y.scale(1/f,1/h),y.translate(-a,-s),y.transform.apply(y,r),e.smask?this.smaskStack.push({canvas:p.canvas,context:y,offsetX:a,offsetY:s,scaleX:f,scaleY:h,subtype:e.smask.subtype,backdrop:e.smask.backdrop,transferMap:e.smask.transferMap||null,startTransformInverse:null}):(t.setTransform(1,0,0,1,0,0),t.translate(a,s),t.scale(f,h)),c(t,y),this.ctx=y,this.setGState([["BM","source-over"],["ca",1],["CA",1]]),this.groupStack.push(t),this.groupLevel++,this.current.activeSMask=null},endGroup:function(e){this.groupLevel--;var t=this.ctx;this.ctx=this.groupStack.pop(),void 0!==this.ctx.imageSmoothingEnabled?this.ctx.imageSmoothingEnabled=!1:this.ctx.mozImageSmoothingEnabled=!1,e.smask?this.tempSMask=this.smaskStack.pop():this.ctx.drawImage(t.canvas,0,0),this.restore()},beginAnnotations:function(){this.save(),this.baseTransform&&this.ctx.setTransform.apply(this.ctx,this.baseTransform)},endAnnotations:function(){this.restore()},beginAnnotation:function(e,t,r){if(this.save(),f(this.ctx),this.current=new l,Array.isArray(e)&&4===e.length){var n=e[2]-e[0],o=e[3]-e[1];this.ctx.rect(e[0],e[1],n,o),this.clip(),this.endPath()}this.transform.apply(this,t),this.transform.apply(this,r)},endAnnotation:function(){this.restore()},paintJpegXObject:function(e,t,r){var o=this.objs.get(e);if(o){this.save();var i=this.ctx;if(i.scale(1/t,-1/r),i.drawImage(o,0,0,o.width,o.height,0,-r,t,r),this.imageLayer){var a=i.mozCurrentTransformInverse,s=this.getCanvasPosition(0,0);this.imageLayer.appendImage({objId:e,left:s[0],top:s[1],width:t/a[0],height:r/a[3]})}this.restore()}else(0,n.warn)("Dependent image isn't ready yet")},paintImageMaskXObject:function(e){var t=this.ctx,n=e.width,o=e.height,i=this.current.fillColor,a=this.current.patternFill,s=this.processingType3;if(s&&void 0===s.compiled&&(s.compiled=n<=1e3&&o<=1e3?function(e){var t,r,n,o,i=e.width,a=e.height,s=i+1,u=new Uint8Array(s*(a+1)),l=new Uint8Array([0,2,4,0,1,0,5,4,8,10,0,8,0,2,1,0]),c=i+7&-8,f=e.data,h=new Uint8Array(c*a),d=0;for(t=0,o=f.length;t<o;t++)for(var p=128,y=f[t];p>0;)h[d++]=y&p?0:255,p>>=1;var v=0;for(0!==h[d=0]&&(u[0]=1,++v),r=1;r<i;r++)h[d]!==h[d+1]&&(u[r]=h[d]?2:1,++v),d++;for(0!==h[d]&&(u[r]=2,++v),t=1;t<a;t++){n=t*s,h[(d=t*c)-c]!==h[d]&&(u[n]=h[d]?1:8,++v);var m=(h[d]?4:0)+(h[d-c]?8:0);for(r=1;r<i;r++)l[m=(m>>2)+(h[d+1]?4:0)+(h[d-c+1]?8:0)]&&(u[n+r]=l[m],++v),d++;if(h[d-c]!==h[d]&&(u[n+r]=h[d]?2:4,++v),v>1e3)return null}for(n=t*s,0!==h[d=c*(a-1)]&&(u[n]=8,++v),r=1;r<i;r++)h[d]!==h[d+1]&&(u[n+r]=h[d]?4:8,++v),d++;if(0!==h[d]&&(u[n+r]=4,++v),v>1e3)return null;var g=new Int32Array([0,s,-1,0,-s,0,0,0,1]),b=[];for(t=0;v&&t<=a;t++){for(var _=t*s,w=_+i;_<w&&!u[_];)_++;if(_!==w){var S,P=[_%s,t],A=u[_],k=_;do{var E=g[A];do{_+=E}while(!u[_]);5!==(S=u[_])&&10!==S?(A=S,u[_]=0):(A=S&51*A>>4,u[_]&=A>>2|A<<2),P.push(_%s),P.push(_/s|0),--v}while(k!==_);b.push(P),--t}}return function(e){e.save(),e.scale(1/i,-1/a),e.translate(0,-a),e.beginPath();for(var t=0,r=b.length;t<r;t++){var n=b[t];e.moveTo(n[0],n[1]);for(var o=2,s=n.length;o<s;o+=2)e.lineTo(n[o],n[o+1])}e.fill(),e.beginPath(),e.restore()}}({data:e.data,width:n,height:o}):null),s&&s.compiled)s.compiled(t);else{var u=this.cachedCanvases.getCanvas("maskCanvas",n,o),l=u.context;l.save(),r(l,e),l.globalCompositeOperation="source-in",l.fillStyle=a?i.getPattern(l,this):i,l.fillRect(0,0,n,o),l.restore(),this.paintInlineImageXObject(u.canvas)}},paintImageMaskXObjectRepeat:function(e,t,n,o){var i=e.width,a=e.height,s=this.current.fillColor,u=this.current.patternFill,l=this.cachedCanvases.getCanvas("maskCanvas",i,a),c=l.context;c.save(),r(c,e),c.globalCompositeOperation="source-in",c.fillStyle=u?s.getPattern(c,this):s,c.fillRect(0,0,i,a),c.restore();for(var f=this.ctx,h=0,d=o.length;h<d;h+=2)f.save(),f.transform(t,0,0,n,o[h],o[h+1]),f.scale(1,-1),f.drawImage(l.canvas,0,0,i,a,0,-1,1,1),f.restore()},paintImageMaskXObjectGroup:function(e){for(var t=this.ctx,n=this.current.fillColor,o=this.current.patternFill,i=0,a=e.length;i<a;i++){var s=e[i],u=s.width,l=s.height,c=this.cachedCanvases.getCanvas("maskCanvas",u,l),f=c.context;f.save(),r(f,s),f.globalCompositeOperation="source-in",f.fillStyle=o?n.getPattern(f,this):n,f.fillRect(0,0,u,l),f.restore(),t.save(),t.transform.apply(t,s.transform),t.scale(1,-1),t.drawImage(c.canvas,0,0,u,l,0,-1,1,1),t.restore()}},paintImageXObject:function(e){var t=this.objs.get(e);t?this.paintInlineImageXObject(t):(0,n.warn)("Dependent image isn't ready yet")},paintImageXObjectRepeat:function(e,t,r,o){var i=this.objs.get(e);if(i){for(var a=i.width,s=i.height,u=[],l=0,c=o.length;l<c;l+=2)u.push({transform:[t,0,0,r,o[l],o[l+1]],x:0,y:0,w:a,h:s});this.paintInlineImageXObjectGroup(i,u)}else(0,n.warn)("Dependent image isn't ready yet")},paintInlineImageXObject:function(e){var r=e.width,n=e.height,o=this.ctx;this.save(),o.scale(1/r,-1/n);var i,a,s=o.mozCurrentTransformInverse,u=s[0],l=s[1],c=Math.max(Math.sqrt(u*u+l*l),1),f=s[2],h=s[3],d=Math.max(Math.sqrt(f*f+h*h),1);if("function"==typeof HTMLElement&&e instanceof HTMLElement||!e.data)i=e;else{var p=(a=this.cachedCanvases.getCanvas("inlineImage",r,n)).context;t(p,e),i=a.canvas}for(var y=r,v=n,m="prescale1";c>2&&y>1||d>2&&v>1;){var g=y,b=v;c>2&&y>1&&(c/=y/(g=Math.ceil(y/2))),d>2&&v>1&&(d/=v/(b=Math.ceil(v/2))),(p=(a=this.cachedCanvases.getCanvas(m,g,b)).context).clearRect(0,0,g,b),p.drawImage(i,0,0,y,v,0,0,g,b),i=a.canvas,y=g,v=b,m="prescale1"===m?"prescale2":"prescale1"}if(o.drawImage(i,0,0,y,v,0,-n,r,n),this.imageLayer){var _=this.getCanvasPosition(0,-n);this.imageLayer.appendImage({imgData:e,left:_[0],top:_[1],width:r/s[0],height:n/s[3]})}this.restore()},paintInlineImageXObjectGroup:function(e,r){var n=this.ctx,o=e.width,i=e.height,a=this.cachedCanvases.getCanvas("inlineImage",o,i);t(a.context,e);for(var s=0,u=r.length;s<u;s++){var l=r[s];if(n.save(),n.transform.apply(n,l.transform),n.scale(1,-1),n.drawImage(a.canvas,l.x,l.y,l.w,l.h,0,-1,1,1),this.imageLayer){var c=this.getCanvasPosition(l.x,l.y);this.imageLayer.appendImage({imgData:e,left:c[0],top:c[1],width:o,height:i})}n.restore()}},paintSolidColorImageMask:function(){this.ctx.fillRect(0,0,1,1)},paintXObject:function(){(0,n.warn)("Unsupported 'paintXObject' command.")},markPoint:function(e){},markPointProps:function(e,t){},beginMarkedContent:function(e){},beginMarkedContentProps:function(e,t){},endMarkedContent:function(){},beginCompat:function(){},endCompat:function(){},consumePath:function(){var e=this.ctx;this.pendingClip&&(this.pendingClip===b?e.clip("evenodd"):e.clip(),this.pendingClip=null),e.beginPath()},getSinglePixelWidth:function(e){if(null===this._cachedGetSinglePixelWidth){var t=this.ctx.mozCurrentTransformInverse;this._cachedGetSinglePixelWidth=Math.sqrt(Math.max(t[0]*t[0]+t[1]*t[1],t[2]*t[2]+t[3]*t[3]))}return this._cachedGetSinglePixelWidth},getCanvasPosition:function(e,t){var r=this.ctx.mozCurrentTransform;return[r[0]*e+r[2]*t+r[4],r[1]*e+r[3]*t+r[5]]}},n.OPS)e.prototype[n.OPS[_]]=e.prototype[_];return e}();t.CanvasGraphics=c},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.getShadingPatternFromIR=function(e){var t=o[e[0]];if(!t)throw new Error("Unknown IR type: ".concat(e[0]));return t.fromIR(e)},t.TilingPattern=void 0;var n=r(1),o={RadialAxial:{fromIR:function(e){var t=e[1],r=e[2],n=e[3],o=e[4],i=e[5],a=e[6];return{type:"Pattern",getPattern:function(e){var s;"axial"===t?s=e.createLinearGradient(n[0],n[1],o[0],o[1]):"radial"===t&&(s=e.createRadialGradient(n[0],n[1],i,o[0],o[1],a));for(var u=0,l=r.length;u<l;++u){var c=r[u];s.addColorStop(c[0],c[1])}return s}}}}},i=function(){function e(e,t,r,n,o,i,a,s){var u,l=t.coords,c=t.colors,f=e.data,h=4*e.width;l[r+1]>l[n+1]&&(u=r,r=n,n=u,u=i,i=a,a=u),l[n+1]>l[o+1]&&(u=n,n=o,o=u,u=a,a=s,s=u),l[r+1]>l[n+1]&&(u=r,r=n,n=u,u=i,i=a,a=u);var d=(l[r]+t.offsetX)*t.scaleX,p=(l[r+1]+t.offsetY)*t.scaleY,y=(l[n]+t.offsetX)*t.scaleX,v=(l[n+1]+t.offsetY)*t.scaleY,m=(l[o]+t.offsetX)*t.scaleX,g=(l[o+1]+t.offsetY)*t.scaleY;if(!(p>=g))for(var b,_,w,S,P,A,k,E,x,O=c[i],R=c[i+1],C=c[i+2],T=c[a],j=c[a+1],L=c[a+2],I=c[s],D=c[s+1],M=c[s+2],F=Math.round(p),N=Math.round(g),q=F;q<=N;q++){q<v?(b=d-(d-y)*(x=q<p?0:p===v?1:(p-q)/(p-v)),_=O-(O-T)*x,w=R-(R-j)*x,S=C-(C-L)*x):(b=y-(y-m)*(x=q>g?1:v===g?0:(v-q)/(v-g)),_=T-(T-I)*x,w=j-(j-D)*x,S=L-(L-M)*x),P=d-(d-m)*(x=q<p?0:q>g?1:(p-q)/(p-g)),A=O-(O-I)*x,k=R-(R-D)*x,E=C-(C-M)*x;for(var U=Math.round(Math.min(b,P)),W=Math.round(Math.max(b,P)),B=h*q+4*U,G=U;G<=W;G++)x=(x=(b-G)/(b-P))<0?0:x>1?1:x,f[B++]=_-(_-A)*x|0,f[B++]=w-(w-k)*x|0,f[B++]=S-(S-E)*x|0,f[B++]=255}}function t(t,r,n){var o,i,a=r.coords,s=r.colors;switch(r.type){case"lattice":var u=r.verticesPerRow,l=Math.floor(a.length/u)-1,c=u-1;for(o=0;o<l;o++)for(var f=o*u,h=0;h<c;h++,f++)e(t,n,a[f],a[f+1],a[f+u],s[f],s[f+1],s[f+u]),e(t,n,a[f+u+1],a[f+1],a[f+u],s[f+u+1],s[f+1],s[f+u]);break;case"triangles":for(o=0,i=a.length;o<i;o+=3)e(t,n,a[o],a[o+1],a[o+2],s[o],s[o+1],s[o+2]);break;default:throw new Error("illegal figure")}}return function(e,r,n,o,i,a,s,u){var l,c,f,h,d=Math.floor(e[0]),p=Math.floor(e[1]),y=Math.ceil(e[2])-d,v=Math.ceil(e[3])-p,m=Math.min(Math.ceil(Math.abs(y*r[0]*1.1)),3e3),g=Math.min(Math.ceil(Math.abs(v*r[1]*1.1)),3e3),b=y/m,_=v/g,w={coords:n,colors:o,offsetX:-d,offsetY:-p,scaleX:1/b,scaleY:1/_},S=m+4,P=g+4;if(u.isEnabled)l=u.drawFigures({width:m,height:g,backgroundColor:a,figures:i,context:w}),(c=s.getCanvas("mesh",S,P,!1)).context.drawImage(l,2,2),l=c.canvas;else{var A=(c=s.getCanvas("mesh",S,P,!1)).context,k=A.createImageData(m,g);if(a){var E=k.data;for(f=0,h=E.length;f<h;f+=4)E[f]=a[0],E[f+1]=a[1],E[f+2]=a[2],E[f+3]=255}for(f=0;f<i.length;f++)t(k,i[f],w);A.putImageData(k,2,2),l=c.canvas}return{canvas:l,offsetX:d-2*b,offsetY:p-2*_,scaleX:b,scaleY:_}}}();o.Mesh={fromIR:function(e){var t=e[2],r=e[3],o=e[4],a=e[5],s=e[6],u=e[8];return{type:"Pattern",getPattern:function(e,l,c){var f;if(c)f=n.Util.singularValueDecompose2dScale(e.mozCurrentTransform);else if(f=n.Util.singularValueDecompose2dScale(l.baseTransform),s){var h=n.Util.singularValueDecompose2dScale(s);f=[f[0]*h[0],f[1]*h[1]]}var d=i(a,f,t,r,o,c?null:u,l.cachedCanvases,l.webGLContext);return c||(e.setTransform.apply(e,l.baseTransform),s&&e.transform.apply(e,s)),e.translate(d.offsetX,d.offsetY),e.scale(d.scaleX,d.scaleY),e.createPattern(d.canvas,"no-repeat")}}}},o.Dummy={fromIR:function(){return{type:"Pattern",getPattern:function(){return"hotpink"}}}};var a=function(){var e=1,t=2;function r(e,t,r,n,o){this.operatorList=e[2],this.matrix=e[3]||[1,0,0,1,0,0],this.bbox=e[4],this.xstep=e[5],this.ystep=e[6],this.paintType=e[7],this.tilingType=e[8],this.color=t,this.canvasGraphicsFactory=n,this.baseTransform=o,this.type="Pattern",this.ctx=r}return r.prototype={createPatternCanvas:function(e){var t=this.operatorList,r=this.bbox,o=this.xstep,i=this.ystep,a=this.paintType,s=this.tilingType,u=this.color,l=this.canvasGraphicsFactory;(0,n.info)("TilingType: "+s);var c=r[0],f=r[1],h=r[2],d=r[3],p=[c,f],y=[c+o,f+i],v=y[0]-p[0],m=y[1]-p[1],g=n.Util.singularValueDecompose2dScale(this.matrix),b=n.Util.singularValueDecompose2dScale(this.baseTransform),_=[g[0]*b[0],g[1]*b[1]];v=Math.min(Math.ceil(Math.abs(v*_[0])),3e3),m=Math.min(Math.ceil(Math.abs(m*_[1])),3e3);var w=e.cachedCanvases.getCanvas("pattern",v,m,!0),S=w.context,P=l.createCanvasGraphics(S);P.groupLevel=e.groupLevel,this.setFillAndStrokeStyleToContext(P,a,u),this.setScale(v,m,o,i),this.transformToScale(P);var A=[1,0,0,1,-p[0],-p[1]];return P.transform.apply(P,A),this.clipBbox(P,r,c,f,h,d),P.executeOperatorList(t),w.canvas},setScale:function(e,t,r,n){this.scale=[e/r,t/n]},transformToScale:function(e){var t=this.scale,r=[t[0],0,0,t[1],0,0];e.transform.apply(e,r)},scaleToContext:function(){var e=this.scale;this.ctx.scale(1/e[0],1/e[1])},clipBbox:function(e,t,r,n,o,i){if(Array.isArray(t)&&4===t.length){var a=o-r,s=i-n;e.ctx.rect(r,n,a,s),e.clip(),e.endPath()}},setFillAndStrokeStyleToContext:function(r,o,i){var a=r.ctx,s=r.current;switch(o){case e:var u=this.ctx;a.fillStyle=u.fillStyle,a.strokeStyle=u.strokeStyle,s.fillColor=u.fillStyle,s.strokeColor=u.strokeStyle;break;case t:var l=n.Util.makeCssRgb(i[0],i[1],i[2]);a.fillStyle=l,a.strokeStyle=l,s.fillColor=l,s.strokeColor=l;break;default:throw new n.FormatError("Unsupported paint type: ".concat(o))}},getPattern:function(e,t){var r=this.createPatternCanvas(t);return(e=this.ctx).setTransform.apply(e,this.baseTransform),e.transform.apply(e,this.matrix),this.scaleToContext(),e.createPattern(r,"repeat")}},r}();t.TilingPattern=a},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.GlobalWorkerOptions=void 0;var n=Object.create(null);t.GlobalWorkerOptions=n,n.workerPort=void 0===n.workerPort?null:n.workerPort,n.workerSrc=void 0===n.workerSrc?"":n.workerSrc},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.MessageHandler=d;var n,o=(n=r(147))&&n.__esModule?n:{default:n},i=r(1);function a(e){return(a="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function s(e,t,r,n,o,i,a){try{var s=e[i](a),u=s.value}catch(e){return void r(e)}s.done?t(u):Promise.resolve(u).then(n,o)}function u(e,t){return l.apply(this,arguments)}function l(){return(l=function(e){return function(){var t=this,r=arguments;return new Promise((function(n,o){var i=e.apply(t,r);function a(e){s(i,n,o,a,u,"next",e)}function u(e){s(i,n,o,a,u,"throw",e)}a(void 0)}))}}(o.default.mark((function e(t,r){var n,i=arguments;return o.default.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(n=i.length>2&&void 0!==i[2]?i[2]:null,t){e.next=3;break}return e.abrupt("return");case 3:return e.abrupt("return",t.apply(n,r));case 4:case"end":return e.stop()}}),e,this)})))).apply(this,arguments)}function c(e){if("object"!==a(e))return e;switch(e.name){case"AbortException":return new i.AbortException(e.message);case"MissingPDFException":return new i.MissingPDFException(e.message);case"UnexpectedResponseException":return new i.UnexpectedResponseException(e.message,e.status);default:return new i.UnknownErrorException(e.message,e.details)}}function f(e){return!(e instanceof Error)||e instanceof i.AbortException||e instanceof i.MissingPDFException||e instanceof i.UnexpectedResponseException||e instanceof i.UnknownErrorException?e:new i.UnknownErrorException(e.message,e.toString())}function h(e,t,r){t?e.resolve():e.reject(r)}function d(e,t,r){var n=this;this.sourceName=e,this.targetName=t,this.comObj=r,this.callbackId=1,this.streamId=1,this.postMessageTransfers=!0,this.streamSinks=Object.create(null),this.streamControllers=Object.create(null);var o=this.callbacksCapabilities=Object.create(null),i=this.actionHandler=Object.create(null);this._onComObjOnMessage=function(e){var t=e.data;if(t.targetName===n.sourceName)if(t.stream)n._processStreamMessage(t);else if(t.isReply){var a=t.callbackId;if(!(t.callbackId in o))throw new Error("Cannot resolve callback ".concat(a));var s=o[a];delete o[a],"error"in t?s.reject(c(t.error)):s.resolve(t.data)}else{if(!(t.action in i))throw new Error("Unknown action from worker: ".concat(t.action));var u=i[t.action];if(t.callbackId){var l=n.sourceName,h=t.sourceName;Promise.resolve().then((function(){return u[0].call(u[1],t.data)})).then((function(e){r.postMessage({sourceName:l,targetName:h,isReply:!0,callbackId:t.callbackId,data:e})}),(function(e){r.postMessage({sourceName:l,targetName:h,isReply:!0,callbackId:t.callbackId,error:f(e)})}))}else t.streamId?n._createStreamSink(t):u[0].call(u[1],t.data)}},r.addEventListener("message",this._onComObjOnMessage)}d.prototype={on:function(e,t,r){var n=this.actionHandler;if(n[e])throw new Error('There is already an actionName called "'.concat(e,'"'));n[e]=[t,r]},send:function(e,t,r){var n={sourceName:this.sourceName,targetName:this.targetName,action:e,data:t};this.postMessage(n,r)},sendWithPromise:function(e,t,r){var n=this.callbackId++,o={sourceName:this.sourceName,targetName:this.targetName,action:e,data:t,callbackId:n},a=(0,i.createPromiseCapability)();this.callbacksCapabilities[n]=a;try{this.postMessage(o,r)}catch(e){a.reject(e)}return a.promise},sendWithStream:function(e,t,r,n){var o=this,a=this.streamId++,s=this.sourceName,u=this.targetName;return new i.ReadableStream({start:function(r){var n=(0,i.createPromiseCapability)();return o.streamControllers[a]={controller:r,startCall:n,isClosed:!1},o.postMessage({sourceName:s,targetName:u,action:e,streamId:a,data:t,desiredSize:r.desiredSize}),n.promise},pull:function(e){var t=(0,i.createPromiseCapability)();return o.streamControllers[a].pullCall=t,o.postMessage({sourceName:s,targetName:u,stream:"pull",streamId:a,desiredSize:e.desiredSize}),t.promise},cancel:function(e){var t=(0,i.createPromiseCapability)();return o.streamControllers[a].cancelCall=t,o.streamControllers[a].isClosed=!0,o.postMessage({sourceName:s,targetName:u,stream:"cancel",reason:e,streamId:a}),t.promise}},r)},_createStreamSink:function(e){var t=this,r=this,n=this.actionHandler[e.action],o=e.streamId,a=e.desiredSize,s=this.sourceName,l=e.sourceName,c=(0,i.createPromiseCapability)(),f=function(e){var r=e.stream,n=e.chunk,i=e.transfers,a=e.success,u=e.reason;t.postMessage({sourceName:s,targetName:l,stream:r,streamId:o,chunk:n,success:a,reason:u},i)},h={enqueue:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:1,r=arguments.length>2?arguments[2]:void 0;if(!this.isCancelled){var n=this.desiredSize;this.desiredSize-=t,n>0&&this.desiredSize<=0&&(this.sinkCapability=(0,i.createPromiseCapability)(),this.ready=this.sinkCapability.promise),f({stream:"enqueue",chunk:e,transfers:r})}},close:function(){this.isCancelled||(this.isCancelled=!0,f({stream:"close"}),delete r.streamSinks[o])},error:function(e){this.isCancelled||(this.isCancelled=!0,f({stream:"error",reason:e}))},sinkCapability:c,onPull:null,onCancel:null,isCancelled:!1,desiredSize:a,ready:null};h.sinkCapability.resolve(),h.ready=h.sinkCapability.promise,this.streamSinks[o]=h,u(n[0],[e.data,h],n[1]).then((function(){f({stream:"start_complete",success:!0})}),(function(e){f({stream:"start_complete",success:!1,reason:e})}))},_processStreamMessage:function(e){var t=this,r=this.sourceName,n=e.sourceName,o=e.streamId,a=function(e){var i=e.stream,a=e.success,s=e.reason;t.comObj.postMessage({sourceName:r,targetName:n,stream:i,success:a,streamId:o,reason:s})},s=function(){Promise.all([t.streamControllers[e.streamId].startCall,t.streamControllers[e.streamId].pullCall,t.streamControllers[e.streamId].cancelCall].map((function(e){return e&&(t=e.promise,Promise.resolve(t).catch((function(){})));var t}))).then((function(){delete t.streamControllers[e.streamId]}))};switch(e.stream){case"start_complete":h(this.streamControllers[e.streamId].startCall,e.success,c(e.reason));break;case"pull_complete":h(this.streamControllers[e.streamId].pullCall,e.success,c(e.reason));break;case"pull":if(!this.streamSinks[e.streamId]){a({stream:"pull_complete",success:!0});break}this.streamSinks[e.streamId].desiredSize<=0&&e.desiredSize>0&&this.streamSinks[e.streamId].sinkCapability.resolve(),this.streamSinks[e.streamId].desiredSize=e.desiredSize,u(this.streamSinks[e.streamId].onPull).then((function(){a({stream:"pull_complete",success:!0})}),(function(e){a({stream:"pull_complete",success:!1,reason:e})}));break;case"enqueue":(0,i.assert)(this.streamControllers[e.streamId],"enqueue should have stream controller"),this.streamControllers[e.streamId].isClosed||this.streamControllers[e.streamId].controller.enqueue(e.chunk);break;case"close":if((0,i.assert)(this.streamControllers[e.streamId],"close should have stream controller"),this.streamControllers[e.streamId].isClosed)break;this.streamControllers[e.streamId].isClosed=!0,this.streamControllers[e.streamId].controller.close(),s();break;case"error":(0,i.assert)(this.streamControllers[e.streamId],"error should have stream controller"),this.streamControllers[e.streamId].controller.error(c(e.reason)),s();break;case"cancel_complete":h(this.streamControllers[e.streamId].cancelCall,e.success,c(e.reason)),s();break;case"cancel":if(!this.streamSinks[e.streamId])break;u(this.streamSinks[e.streamId].onCancel,[c(e.reason)]).then((function(){a({stream:"cancel_complete",success:!0})}),(function(e){a({stream:"cancel_complete",success:!1,reason:e})})),this.streamSinks[e.streamId].sinkCapability.reject(c(e.reason)),this.streamSinks[e.streamId].isCancelled=!0,delete this.streamSinks[e.streamId];break;default:throw new Error("Unexpected stream case")}},postMessage:function(e,t){t&&this.postMessageTransfers?this.comObj.postMessage(e,t):this.comObj.postMessage(e)},destroy:function(){this.comObj.removeEventListener("message",this._onComObjOnMessage)}}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Metadata=void 0;var n=r(1),o=r(159);function i(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}var a=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),(0,n.assert)("string"==typeof t,"Metadata: input is not a string"),t=this._repair(t);var r=(new o.SimpleXMLParser).parseFromString(t);this._metadata=Object.create(null),r&&this._parse(r)}var t,r,a;return t=e,(r=[{key:"_repair",value:function(e){return e.replace(/^([^<]+)/,"").replace(/>\\376\\377([^<]+)/g,(function(e,t){for(var r=t.replace(/\\([0-3])([0-7])([0-7])/g,(function(e,t,r,n){return String.fromCharCode(64*t+8*r+1*n)})).replace(/&(amp|apos|gt|lt|quot);/g,(function(e,t){switch(t){case"amp":return"&";case"apos":return"'";case"gt":return">";case"lt":return"<";case"quot":return'"'}throw new Error("_repair: ".concat(t," isn't defined."))})),n="",o=0,i=r.length;o<i;o+=2){var a=256*r.charCodeAt(o)+r.charCodeAt(o+1);n+=a>=32&&a<127&&60!==a&&62!==a&&38!==a?String.fromCharCode(a):"&#x"+(65536+a).toString(16).substring(1)+";"}return">"+n}))}},{key:"_parse",value:function(e){var t=e.documentElement;if("rdf:rdf"!==t.nodeName.toLowerCase())for(t=t.firstChild;t&&"rdf:rdf"!==t.nodeName.toLowerCase();)t=t.nextSibling;var r=t?t.nodeName.toLowerCase():null;if(t&&"rdf:rdf"===r&&t.hasChildNodes())for(var n=t.childNodes,o=0,i=n.length;o<i;o++){var a=n[o];if("rdf:description"===a.nodeName.toLowerCase())for(var s=0,u=a.childNodes.length;s<u;s++)if("#text"!==a.childNodes[s].nodeName.toLowerCase()){var l=a.childNodes[s],c=l.nodeName.toLowerCase();this._metadata[c]=l.textContent.trim()}}}},{key:"get",value:function(e){var t=this._metadata[e];return void 0!==t?t:null}},{key:"getAll",value:function(){return this._metadata}},{key:"has",value:function(e){return void 0!==this._metadata[e]}}])&&i(t.prototype,r),a&&i(t,a),e}();t.Metadata=a},function(e,t,r){"use strict";function n(e){return(n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function o(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var r=[],n=!0,o=!1,i=void 0;try{for(var a,s=e[Symbol.iterator]();!(n=(a=s.next()).done)&&(r.push(a.value),!t||r.length!==t);n=!0);}catch(e){o=!0,i=e}finally{try{n||null==s.return||s.return()}finally{if(o)throw i}}return r}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}function i(e,t){return!t||"object"!==n(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function a(e,t,r){return(a="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(e,t,r){var n=function(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=s(e)););return e}(e,t);if(n){var o=Object.getOwnPropertyDescriptor(n,t);return o.get?o.get.call(r):o.value}})(e,t,r||e)}function s(e){return(s=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function u(e,t){return(u=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function l(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function c(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function f(e,t,r){return t&&c(e.prototype,t),r&&c(e,r),e}Object.defineProperty(t,"__esModule",{value:!0}),t.SimpleXMLParser=void 0;var h={NoError:0,EndOfDocument:-1,UnterminatedCdat:-2,UnterminatedXmlDeclaration:-3,UnterminatedDoctypeDeclaration:-4,UnterminatedComment:-5,MalformedElement:-6,OutOfMemory:-7,UnterminatedAttributeValue:-8,UnterminatedElement:-9,ElementNeverBegun:-10};function d(e,t){var r=e[t];return" "===r||"\n"===r||"\r"===r||"\t"===r}var p=function(){function e(){l(this,e)}return f(e,[{key:"_resolveEntities",value:function(e){var t=this;return e.replace(/&([^;]+);/g,(function(e,r){if("#x"===r.substring(0,2))return String.fromCharCode(parseInt(r.substring(2),16));if("#"===r.substring(0,1))return String.fromCharCode(parseInt(r.substring(1),10));switch(r){case"lt":return"<";case"gt":return">";case"amp":return"&";case"quot":return'"'}return t.onResolveEntity(r)}))}},{key:"_parseContent",value:function(e,t){var r,n=t,o=[];function i(){for(;n<e.length&&d(e,n);)++n}for(;n<e.length&&!d(e,n)&&">"!==e[n]&&"/"!==e[n];)++n;for(r=e.substring(t,n),i();n<e.length&&">"!==e[n]&&"/"!==e[n]&&"?"!==e[n];){i();for(var a,s="";n<e.length&&!d(e,n)&&"="!==e[n];)s+=e[n],++n;if(i(),"="!==e[n])return null;++n,i();var u=e[n];if('"'!==u&&"'"!==u)return null;var l=e.indexOf(u,++n);if(l<0)return null;a=e.substring(n,l),o.push({name:s,value:this._resolveEntities(a)}),n=l+1,i()}return{name:r,attributes:o,parsed:n-t}}},{key:"_parseProcessingInstruction",value:function(e,t){for(var r,n=t;n<e.length&&!d(e,n)&&">"!==e[n]&&"/"!==e[n];)++n;r=e.substring(t,n),function(){for(;n<e.length&&d(e,n);)++n}();for(var o=n;n<e.length&&("?"!==e[n]||">"!==e[n+1]);)++n;return{name:r,value:e.substring(o,n),parsed:n-t}}},{key:"parseXml",value:function(e){for(var t=0;t<e.length;){var r=t;if("<"===e[t]){var n=void 0;switch(e[++r]){case"/":if(++r,(n=e.indexOf(">",r))<0)return void this.onError(h.UnterminatedElement);this.onEndElement(e.substring(r,n)),r=n+1;break;case"?":++r;var o=this._parseProcessingInstruction(e,r);if("?>"!==e.substring(r+o.parsed,r+o.parsed+2))return void this.onError(h.UnterminatedXmlDeclaration);this.onPi(o.name,o.value),r+=o.parsed+2;break;case"!":if("--"===e.substring(r+1,r+3)){if((n=e.indexOf("--\x3e",r+3))<0)return void this.onError(h.UnterminatedComment);this.onComment(e.substring(r+3,n)),r=n+3}else if("[CDATA["===e.substring(r+1,r+8)){if((n=e.indexOf("]]>",r+8))<0)return void this.onError(h.UnterminatedCdat);this.onCdata(e.substring(r+8,n)),r=n+3}else{if("DOCTYPE"!==e.substring(r+1,r+8))return void this.onError(h.MalformedElement);var i=e.indexOf("[",r+8),a=!1;if((n=e.indexOf(">",r+8))<0)return void this.onError(h.UnterminatedDoctypeDeclaration);if(i>0&&n>i){if((n=e.indexOf("]>",r+8))<0)return void this.onError(h.UnterminatedDoctypeDeclaration);a=!0}var s=e.substring(r+8,n+(a?1:0));this.onDoctype(s),r=n+(a?2:1)}break;default:var u=this._parseContent(e,r);if(null===u)return void this.onError(h.MalformedElement);var l=!1;if("/>"===e.substring(r+u.parsed,r+u.parsed+2))l=!0;else if(">"!==e.substring(r+u.parsed,r+u.parsed+1))return void this.onError(h.UnterminatedElement);this.onBeginElement(u.name,u.attributes,l),r+=u.parsed+(l?2:1)}}else{for(;r<e.length&&"<"!==e[r];)r++;var c=e.substring(t,r);this.onText(this._resolveEntities(c))}t=r}}},{key:"onResolveEntity",value:function(e){return"&".concat(e,";")}},{key:"onPi",value:function(e,t){}},{key:"onComment",value:function(e){}},{key:"onCdata",value:function(e){}},{key:"onDoctype",value:function(e){}},{key:"onText",value:function(e){}},{key:"onBeginElement",value:function(e,t,r){}},{key:"onEndElement",value:function(e){}},{key:"onError",value:function(e){}}]),e}(),y=function(){function e(t,r){l(this,e),this.nodeName=t,this.nodeValue=r,Object.defineProperty(this,"parentNode",{value:null,writable:!0})}return f(e,[{key:"hasChildNodes",value:function(){return this.childNodes&&this.childNodes.length>0}},{key:"firstChild",get:function(){return this.childNodes&&this.childNodes[0]}},{key:"nextSibling",get:function(){var e=this.parentNode.childNodes;if(e){var t=e.indexOf(this);if(-1!==t)return e[t+1]}}},{key:"textContent",get:function(){return this.childNodes?this.childNodes.map((function(e){return e.textContent})).join(""):this.nodeValue||""}}]),e}(),v=function(e){function t(){var e;return l(this,t),(e=i(this,s(t).call(this)))._currentFragment=null,e._stack=null,e._errorCode=h.NoError,e}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&u(e,t)}(t,e),f(t,[{key:"parseFromString",value:function(e){if(this._currentFragment=[],this._stack=[],this._errorCode=h.NoError,this.parseXml(e),this._errorCode===h.NoError){var t=o(this._currentFragment,1)[0];if(t)return{documentElement:t}}}},{key:"onResolveEntity",value:function(e){switch(e){case"apos":return"'"}return a(s(t.prototype),"onResolveEntity",this).call(this,e)}},{key:"onText",value:function(e){if(!function(e){for(var t=0,r=e.length;t<r;t++)if(!d(e,t))return!1;return!0}(e)){var t=new y("#text",e);this._currentFragment.push(t)}}},{key:"onCdata",value:function(e){var t=new y("#text",e);this._currentFragment.push(t)}},{key:"onBeginElement",value:function(e,t,r){var n=new y(e);n.childNodes=[],this._currentFragment.push(n),r||(this._stack.push(this._currentFragment),this._currentFragment=n.childNodes)}},{key:"onEndElement",value:function(e){this._currentFragment=this._stack.pop()||[];var t=this._currentFragment[this._currentFragment.length-1];if(t)for(var r=0,n=t.childNodes.length;r<n;r++)t.childNodes[r].parentNode=t}},{key:"onError",value:function(e){this._errorCode=e}}]),t}(p);t.SimpleXMLParser=v},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.PDFDataTransportStream=void 0;var n,o=(n=r(147))&&n.__esModule?n:{default:n},i=r(1);function a(e,t,r,n,o,i,a){try{var s=e[i](a),u=s.value}catch(e){return void r(e)}s.done?t(u):Promise.resolve(u).then(n,o)}function s(e){return function(){var t=this,r=arguments;return new Promise((function(n,o){var i=e.apply(t,r);function s(e){a(i,n,o,s,u,"next",e)}function u(e){a(i,n,o,s,u,"throw",e)}s(void 0)}))}}var u=function(){function e(e,t){var r=this;(0,i.assert)(t),this._queuedChunks=[];var n=e.initialData;if(n&&n.length>0){var o=new Uint8Array(n).buffer;this._queuedChunks.push(o)}this._pdfDataRangeTransport=t,this._isStreamingSupported=!e.disableStream,this._isRangeSupported=!e.disableRange,this._contentLength=e.length,this._fullRequestReader=null,this._rangeReaders=[],this._pdfDataRangeTransport.addRangeListener((function(e,t){r._onReceiveData({begin:e,chunk:t})})),this._pdfDataRangeTransport.addProgressListener((function(e){r._onProgress({loaded:e})})),this._pdfDataRangeTransport.addProgressiveReadListener((function(e){r._onReceiveData({chunk:e})})),this._pdfDataRangeTransport.transportReady()}function t(e,t){this._stream=e,this._done=!1,this._filename=null,this._queuedChunks=t||[],this._requests=[],this._headersReady=Promise.resolve(),e._fullRequestReader=this,this.onProgress=null}var r,n;function a(e,t,r){this._stream=e,this._begin=t,this._end=r,this._queuedChunk=null,this._requests=[],this._done=!1,this.onProgress=null}return e.prototype={_onReceiveData:function(e){var t=new Uint8Array(e.chunk).buffer;if(void 0===e.begin)this._fullRequestReader?this._fullRequestReader._enqueue(t):this._queuedChunks.push(t);else{var r=this._rangeReaders.some((function(r){return r._begin===e.begin&&(r._enqueue(t),!0)}));(0,i.assert)(r)}},_onProgress:function(e){if(this._rangeReaders.length>0){var t=this._rangeReaders[0];t.onProgress&&t.onProgress({loaded:e.loaded})}},_removeRangeReader:function(e){var t=this._rangeReaders.indexOf(e);t>=0&&this._rangeReaders.splice(t,1)},getFullReader:function(){(0,i.assert)(!this._fullRequestReader);var e=this._queuedChunks;return this._queuedChunks=null,new t(this,e)},getRangeReader:function(e,t){var r=new a(this,e,t);return this._pdfDataRangeTransport.requestDataRange(e,t),this._rangeReaders.push(r),r},cancelAllRequests:function(e){this._fullRequestReader&&this._fullRequestReader.cancel(e),this._rangeReaders.slice(0).forEach((function(t){t.cancel(e)})),this._pdfDataRangeTransport.abort()}},t.prototype={_enqueue:function(e){this._done||(this._requests.length>0?this._requests.shift().resolve({value:e,done:!1}):this._queuedChunks.push(e))},get headersReady(){return this._headersReady},get filename(){return this._filename},get isRangeSupported(){return this._stream._isRangeSupported},get isStreamingSupported(){return this._stream._isStreamingSupported},get contentLength(){return this._stream._contentLength},read:(r=s(o.default.mark((function e(){var t,r;return o.default.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(!(this._queuedChunks.length>0)){e.next=3;break}return t=this._queuedChunks.shift(),e.abrupt("return",{value:t,done:!1});case 3:if(!this._done){e.next=5;break}return e.abrupt("return",{value:void 0,done:!0});case 5:return r=(0,i.createPromiseCapability)(),this._requests.push(r),e.abrupt("return",r.promise);case 8:case"end":return e.stop()}}),e,this)}))),function(){return r.apply(this,arguments)}),cancel:function(e){this._done=!0,this._requests.forEach((function(e){e.resolve({value:void 0,done:!0})})),this._requests=[]}},a.prototype={_enqueue:function(e){this._done||(0===this._requests.length?this._queuedChunk=e:(this._requests.shift().resolve({value:e,done:!1}),this._requests.forEach((function(e){e.resolve({value:void 0,done:!0})})),this._requests=[]),this._done=!0,this._stream._removeRangeReader(this))},get isStreamingSupported(){return!1},read:(n=s(o.default.mark((function e(){var t,r;return o.default.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(!this._queuedChunk){e.next=4;break}return t=this._queuedChunk,this._queuedChunk=null,e.abrupt("return",{value:t,done:!1});case 4:if(!this._done){e.next=6;break}return e.abrupt("return",{value:void 0,done:!0});case 6:return r=(0,i.createPromiseCapability)(),this._requests.push(r),e.abrupt("return",r.promise);case 9:case"end":return e.stop()}}),e,this)}))),function(){return n.apply(this,arguments)}),cancel:function(e){this._done=!0,this._requests.forEach((function(e){e.resolve({value:void 0,done:!0})})),this._requests=[],this._stream._removeRangeReader(this)}},e}();t.PDFDataTransportStream=u},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.WebGLContext=void 0;var n=r(1);function o(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}var i=function(){function e(t){var r=t.enable,n=void 0!==r&&r;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._enabled=!0===n}var t,r,i;return t=e,(r=[{key:"composeSMask",value:function(e){var t=e.layer,r=e.mask,n=e.properties;return a.composeSMask(t,r,n)}},{key:"drawFigures",value:function(e){var t=e.width,r=e.height,n=e.backgroundColor,o=e.figures,i=e.context;return a.drawFigures(t,r,n,o,i)}},{key:"clear",value:function(){a.cleanup()}},{key:"isEnabled",get:function(){var e=this._enabled;return e&&(e=a.tryInitGL()),(0,n.shadow)(this,"isEnabled",e)}}])&&o(t.prototype,r),i&&o(t,i),e}();t.WebGLContext=i;var a=function(){function e(e,t,r){var n=e.createShader(r);if(e.shaderSource(n,t),e.compileShader(n),!e.getShaderParameter(n,e.COMPILE_STATUS)){var o=e.getShaderInfoLog(n);throw new Error("Error during shader compilation: "+o)}return n}function t(t,r){return e(t,r,t.VERTEX_SHADER)}function r(t,r){return e(t,r,t.FRAGMENT_SHADER)}function n(e,t){for(var r=e.createProgram(),n=0,o=t.length;n<o;++n)e.attachShader(r,t[n]);if(e.linkProgram(r),!e.getProgramParameter(r,e.LINK_STATUS)){var i=e.getProgramInfoLog(r);throw new Error("Error during program linking: "+i)}return r}function o(e,t,r){e.activeTexture(r);var n=e.createTexture();return e.bindTexture(e.TEXTURE_2D,n),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_WRAP_S,e.CLAMP_TO_EDGE),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_WRAP_T,e.CLAMP_TO_EDGE),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_MIN_FILTER,e.NEAREST),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_MAG_FILTER,e.NEAREST),e.texImage2D(e.TEXTURE_2D,0,e.RGBA,e.RGBA,e.UNSIGNED_BYTE,t),n}var i,a;function s(){i||(a=document.createElement("canvas"),i=a.getContext("webgl",{premultipliedalpha:!1}))}var u="  attribute vec2 a_position;                                      attribute vec2 a_texCoord;                                                                                                      uniform vec2 u_resolution;                                                                                                      varying vec2 v_texCoord;                                                                                                        void main() {                                                     vec2 clipSpace = (a_position / u_resolution) * 2.0 - 1.0;       gl_Position = vec4(clipSpace * vec2(1, -1), 0, 1);                                                                              v_texCoord = a_texCoord;                                      }                                                             ",l="  precision mediump float;                                                                                                        uniform vec4 u_backdrop;                                        uniform int u_subtype;                                          uniform sampler2D u_image;                                      uniform sampler2D u_mask;                                                                                                       varying vec2 v_texCoord;                                                                                                        void main() {                                                     vec4 imageColor = texture2D(u_image, v_texCoord);               vec4 maskColor = texture2D(u_mask, v_texCoord);                 if (u_backdrop.a > 0.0) {                                         maskColor.rgb = maskColor.rgb * maskColor.a +                                   u_backdrop.rgb * (1.0 - maskColor.a);         }                                                               float lum;                                                      if (u_subtype == 0) {                                             lum = maskColor.a;                                            } else {                                                          lum = maskColor.r * 0.3 + maskColor.g * 0.59 +                        maskColor.b * 0.11;                                     }                                                               imageColor.a *= lum;                                            imageColor.rgb *= imageColor.a;                                 gl_FragColor = imageColor;                                    }                                                             ",c=null,f="  attribute vec2 a_position;                                      attribute vec3 a_color;                                                                                                         uniform vec2 u_resolution;                                      uniform vec2 u_scale;                                           uniform vec2 u_offset;                                                                                                          varying vec4 v_color;                                                                                                           void main() {                                                     vec2 position = (a_position + u_offset) * u_scale;              vec2 clipSpace = (position / u_resolution) * 2.0 - 1.0;         gl_Position = vec4(clipSpace * vec2(1, -1), 0, 1);                                                                              v_color = vec4(a_color / 255.0, 1.0);                         }                                                             ",h="  precision mediump float;                                                                                                        varying vec4 v_color;                                                                                                           void main() {                                                     gl_FragColor = v_color;                                       }                                                             ",d=null;return{tryInitGL:function(){try{return s(),!!i}catch(e){}return!1},composeSMask:function(e,f,h){var d=e.width,p=e.height;c||function(){var e,o;s(),e=a,a=null,o=i,i=null;var f=n(o,[t(o,u),r(o,l)]);o.useProgram(f);var h={};h.gl=o,h.canvas=e,h.resolutionLocation=o.getUniformLocation(f,"u_resolution"),h.positionLocation=o.getAttribLocation(f,"a_position"),h.backdropLocation=o.getUniformLocation(f,"u_backdrop"),h.subtypeLocation=o.getUniformLocation(f,"u_subtype");var d=o.getAttribLocation(f,"a_texCoord"),p=o.getUniformLocation(f,"u_image"),y=o.getUniformLocation(f,"u_mask"),v=o.createBuffer();o.bindBuffer(o.ARRAY_BUFFER,v),o.bufferData(o.ARRAY_BUFFER,new Float32Array([0,0,1,0,0,1,0,1,1,0,1,1]),o.STATIC_DRAW),o.enableVertexAttribArray(d),o.vertexAttribPointer(d,2,o.FLOAT,!1,0,0),o.uniform1i(p,0),o.uniform1i(y,1),c=h}();var y=c,v=y.canvas,m=y.gl;v.width=d,v.height=p,m.viewport(0,0,m.drawingBufferWidth,m.drawingBufferHeight),m.uniform2f(y.resolutionLocation,d,p),h.backdrop?m.uniform4f(y.resolutionLocation,h.backdrop[0],h.backdrop[1],h.backdrop[2],1):m.uniform4f(y.resolutionLocation,0,0,0,0),m.uniform1i(y.subtypeLocation,"Luminosity"===h.subtype?1:0);var g=o(m,e,m.TEXTURE0),b=o(m,f,m.TEXTURE1),_=m.createBuffer();return m.bindBuffer(m.ARRAY_BUFFER,_),m.bufferData(m.ARRAY_BUFFER,new Float32Array([0,0,d,0,0,p,0,p,d,0,d,p]),m.STATIC_DRAW),m.enableVertexAttribArray(y.positionLocation),m.vertexAttribPointer(y.positionLocation,2,m.FLOAT,!1,0,0),m.clearColor(0,0,0,0),m.enable(m.BLEND),m.blendFunc(m.ONE,m.ONE_MINUS_SRC_ALPHA),m.clear(m.COLOR_BUFFER_BIT),m.drawArrays(m.TRIANGLES,0,6),m.flush(),m.deleteTexture(g),m.deleteTexture(b),m.deleteBuffer(_),v},drawFigures:function(e,o,u,l,c){d||function(){var e,o;s(),e=a,a=null,o=i,i=null;var u=n(o,[t(o,f),r(o,h)]);o.useProgram(u);var l={};l.gl=o,l.canvas=e,l.resolutionLocation=o.getUniformLocation(u,"u_resolution"),l.scaleLocation=o.getUniformLocation(u,"u_scale"),l.offsetLocation=o.getUniformLocation(u,"u_offset"),l.positionLocation=o.getAttribLocation(u,"a_position"),l.colorLocation=o.getAttribLocation(u,"a_color"),d=l}();var p=d,y=p.canvas,v=p.gl;y.width=e,y.height=o,v.viewport(0,0,v.drawingBufferWidth,v.drawingBufferHeight),v.uniform2f(p.resolutionLocation,e,o);var m,g,b,_=0;for(m=0,g=l.length;m<g;m++)switch(l[m].type){case"lattice":_+=((b=l[m].coords.length/l[m].verticesPerRow|0)-1)*(l[m].verticesPerRow-1)*6;break;case"triangles":_+=l[m].coords.length}var w=new Float32Array(2*_),S=new Uint8Array(3*_),P=c.coords,A=c.colors,k=0,E=0;for(m=0,g=l.length;m<g;m++){var x=l[m],O=x.coords,R=x.colors;switch(x.type){case"lattice":var C=x.verticesPerRow;b=O.length/C|0;for(var T=1;T<b;T++)for(var j=T*C+1,L=1;L<C;L++,j++)w[k]=P[O[j-C-1]],w[k+1]=P[O[j-C-1]+1],w[k+2]=P[O[j-C]],w[k+3]=P[O[j-C]+1],w[k+4]=P[O[j-1]],w[k+5]=P[O[j-1]+1],S[E]=A[R[j-C-1]],S[E+1]=A[R[j-C-1]+1],S[E+2]=A[R[j-C-1]+2],S[E+3]=A[R[j-C]],S[E+4]=A[R[j-C]+1],S[E+5]=A[R[j-C]+2],S[E+6]=A[R[j-1]],S[E+7]=A[R[j-1]+1],S[E+8]=A[R[j-1]+2],w[k+6]=w[k+2],w[k+7]=w[k+3],w[k+8]=w[k+4],w[k+9]=w[k+5],w[k+10]=P[O[j]],w[k+11]=P[O[j]+1],S[E+9]=S[E+3],S[E+10]=S[E+4],S[E+11]=S[E+5],S[E+12]=S[E+6],S[E+13]=S[E+7],S[E+14]=S[E+8],S[E+15]=A[R[j]],S[E+16]=A[R[j]+1],S[E+17]=A[R[j]+2],k+=12,E+=18;break;case"triangles":for(var I=0,D=O.length;I<D;I++)w[k]=P[O[I]],w[k+1]=P[O[I]+1],S[E]=A[R[I]],S[E+1]=A[R[I]+1],S[E+2]=A[R[I]+2],k+=2,E+=3}}u?v.clearColor(u[0]/255,u[1]/255,u[2]/255,1):v.clearColor(0,0,0,0),v.clear(v.COLOR_BUFFER_BIT);var M=v.createBuffer();v.bindBuffer(v.ARRAY_BUFFER,M),v.bufferData(v.ARRAY_BUFFER,w,v.STATIC_DRAW),v.enableVertexAttribArray(p.positionLocation),v.vertexAttribPointer(p.positionLocation,2,v.FLOAT,!1,0,0);var F=v.createBuffer();return v.bindBuffer(v.ARRAY_BUFFER,F),v.bufferData(v.ARRAY_BUFFER,S,v.STATIC_DRAW),v.enableVertexAttribArray(p.colorLocation),v.vertexAttribPointer(p.colorLocation,3,v.UNSIGNED_BYTE,!1,0,0),v.uniform2f(p.scaleLocation,c.scaleX,c.scaleY),v.uniform2f(p.offsetLocation,c.offsetX,c.offsetY),v.drawArrays(v.TRIANGLES,0,_),v.flush(),v.deleteBuffer(M),v.deleteBuffer(F),y},cleanup:function(){c&&c.canvas&&(c.canvas.width=0,c.canvas.height=0),d&&d.canvas&&(d.canvas.width=0,d.canvas.height=0),c=null,d=null}}}()},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.renderTextLayer=void 0;var n,o=r(1),i=(n=r(3))&&n.__esModule?n:{default:n},a=function(){var e=1e5,t=/\S/,r=["left: ",0,"px; top: ",0,"px; font-size: ",0,"px; font-family: ","",";"];function n(e,n,i){var a,s=document.createElement("span"),u={style:null,angle:0,canvasWidth:0,isWhitespace:!1,originalTransform:null,paddingBottom:0,paddingLeft:0,paddingRight:0,paddingTop:0,scale:1};if(e._textDivs.push(s),a=n.str,!t.test(a))return u.isWhitespace=!0,void e._textDivProperties.set(s,u);var l=o.Util.transform(e._viewport.transform,n.transform),c=Math.atan2(l[1],l[0]),f=i[n.fontName];f.vertical&&(c+=Math.PI/2);var h,d,p=Math.sqrt(l[2]*l[2]+l[3]*l[3]),y=p;if(f.ascent?y=f.ascent*y:f.descent&&(y=(1+f.descent)*y),0===c?(h=l[4],d=l[5]-y):(h=l[4]+y*Math.sin(c),d=l[5]-y*Math.cos(c)),r[1]=h,r[3]=d,r[5]=p,r[7]=f.fontFamily,u.style=r.join(""),s.setAttribute("style",u.style),s.textContent=n.str,e._fontInspectorEnabled&&(s.dataset.fontName=n.fontName),0!==c&&(u.angle=c*(180/Math.PI)),n.str.length>1&&(f.vertical?u.canvasWidth=n.height*e._viewport.scale:u.canvasWidth=n.width*e._viewport.scale),e._textDivProperties.set(s,u),e._textContentStream&&e._layoutText(s),e._enhanceTextSelection){var v=1,m=0;0!==c&&(v=Math.cos(c),m=Math.sin(c));var g,b,_=(f.vertical?n.height:n.width)*e._viewport.scale,w=p;0!==c?(g=[v,m,-m,v,h,d],b=o.Util.getAxialAlignedBoundingBox([0,0,_,w],g)):b=[h,d,h+_,d+w],e._bounds.push({left:b[0],top:b[1],right:b[2],bottom:b[3],div:s,size:[_,w],m:g})}}function a(t){if(!t._canceled){var r=t._textDivs,n=t._capability,o=r.length;if(o>e)return t._renderingDone=!0,void n.resolve();if(!t._textContentStream)for(var i=0;i<o;i++)t._layoutText(r[i]);t._renderingDone=!0,n.resolve()}}function s(e){for(var t=e._bounds,r=e._viewport,n=function(e,t,r){var n=r.map((function(e,t){return{x1:e.left,y1:e.top,x2:e.right,y2:e.bottom,index:t,x1New:void 0,x2New:void 0}}));u(e,n);var o=new Array(r.length);return n.forEach((function(e){var t=e.index;o[t]={left:e.x1New,top:0,right:e.x2New,bottom:0}})),r.map((function(t,r){var i=o[r],a=n[r];a.x1=t.top,a.y1=e-i.right,a.x2=t.bottom,a.y2=e-i.left,a.index=r,a.x1New=void 0,a.x2New=void 0})),u(t,n),n.forEach((function(e){var t=e.index;o[t].top=e.x1New,o[t].bottom=e.x2New})),o}(r.width,r.height,t),i=0;i<n.length;i++){var a=t[i].div,s=e._textDivProperties.get(a);if(0!==s.angle){var l=n[i],c=t[i],f=c.m,h=f[0],d=f[1],p=[[0,0],[0,c.size[1]],[c.size[0],0],c.size],y=new Float64Array(64);p.forEach((function(e,t){var r=o.Util.applyTransform(e,f);y[t+0]=h&&(l.left-r[0])/h,y[t+4]=d&&(l.top-r[1])/d,y[t+8]=h&&(l.right-r[0])/h,y[t+12]=d&&(l.bottom-r[1])/d,y[t+16]=d&&(l.left-r[0])/-d,y[t+20]=h&&(l.top-r[1])/h,y[t+24]=d&&(l.right-r[0])/-d,y[t+28]=h&&(l.bottom-r[1])/h,y[t+32]=h&&(l.left-r[0])/-h,y[t+36]=d&&(l.top-r[1])/-d,y[t+40]=h&&(l.right-r[0])/-h,y[t+44]=d&&(l.bottom-r[1])/-d,y[t+48]=d&&(l.left-r[0])/d,y[t+52]=h&&(l.top-r[1])/-h,y[t+56]=d&&(l.right-r[0])/d,y[t+60]=h&&(l.bottom-r[1])/-h}));var v=function(e,t,r){for(var n=0,o=0;o<r;o++){var i=e[t++];i>0&&(n=n?Math.min(i,n):i)}return n},m=1+Math.min(Math.abs(h),Math.abs(d));s.paddingLeft=v(y,32,16)/m,s.paddingTop=v(y,48,16)/m,s.paddingRight=v(y,0,16)/m,s.paddingBottom=v(y,16,16)/m,e._textDivProperties.set(a,s)}else s.paddingLeft=t[i].left-n[i].left,s.paddingTop=t[i].top-n[i].top,s.paddingRight=n[i].right-t[i].right,s.paddingBottom=n[i].bottom-t[i].bottom,e._textDivProperties.set(a,s)}}function u(e,t){t.sort((function(e,t){return e.x1-t.x1||e.index-t.index}));var r=[{start:-1/0,end:1/0,boundary:{x1:-1/0,y1:-1/0,x2:0,y2:1/0,index:-1,x1New:0,x2New:0}}];t.forEach((function(e){for(var t=0;t<r.length&&r[t].end<=e.y1;)t++;for(var n,o,i=r.length-1;i>=0&&r[i].start>=e.y2;)i--;var a,s,u=-1/0;for(a=t;a<=i;a++){var l;(l=(o=(n=r[a]).boundary).x2>e.x1?o.index>e.index?o.x1New:e.x1:void 0===o.x2New?(o.x2+e.x1)/2:o.x2New)>u&&(u=l)}for(e.x1New=u,a=t;a<=i;a++)void 0===(o=(n=r[a]).boundary).x2New?o.x2>e.x1?o.index>e.index&&(o.x2New=o.x2):o.x2New=u:o.x2New>u&&(o.x2New=Math.max(u,o.x2));var c=[],f=null;for(a=t;a<=i;a++){var h=(o=(n=r[a]).boundary).x2>e.x2?o:e;f===h?c[c.length-1].end=n.end:(c.push({start:n.start,end:n.end,boundary:h}),f=h)}for(r[t].start<e.y1&&(c[0].start=e.y1,c.unshift({start:r[t].start,end:e.y1,boundary:r[t].boundary})),e.y2<r[i].end&&(c[c.length-1].end=e.y2,c.push({start:e.y2,end:r[i].end,boundary:r[i].boundary})),a=t;a<=i;a++)if(void 0===(o=(n=r[a]).boundary).x2New){var d=!1;for(s=t-1;!d&&s>=0&&r[s].start>=o.y1;s--)d=r[s].boundary===o;for(s=i+1;!d&&s<r.length&&r[s].end<=o.y2;s++)d=r[s].boundary===o;for(s=0;!d&&s<c.length;s++)d=c[s].boundary===o;d||(o.x2New=u)}Array.prototype.splice.apply(r,[t,i-t+1].concat(c))})),r.forEach((function(t){var r=t.boundary;void 0===r.x2New&&(r.x2New=Math.max(e,r.x2))}))}function l(e){var t=e.textContent,r=e.textContentStream,n=e.container,a=e.viewport,s=e.textDivs,u=e.textContentItemsStr,l=e.enhanceTextSelection;this._textContent=t,this._textContentStream=r,this._container=n,this._viewport=a,this._textDivs=s||[],this._textContentItemsStr=u||[],this._enhanceTextSelection=!!l,this._fontInspectorEnabled=!(!i.default.FontInspector||!i.default.FontInspector.enabled),this._reader=null,this._layoutTextLastFontSize=null,this._layoutTextLastFontFamily=null,this._layoutTextCtx=null,this._textDivProperties=new WeakMap,this._renderingDone=!1,this._canceled=!1,this._capability=(0,o.createPromiseCapability)(),this._renderTimer=null,this._bounds=[]}return l.prototype={get promise(){return this._capability.promise},cancel:function(){this._reader&&(this._reader.cancel(new o.AbortException("text layer task cancelled")),this._reader=null),this._canceled=!0,null!==this._renderTimer&&(clearTimeout(this._renderTimer),this._renderTimer=null),this._capability.reject("canceled")},_processItems:function(e,t){for(var r=0,o=e.length;r<o;r++)this._textContentItemsStr.push(e[r].str),n(this,e[r],t)},_layoutText:function(e){var t=this._container,r=this._textDivProperties.get(e);if(!r.isWhitespace){var n=e.style.fontSize,o=e.style.fontFamily;n===this._layoutTextLastFontSize&&o===this._layoutTextLastFontFamily||(this._layoutTextCtx.font=n+" "+o,this._layoutTextLastFontSize=n,this._layoutTextLastFontFamily=o);var i=this._layoutTextCtx.measureText(e.textContent).width,a="";0!==r.canvasWidth&&i>0&&(r.scale=r.canvasWidth/i,a="scaleX(".concat(r.scale,")")),0!==r.angle&&(a="rotate(".concat(r.angle,"deg) ").concat(a)),a.length>0&&(r.originalTransform=a,e.style.transform=a),this._textDivProperties.set(e,r),t.appendChild(e)}},_render:function(e){var t=this,r=(0,o.createPromiseCapability)(),n=Object.create(null),i=document.createElement("canvas");if(i.mozOpaque=!0,this._layoutTextCtx=i.getContext("2d",{alpha:!1}),this._textContent){var s=this._textContent.items,u=this._textContent.styles;this._processItems(s,u),r.resolve()}else{if(!this._textContentStream)throw new Error('Neither "textContent" nor "textContentStream" parameters specified.');this._reader=this._textContentStream.getReader(),function e(){t._reader.read().then((function(o){var i=o.value;o.done?r.resolve():(Object.assign(n,i.styles),t._processItems(i.items,n),e())}),r.reject)}()}r.promise.then((function(){n=null,e?t._renderTimer=setTimeout((function(){a(t),t._renderTimer=null}),e):a(t)}),this._capability.reject)},expandTextDivs:function(e){if(this._enhanceTextSelection&&this._renderingDone){null!==this._bounds&&(s(this),this._bounds=null);for(var t=0,r=this._textDivs.length;t<r;t++){var n=this._textDivs[t],o=this._textDivProperties.get(n);if(!o.isWhitespace)if(e){var i="",a="";1!==o.scale&&(i="scaleX("+o.scale+")"),0!==o.angle&&(i="rotate("+o.angle+"deg) "+i),0!==o.paddingLeft&&(a+=" padding-left: "+o.paddingLeft/o.scale+"px;",i+=" translateX("+-o.paddingLeft/o.scale+"px)"),0!==o.paddingTop&&(a+=" padding-top: "+o.paddingTop+"px;",i+=" translateY("+-o.paddingTop+"px)"),0!==o.paddingRight&&(a+=" padding-right: "+o.paddingRight/o.scale+"px;"),0!==o.paddingBottom&&(a+=" padding-bottom: "+o.paddingBottom+"px;"),""!==a&&n.setAttribute("style",o.style+a),""!==i&&(n.style.transform=i)}else n.style.padding=0,n.style.transform=o.originalTransform||""}}}},function(e){var t=new l({textContent:e.textContent,textContentStream:e.textContentStream,container:e.container,viewport:e.viewport,textDivs:e.textDivs,textContentItemsStr:e.textContentItemsStr,enhanceTextSelection:e.enhanceTextSelection});return t._render(e.timeout),t}}();t.renderTextLayer=a},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.AnnotationLayer=void 0;var n=r(151),o=r(1);function i(e,t,r){return(i="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(e,t,r){var n=function(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=l(e)););return e}(e,t);if(n){var o=Object.getOwnPropertyDescriptor(n,t);return o.get?o.get.call(r):o.value}})(e,t,r||e)}function a(e){return(a="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function s(e,t){return!t||"object"!==a(t)&&"function"!=typeof t?u(e):t}function u(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function l(e){return(l=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function c(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&f(e,t)}function f(e,t){return(f=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function h(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function d(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function p(e,t,r){return t&&d(e.prototype,t),r&&d(e,r),e}var y=function(){function e(){h(this,e)}return p(e,null,[{key:"create",value:function(e){switch(e.data.annotationType){case o.AnnotationType.LINK:return new m(e);case o.AnnotationType.TEXT:return new g(e);case o.AnnotationType.WIDGET:switch(e.data.fieldType){case"Tx":return new _(e);case"Btn":return e.data.radioButton?new S(e):e.data.checkBox?new w(e):new P(e);case"Ch":return new A(e)}return new b(e);case o.AnnotationType.POPUP:return new k(e);case o.AnnotationType.LINE:return new x(e);case o.AnnotationType.SQUARE:return new O(e);case o.AnnotationType.CIRCLE:return new R(e);case o.AnnotationType.POLYLINE:return new C(e);case o.AnnotationType.INK:return new j(e);case o.AnnotationType.POLYGON:return new T(e);case o.AnnotationType.HIGHLIGHT:return new L(e);case o.AnnotationType.UNDERLINE:return new I(e);case o.AnnotationType.SQUIGGLY:return new D(e);case o.AnnotationType.STRIKEOUT:return new M(e);case o.AnnotationType.STAMP:return new F(e);case o.AnnotationType.FILEATTACHMENT:return new N(e);default:return new v(e)}}}]),e}(),v=function(){function e(t){var r=arguments.length>1&&void 0!==arguments[1]&&arguments[1],n=arguments.length>2&&void 0!==arguments[2]&&arguments[2];h(this,e),this.isRenderable=r,this.data=t.data,this.layer=t.layer,this.page=t.page,this.viewport=t.viewport,this.linkService=t.linkService,this.downloadManager=t.downloadManager,this.imageResourcesPath=t.imageResourcesPath,this.renderInteractiveForms=t.renderInteractiveForms,this.svgFactory=t.svgFactory,r&&(this.container=this._createContainer(n))}return p(e,[{key:"_createContainer",value:function(){var e=arguments.length>0&&void 0!==arguments[0]&&arguments[0],t=this.data,r=this.page,n=this.viewport,i=document.createElement("section"),a=t.rect[2]-t.rect[0],s=t.rect[3]-t.rect[1];i.setAttribute("data-annotation-id",t.id);var u=o.Util.normalizeRect([t.rect[0],r.view[3]-t.rect[1]+r.view[1],t.rect[2],r.view[3]-t.rect[3]+r.view[1]]);if(i.style.transform="matrix("+n.transform.join(",")+")",i.style.transformOrigin=-u[0]+"px "+-u[1]+"px",!e&&t.borderStyle.width>0){i.style.borderWidth=t.borderStyle.width+"px",t.borderStyle.style!==o.AnnotationBorderStyleType.UNDERLINE&&(a-=2*t.borderStyle.width,s-=2*t.borderStyle.width);var l=t.borderStyle.horizontalCornerRadius,c=t.borderStyle.verticalCornerRadius;if(l>0||c>0){var f=l+"px / "+c+"px";i.style.borderRadius=f}switch(t.borderStyle.style){case o.AnnotationBorderStyleType.SOLID:i.style.borderStyle="solid";break;case o.AnnotationBorderStyleType.DASHED:i.style.borderStyle="dashed";break;case o.AnnotationBorderStyleType.BEVELED:(0,o.warn)("Unimplemented border style: beveled");break;case o.AnnotationBorderStyleType.INSET:(0,o.warn)("Unimplemented border style: inset");break;case o.AnnotationBorderStyleType.UNDERLINE:i.style.borderBottomStyle="solid"}t.color?i.style.borderColor=o.Util.makeCssRgb(0|t.color[0],0|t.color[1],0|t.color[2]):i.style.borderWidth=0}return i.style.left=u[0]+"px",i.style.top=u[1]+"px",i.style.width=a+"px",i.style.height=s+"px",i}},{key:"_createPopup",value:function(e,t,r){t||((t=document.createElement("div")).style.height=e.style.height,t.style.width=e.style.width,e.appendChild(t));var n=new E({container:e,trigger:t,color:r.color,title:r.title,contents:r.contents,hideWrapper:!0}).render();n.style.left=e.style.width,e.appendChild(n)}},{key:"render",value:function(){(0,o.unreachable)("Abstract method `AnnotationElement.render` called")}}]),e}(),m=function(e){function t(e){h(this,t);var r=!!(e.data.url||e.data.dest||e.data.action);return s(this,l(t).call(this,e,r))}return c(t,e),p(t,[{key:"render",value:function(){this.container.className="linkAnnotation";var e=this.data,t=this.linkService,r=document.createElement("a");return(0,n.addLinkAttributes)(r,{url:e.url,target:e.newWindow?n.LinkTarget.BLANK:t.externalLinkTarget,rel:t.externalLinkRel}),e.url||(e.action?this._bindNamedAction(r,e.action):this._bindLink(r,e.dest)),this.container.appendChild(r),this.container}},{key:"_bindLink",value:function(e,t){var r=this;e.href=this.linkService.getDestinationHash(t),e.onclick=function(){return t&&r.linkService.navigateTo(t),!1},t&&(e.className="internalLink")}},{key:"_bindNamedAction",value:function(e,t){var r=this;e.href=this.linkService.getAnchorUrl(""),e.onclick=function(){return r.linkService.executeNamedAction(t),!1},e.className="internalLink"}}]),t}(v),g=function(e){function t(e){h(this,t);var r=!!(e.data.hasPopup||e.data.title||e.data.contents);return s(this,l(t).call(this,e,r))}return c(t,e),p(t,[{key:"render",value:function(){this.container.className="textAnnotation";var e=document.createElement("img");return e.style.height=this.container.style.height,e.style.width=this.container.style.width,e.src=this.imageResourcesPath+"annotation-"+this.data.name.toLowerCase()+".svg",e.alt="[{{type}} Annotation]",e.dataset.l10nId="text_annotation_type",e.dataset.l10nArgs=JSON.stringify({type:this.data.name}),this.data.hasPopup||this._createPopup(this.container,e,this.data),this.container.appendChild(e),this.container}}]),t}(v),b=function(e){function t(){return h(this,t),s(this,l(t).apply(this,arguments))}return c(t,e),p(t,[{key:"render",value:function(){return this.container}}]),t}(v),_=function(e){function t(e){h(this,t);var r=e.renderInteractiveForms||!e.data.hasAppearance&&!!e.data.fieldValue;return s(this,l(t).call(this,e,r))}return c(t,e),p(t,[{key:"render",value:function(){this.container.className="textWidgetAnnotation";var e=null;if(this.renderInteractiveForms){if(this.data.multiLine?(e=document.createElement("textarea")).textContent=this.data.fieldValue:((e=document.createElement("input")).type="text",e.setAttribute("value",this.data.fieldValue)),e.disabled=this.data.readOnly,null!==this.data.maxLen&&(e.maxLength=this.data.maxLen),this.data.comb){var t=(this.data.rect[2]-this.data.rect[0])/this.data.maxLen;e.classList.add("comb"),e.style.letterSpacing="calc("+t+"px - 1ch)"}}else{(e=document.createElement("div")).textContent=this.data.fieldValue,e.style.verticalAlign="middle",e.style.display="table-cell";var r=null;this.data.fontRefName&&this.page.commonObjs.has(this.data.fontRefName)&&(r=this.page.commonObjs.get(this.data.fontRefName)),this._setTextStyle(e,r)}return null!==this.data.textAlignment&&(e.style.textAlign=["left","center","right"][this.data.textAlignment]),this.container.appendChild(e),this.container}},{key:"_setTextStyle",value:function(e,t){var r=e.style;if(r.fontSize=this.data.fontSize+"px",r.direction=this.data.fontDirection<0?"rtl":"ltr",t){r.fontWeight=t.black?t.bold?"900":"bold":t.bold?"bold":"normal",r.fontStyle=t.italic?"italic":"normal";var n=t.loadedName?'"'+t.loadedName+'", ':"",o=t.fallbackName||"Helvetica, sans-serif";r.fontFamily=n+o}}}]),t}(b),w=function(e){function t(e){return h(this,t),s(this,l(t).call(this,e,e.renderInteractiveForms))}return c(t,e),p(t,[{key:"render",value:function(){this.container.className="buttonWidgetAnnotation checkBox";var e=document.createElement("input");return e.disabled=this.data.readOnly,e.type="checkbox",this.data.fieldValue&&"Off"!==this.data.fieldValue&&e.setAttribute("checked",!0),this.container.appendChild(e),this.container}}]),t}(b),S=function(e){function t(e){return h(this,t),s(this,l(t).call(this,e,e.renderInteractiveForms))}return c(t,e),p(t,[{key:"render",value:function(){this.container.className="buttonWidgetAnnotation radioButton";var e=document.createElement("input");return e.disabled=this.data.readOnly,e.type="radio",e.name=this.data.fieldName,this.data.fieldValue===this.data.buttonValue&&e.setAttribute("checked",!0),this.container.appendChild(e),this.container}}]),t}(b),P=function(e){function t(){return h(this,t),s(this,l(t).apply(this,arguments))}return c(t,e),p(t,[{key:"render",value:function(){var e=i(l(t.prototype),"render",this).call(this);return e.className="buttonWidgetAnnotation pushButton",e}}]),t}(m),A=function(e){function t(e){return h(this,t),s(this,l(t).call(this,e,e.renderInteractiveForms))}return c(t,e),p(t,[{key:"render",value:function(){this.container.className="choiceWidgetAnnotation";var e=document.createElement("select");e.disabled=this.data.readOnly,this.data.combo||(e.size=this.data.options.length,this.data.multiSelect&&(e.multiple=!0));for(var t=0,r=this.data.options.length;t<r;t++){var n=this.data.options[t],o=document.createElement("option");o.textContent=n.displayValue,o.value=n.exportValue,this.data.fieldValue.includes(n.displayValue)&&o.setAttribute("selected",!0),e.appendChild(o)}return this.container.appendChild(e),this.container}}]),t}(b),k=function(e){function t(e){h(this,t);var r=!(!e.data.title&&!e.data.contents);return s(this,l(t).call(this,e,r))}return c(t,e),p(t,[{key:"render",value:function(){if(this.container.className="popupAnnotation",["Line","Square","Circle","PolyLine","Polygon","Ink"].includes(this.data.parentType))return this.container;var e='[data-annotation-id="'+this.data.parentId+'"]',t=this.layer.querySelector(e);if(!t)return this.container;var r=new E({container:this.container,trigger:t,color:this.data.color,title:this.data.title,contents:this.data.contents}),n=parseFloat(t.style.left),o=parseFloat(t.style.width);return this.container.style.transformOrigin=-(n+o)+"px -"+t.style.top,this.container.style.left=n+o+"px",this.container.appendChild(r.render()),this.container}}]),t}(v),E=function(){function e(t){h(this,e),this.container=t.container,this.trigger=t.trigger,this.color=t.color,this.title=t.title,this.contents=t.contents,this.hideWrapper=t.hideWrapper||!1,this.pinned=!1}return p(e,[{key:"render",value:function(){var e=document.createElement("div");e.className="popupWrapper",this.hideElement=this.hideWrapper?e:this.container,this.hideElement.setAttribute("hidden",!0);var t=document.createElement("div");t.className="popup";var r=this.color;if(r){var n=.7*(255-r[0])+r[0],i=.7*(255-r[1])+r[1],a=.7*(255-r[2])+r[2];t.style.backgroundColor=o.Util.makeCssRgb(0|n,0|i,0|a)}var s=this._formatContents(this.contents),u=document.createElement("h1");return u.textContent=this.title,this.trigger.addEventListener("click",this._toggle.bind(this)),this.trigger.addEventListener("mouseover",this._show.bind(this,!1)),this.trigger.addEventListener("mouseout",this._hide.bind(this,!1)),t.addEventListener("click",this._hide.bind(this,!0)),t.appendChild(u),t.appendChild(s),e.appendChild(t),e}},{key:"_formatContents",value:function(e){for(var t=document.createElement("p"),r=e.split(/(?:\r\n?|\n)/),n=0,o=r.length;n<o;++n){var i=r[n];t.appendChild(document.createTextNode(i)),n<o-1&&t.appendChild(document.createElement("br"))}return t}},{key:"_toggle",value:function(){this.pinned?this._hide(!0):this._show(!0)}},{key:"_show",value:function(){var e=arguments.length>0&&void 0!==arguments[0]&&arguments[0];e&&(this.pinned=!0),this.hideElement.hasAttribute("hidden")&&(this.hideElement.removeAttribute("hidden"),this.container.style.zIndex+=1)}},{key:"_hide",value:function(){var e=!(arguments.length>0&&void 0!==arguments[0])||arguments[0];e&&(this.pinned=!1),this.hideElement.hasAttribute("hidden")||this.pinned||(this.hideElement.setAttribute("hidden",!0),this.container.style.zIndex-=1)}}]),e}(),x=function(e){function t(e){h(this,t);var r=!!(e.data.hasPopup||e.data.title||e.data.contents);return s(this,l(t).call(this,e,r,!0))}return c(t,e),p(t,[{key:"render",value:function(){this.container.className="lineAnnotation";var e=this.data,t=e.rect[2]-e.rect[0],r=e.rect[3]-e.rect[1],n=this.svgFactory.create(t,r),o=this.svgFactory.createElement("svg:line");return o.setAttribute("x1",e.rect[2]-e.lineCoordinates[0]),o.setAttribute("y1",e.rect[3]-e.lineCoordinates[1]),o.setAttribute("x2",e.rect[2]-e.lineCoordinates[2]),o.setAttribute("y2",e.rect[3]-e.lineCoordinates[3]),o.setAttribute("stroke-width",e.borderStyle.width),o.setAttribute("stroke","transparent"),n.appendChild(o),this.container.append(n),this._createPopup(this.container,o,e),this.container}}]),t}(v),O=function(e){function t(e){h(this,t);var r=!!(e.data.hasPopup||e.data.title||e.data.contents);return s(this,l(t).call(this,e,r,!0))}return c(t,e),p(t,[{key:"render",value:function(){this.container.className="squareAnnotation";var e=this.data,t=e.rect[2]-e.rect[0],r=e.rect[3]-e.rect[1],n=this.svgFactory.create(t,r),o=e.borderStyle.width,i=this.svgFactory.createElement("svg:rect");return i.setAttribute("x",o/2),i.setAttribute("y",o/2),i.setAttribute("width",t-o),i.setAttribute("height",r-o),i.setAttribute("stroke-width",o),i.setAttribute("stroke","transparent"),i.setAttribute("fill","none"),n.appendChild(i),this.container.append(n),this._createPopup(this.container,i,e),this.container}}]),t}(v),R=function(e){function t(e){h(this,t);var r=!!(e.data.hasPopup||e.data.title||e.data.contents);return s(this,l(t).call(this,e,r,!0))}return c(t,e),p(t,[{key:"render",value:function(){this.container.className="circleAnnotation";var e=this.data,t=e.rect[2]-e.rect[0],r=e.rect[3]-e.rect[1],n=this.svgFactory.create(t,r),o=e.borderStyle.width,i=this.svgFactory.createElement("svg:ellipse");return i.setAttribute("cx",t/2),i.setAttribute("cy",r/2),i.setAttribute("rx",t/2-o/2),i.setAttribute("ry",r/2-o/2),i.setAttribute("stroke-width",o),i.setAttribute("stroke","transparent"),i.setAttribute("fill","none"),n.appendChild(i),this.container.append(n),this._createPopup(this.container,i,e),this.container}}]),t}(v),C=function(e){function t(e){var r;h(this,t);var n=!!(e.data.hasPopup||e.data.title||e.data.contents);return(r=s(this,l(t).call(this,e,n,!0))).containerClassName="polylineAnnotation",r.svgElementName="svg:polyline",r}return c(t,e),p(t,[{key:"render",value:function(){this.container.className=this.containerClassName;for(var e=this.data,t=e.rect[2]-e.rect[0],r=e.rect[3]-e.rect[1],n=this.svgFactory.create(t,r),o=e.vertices,i=[],a=0,s=o.length;a<s;a++){var u=o[a].x-e.rect[0],l=e.rect[3]-o[a].y;i.push(u+","+l)}i=i.join(" ");var c=e.borderStyle.width,f=this.svgFactory.createElement(this.svgElementName);return f.setAttribute("points",i),f.setAttribute("stroke-width",c),f.setAttribute("stroke","transparent"),f.setAttribute("fill","none"),n.appendChild(f),this.container.append(n),this._createPopup(this.container,f,e),this.container}}]),t}(v),T=function(e){function t(e){var r;return h(this,t),(r=s(this,l(t).call(this,e))).containerClassName="polygonAnnotation",r.svgElementName="svg:polygon",r}return c(t,e),t}(C),j=function(e){function t(e){var r;h(this,t);var n=!!(e.data.hasPopup||e.data.title||e.data.contents);return(r=s(this,l(t).call(this,e,n,!0))).containerClassName="inkAnnotation",r.svgElementName="svg:polyline",r}return c(t,e),p(t,[{key:"render",value:function(){this.container.className=this.containerClassName;for(var e=this.data,t=e.rect[2]-e.rect[0],r=e.rect[3]-e.rect[1],n=this.svgFactory.create(t,r),o=e.inkLists,i=0,a=o.length;i<a;i++){for(var s=o[i],u=[],l=0,c=s.length;l<c;l++){var f=s[l].x-e.rect[0],h=e.rect[3]-s[l].y;u.push(f+","+h)}u=u.join(" ");var d=e.borderStyle.width,p=this.svgFactory.createElement(this.svgElementName);p.setAttribute("points",u),p.setAttribute("stroke-width",d),p.setAttribute("stroke","transparent"),p.setAttribute("fill","none"),this._createPopup(this.container,p,e),n.appendChild(p)}return this.container.append(n),this.container}}]),t}(v),L=function(e){function t(e){h(this,t);var r=!!(e.data.hasPopup||e.data.title||e.data.contents);return s(this,l(t).call(this,e,r,!0))}return c(t,e),p(t,[{key:"render",value:function(){return this.container.className="highlightAnnotation",this.data.hasPopup||this._createPopup(this.container,null,this.data),this.container}}]),t}(v),I=function(e){function t(e){h(this,t);var r=!!(e.data.hasPopup||e.data.title||e.data.contents);return s(this,l(t).call(this,e,r,!0))}return c(t,e),p(t,[{key:"render",value:function(){return this.container.className="underlineAnnotation",this.data.hasPopup||this._createPopup(this.container,null,this.data),this.container}}]),t}(v),D=function(e){function t(e){h(this,t);var r=!!(e.data.hasPopup||e.data.title||e.data.contents);return s(this,l(t).call(this,e,r,!0))}return c(t,e),p(t,[{key:"render",value:function(){return this.container.className="squigglyAnnotation",this.data.hasPopup||this._createPopup(this.container,null,this.data),this.container}}]),t}(v),M=function(e){function t(e){h(this,t);var r=!!(e.data.hasPopup||e.data.title||e.data.contents);return s(this,l(t).call(this,e,r,!0))}return c(t,e),p(t,[{key:"render",value:function(){return this.container.className="strikeoutAnnotation",this.data.hasPopup||this._createPopup(this.container,null,this.data),this.container}}]),t}(v),F=function(e){function t(e){h(this,t);var r=!!(e.data.hasPopup||e.data.title||e.data.contents);return s(this,l(t).call(this,e,r,!0))}return c(t,e),p(t,[{key:"render",value:function(){return this.container.className="stampAnnotation",this.data.hasPopup||this._createPopup(this.container,null,this.data),this.container}}]),t}(v),N=function(e){function t(e){var r;h(this,t);var i=(r=s(this,l(t).call(this,e,!0))).data.file,a=i.filename,c=i.content;return r.filename=(0,n.getFilenameFromUrl)(a),r.content=c,r.linkService.eventBus&&r.linkService.eventBus.dispatch("fileattachmentannotation",{source:u(u(r)),id:(0,o.stringToPDFString)(a),filename:a,content:c}),r}return c(t,e),p(t,[{key:"render",value:function(){this.container.className="fileAttachmentAnnotation";var e=document.createElement("div");return e.style.height=this.container.style.height,e.style.width=this.container.style.width,e.addEventListener("dblclick",this._download.bind(this)),this.data.hasPopup||!this.data.title&&!this.data.contents||this._createPopup(this.container,e,this.data),this.container.appendChild(e),this.container}},{key:"_download",value:function(){this.downloadManager?this.downloadManager.downloadData(this.content,this.filename,""):(0,o.warn)("Download cannot be started due to unavailable download manager")}}]),t}(v),q=function(){function e(){h(this,e)}return p(e,null,[{key:"render",value:function(e){for(var t=0,r=e.annotations.length;t<r;t++){var o=e.annotations[t];if(o){var i=y.create({data:o,layer:e.div,page:e.page,viewport:e.viewport,linkService:e.linkService,downloadManager:e.downloadManager,imageResourcesPath:e.imageResourcesPath||"",renderInteractiveForms:e.renderInteractiveForms||!1,svgFactory:new n.DOMSVGFactory});i.isRenderable&&e.div.appendChild(i.render())}}}},{key:"update",value:function(e){for(var t=0,r=e.annotations.length;t<r;t++){var n=e.annotations[t],o=e.div.querySelector('[data-annotation-id="'+n.id+'"]');o&&(o.style.transform="matrix("+e.viewport.transform.join(",")+")")}e.div.removeAttribute("hidden")}}]),e}();t.AnnotationLayer=q},function(e,n,i){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.SVGGraphics=void 0;var a,s=i(1),u=i(151),l=(a=i(4))&&a.__esModule?a:{default:a},c=function(){throw new Error("Not implemented: SVGGraphics")};n.SVGGraphics=c;var f={fontStyle:"normal",fontWeight:"normal",fillColor:"#000000"},h=function(){for(var e=new Uint8Array([137,80,78,71,13,10,26,10]),n=12,i=new Int32Array(256),a=0;a<256;a++){for(var u=a,c=0;c<8;c++)u=1&u?3988292384^u>>1&2147483647:u>>1&2147483647;i[a]=u}function f(e,t,r,n){var o=n,a=t.length;r[o]=a>>24&255,r[o+1]=a>>16&255,r[o+2]=a>>8&255,r[o+3]=255&a,r[o+=4]=255&e.charCodeAt(0),r[o+1]=255&e.charCodeAt(1),r[o+2]=255&e.charCodeAt(2),r[o+3]=255&e.charCodeAt(3),o+=4,r.set(t,o);var s=function(e,t,r){for(var n=-1,o=t;o<r;o++){var a=255&(n^e[o]);n=n>>>8^i[a]}return-1^n}(r,n+4,o+=t.length);r[o]=s>>24&255,r[o+1]=s>>16&255,r[o+2]=s>>8&255,r[o+3]=255&s}function h(e){var t=e.length,r=Math.ceil(t/65535),n=new Uint8Array(2+t+5*r+4),o=0;n[o++]=120,n[o++]=156;for(var i=0;t>65535;)n[o++]=0,n[o++]=255,n[o++]=255,n[o++]=0,n[o++]=0,n.set(e.subarray(i,i+65535),o),o+=65535,i+=65535,t-=65535;n[o++]=1,n[o++]=255&t,n[o++]=t>>8&255,n[o++]=255&~t,n[o++]=(65535&~t)>>8&255,n.set(e.subarray(i),o),o+=e.length-i;var a=function(e,t,r){for(var n=1,o=0,i=t;i<r;++i)o=(o+(n=(n+(255&e[i]))%65521))%65521;return o<<16|n}(e,0,e.length);return n[o++]=a>>24&255,n[o++]=a>>16&255,n[o++]=a>>8&255,n[o++]=255&a,n}function d(i,a,u,c){var d,p,y,v=i.width,m=i.height,g=i.data;switch(a){case s.ImageKind.GRAYSCALE_1BPP:p=0,d=1,y=v+7>>3;break;case s.ImageKind.RGB_24BPP:p=2,d=8,y=3*v;break;case s.ImageKind.RGBA_32BPP:p=6,d=8,y=4*v;break;default:throw new Error("invalid format")}var b,_,w=new Uint8Array((1+y)*m),S=0,P=0;for(b=0;b<m;++b)w[S++]=0,w.set(g.subarray(P,P+y),S),P+=y,S+=y;if(a===s.ImageKind.GRAYSCALE_1BPP&&c)for(S=0,b=0;b<m;b++)for(S++,_=0;_<y;_++)w[S++]^=255;var A=new Uint8Array([v>>24&255,v>>16&255,v>>8&255,255&v,m>>24&255,m>>16&255,m>>8&255,255&m,d,p,0,0,0]),k=function(e){if(!(0,l.default)())return h(e);try{var n;n=parseInt(o.versions.node)>=8?e:new t(e);var i=r(58).deflateSync(n,{level:9});return i instanceof Uint8Array?i:new Uint8Array(i)}catch(e){(0,s.warn)("Not compressing PNG because zlib.deflateSync is unavailable: "+e)}return h(e)}(w),E=e.length+3*n+A.length+k.length,x=new Uint8Array(E),O=0;return x.set(e,O),f("IHDR",A,x,O+=e.length),f("IDATA",k,x,O+=n+A.length),O+=n+k.length,f("IEND",new Uint8Array(0),x,O),(0,s.createObjectURL)(x,"image/png",u)}return function(e,t,r){return d(e,void 0===e.kind?s.ImageKind.GRAYSCALE_1BPP:e.kind,t,r)}}(),d=function(){function e(){this.fontSizeScale=1,this.fontWeight=f.fontWeight,this.fontSize=0,this.textMatrix=s.IDENTITY_MATRIX,this.fontMatrix=s.FONT_IDENTITY_MATRIX,this.leading=0,this.textRenderingMode=s.TextRenderingMode.FILL,this.x=0,this.y=0,this.lineX=0,this.lineY=0,this.charSpacing=0,this.wordSpacing=0,this.textHScale=1,this.textRise=0,this.fillColor=f.fillColor,this.strokeColor="#000000",this.fillAlpha=1,this.strokeAlpha=1,this.lineWidth=1,this.lineJoin="",this.lineCap="",this.miterLimit=0,this.dashArray=[],this.dashPhase=0,this.dependencies=[],this.activeClipUrl=null,this.clipGroup=null,this.maskId=""}return e.prototype={clone:function(){return Object.create(this)},setCurrentPoint:function(e,t){this.x=e,this.y=t}},e}();n.SVGGraphics=c=function(){function e(e){if(Number.isInteger(e))return e.toString();var t=e.toFixed(10),r=t.length-1;if("0"!==t[r])return t;do{r--}while("0"===t[r]);return t.substring(0,"."===t[r]?r:r+1)}function t(t){if(0===t[4]&&0===t[5]){if(0===t[1]&&0===t[2])return 1===t[0]&&1===t[3]?"":"scale("+e(t[0])+" "+e(t[3])+")";if(t[0]===t[3]&&t[1]===-t[2])return"rotate("+e(180*Math.acos(t[0])/Math.PI)+")"}else if(1===t[0]&&0===t[1]&&0===t[2]&&1===t[3])return"translate("+e(t[4])+" "+e(t[5])+")";return"matrix("+e(t[0])+" "+e(t[1])+" "+e(t[2])+" "+e(t[3])+" "+e(t[4])+" "+e(t[5])+")"}function r(e,t,r){this.svgFactory=new u.DOMSVGFactory,this.current=new d,this.transformMatrix=s.IDENTITY_MATRIX,this.transformStack=[],this.extraStack=[],this.commonObjs=e,this.objs=t,this.pendingClip=null,this.pendingEOFill=!1,this.embedFonts=!1,this.embeddedFonts=Object.create(null),this.cssStyle=null,this.forceDataSchema=!!r}var n="http://www.w3.org/1999/xlink",o=["butt","round","square"],i=["miter","round","bevel"],a=0,l=0;return r.prototype={save:function(){this.transformStack.push(this.transformMatrix);var e=this.current;this.extraStack.push(e),this.current=e.clone()},restore:function(){this.transformMatrix=this.transformStack.pop(),this.current=this.extraStack.pop(),this.pendingClip=null,this.tgrp=null},group:function(e){this.save(),this.executeOpTree(e),this.restore()},loadDependencies:function(e){for(var t=this,r=e.fnArray,n=r.length,o=e.argsArray,i=0;i<n;i++)if(s.OPS.dependency===r[i])for(var a=o[i],u=0,l=a.length;u<l;u++){var c,f=a[u],h="g_"===f.substring(0,2);c=new Promise(h?function(e){t.commonObjs.get(f,e)}:function(e){t.objs.get(f,e)}),this.current.dependencies.push(c)}return Promise.all(this.current.dependencies)},transform:function(e,t,r,n,o,i){var a=[e,t,r,n,o,i];this.transformMatrix=s.Util.transform(this.transformMatrix,a),this.tgrp=null},getSVG:function(e,t){var r=this;this.viewport=t;var n=this._initialize(t);return this.loadDependencies(e).then((function(){r.transformMatrix=s.IDENTITY_MATRIX;var t=r.convertOpList(e);return r.executeOpTree(t),n}))},convertOpList:function(e){var t=e.argsArray,r=e.fnArray,n=r.length,o=[],i=[];for(var a in s.OPS)o[s.OPS[a]]=a;for(var u=0;u<n;u++){var l=r[u];i.push({fnId:l,fn:o[l],args:t[u]})}return function(e){for(var t=[],r=[],n=e.length,o=0;o<n;o++)"save"!==e[o].fn?"restore"===e[o].fn?t=r.pop():t.push(e[o]):(t.push({fnId:92,fn:"group",items:[]}),r.push(t),t=t[t.length-1].items);return t}(i)},executeOpTree:function(e){for(var t=e.length,r=0;r<t;r++){var n=e[r].fn,o=e[r].fnId,i=e[r].args;switch(0|o){case s.OPS.beginText:this.beginText();break;case s.OPS.dependency:break;case s.OPS.setLeading:this.setLeading(i);break;case s.OPS.setLeadingMoveText:this.setLeadingMoveText(i[0],i[1]);break;case s.OPS.setFont:this.setFont(i);break;case s.OPS.showText:case s.OPS.showSpacedText:this.showText(i[0]);break;case s.OPS.endText:this.endText();break;case s.OPS.moveText:this.moveText(i[0],i[1]);break;case s.OPS.setCharSpacing:this.setCharSpacing(i[0]);break;case s.OPS.setWordSpacing:this.setWordSpacing(i[0]);break;case s.OPS.setHScale:this.setHScale(i[0]);break;case s.OPS.setTextMatrix:this.setTextMatrix(i[0],i[1],i[2],i[3],i[4],i[5]);break;case s.OPS.setTextRise:this.setTextRise(i[0]);break;case s.OPS.setTextRenderingMode:this.setTextRenderingMode(i[0]);break;case s.OPS.setLineWidth:this.setLineWidth(i[0]);break;case s.OPS.setLineJoin:this.setLineJoin(i[0]);break;case s.OPS.setLineCap:this.setLineCap(i[0]);break;case s.OPS.setMiterLimit:this.setMiterLimit(i[0]);break;case s.OPS.setFillRGBColor:this.setFillRGBColor(i[0],i[1],i[2]);break;case s.OPS.setStrokeRGBColor:this.setStrokeRGBColor(i[0],i[1],i[2]);break;case s.OPS.setDash:this.setDash(i[0],i[1]);break;case s.OPS.setGState:this.setGState(i[0]);break;case s.OPS.fill:this.fill();break;case s.OPS.eoFill:this.eoFill();break;case s.OPS.stroke:this.stroke();break;case s.OPS.fillStroke:this.fillStroke();break;case s.OPS.eoFillStroke:this.eoFillStroke();break;case s.OPS.clip:this.clip("nonzero");break;case s.OPS.eoClip:this.clip("evenodd");break;case s.OPS.paintSolidColorImageMask:this.paintSolidColorImageMask();break;case s.OPS.paintJpegXObject:this.paintJpegXObject(i[0],i[1],i[2]);break;case s.OPS.paintImageXObject:this.paintImageXObject(i[0]);break;case s.OPS.paintInlineImageXObject:this.paintInlineImageXObject(i[0]);break;case s.OPS.paintImageMaskXObject:this.paintImageMaskXObject(i[0]);break;case s.OPS.paintFormXObjectBegin:this.paintFormXObjectBegin(i[0],i[1]);break;case s.OPS.paintFormXObjectEnd:this.paintFormXObjectEnd();break;case s.OPS.closePath:this.closePath();break;case s.OPS.closeStroke:this.closeStroke();break;case s.OPS.closeFillStroke:this.closeFillStroke();break;case s.OPS.closeEOFillStroke:this.closeEOFillStroke();break;case s.OPS.nextLine:this.nextLine();break;case s.OPS.transform:this.transform(i[0],i[1],i[2],i[3],i[4],i[5]);break;case s.OPS.constructPath:this.constructPath(i[0],i[1]);break;case s.OPS.endPath:this.endPath();break;case 92:this.group(e[r].items);break;default:(0,s.warn)("Unimplemented operator "+n)}}},setWordSpacing:function(e){this.current.wordSpacing=e},setCharSpacing:function(e){this.current.charSpacing=e},nextLine:function(){this.moveText(0,this.current.leading)},setTextMatrix:function(t,r,n,o,i,a){var s=this.current;this.current.textMatrix=this.current.lineMatrix=[t,r,n,o,i,a],this.current.x=this.current.lineX=0,this.current.y=this.current.lineY=0,s.xcoords=[],s.tspan=this.svgFactory.createElement("svg:tspan"),s.tspan.setAttributeNS(null,"font-family",s.fontFamily),s.tspan.setAttributeNS(null,"font-size",e(s.fontSize)+"px"),s.tspan.setAttributeNS(null,"y",e(-s.y)),s.txtElement=this.svgFactory.createElement("svg:text"),s.txtElement.appendChild(s.tspan)},beginText:function(){this.current.x=this.current.lineX=0,this.current.y=this.current.lineY=0,this.current.textMatrix=s.IDENTITY_MATRIX,this.current.lineMatrix=s.IDENTITY_MATRIX,this.current.tspan=this.svgFactory.createElement("svg:tspan"),this.current.txtElement=this.svgFactory.createElement("svg:text"),this.current.txtgrp=this.svgFactory.createElement("svg:g"),this.current.xcoords=[]},moveText:function(t,r){var n=this.current;this.current.x=this.current.lineX+=t,this.current.y=this.current.lineY+=r,n.xcoords=[],n.tspan=this.svgFactory.createElement("svg:tspan"),n.tspan.setAttributeNS(null,"font-family",n.fontFamily),n.tspan.setAttributeNS(null,"font-size",e(n.fontSize)+"px"),n.tspan.setAttributeNS(null,"y",e(-n.y))},showText:function(r){var n=this.current,o=n.font,i=n.fontSize;if(0!==i){var a,u=n.charSpacing,l=n.wordSpacing,c=n.fontDirection,h=n.textHScale*c,d=r.length,p=o.vertical,y=i*n.fontMatrix[0],v=0;for(a=0;a<d;++a){var m=r[a];if(null!==m)if((0,s.isNum)(m))v+=-m*i*.001;else{var g=m.width,b=m.fontChar,_=g*y+((m.isSpace?l:0)+u)*c;m.isInFont||o.missingFile?(n.xcoords.push(n.x+v*h),n.tspan.textContent+=b,v+=_):v+=_}else v+=c*l}p?n.y-=v*h:n.x+=v*h,n.tspan.setAttributeNS(null,"x",n.xcoords.map(e).join(" ")),n.tspan.setAttributeNS(null,"y",e(-n.y)),n.tspan.setAttributeNS(null,"font-family",n.fontFamily),n.tspan.setAttributeNS(null,"font-size",e(n.fontSize)+"px"),n.fontStyle!==f.fontStyle&&n.tspan.setAttributeNS(null,"font-style",n.fontStyle),n.fontWeight!==f.fontWeight&&n.tspan.setAttributeNS(null,"font-weight",n.fontWeight);var w=n.textRenderingMode&s.TextRenderingMode.FILL_STROKE_MASK;w===s.TextRenderingMode.FILL||w===s.TextRenderingMode.FILL_STROKE?(n.fillColor!==f.fillColor&&n.tspan.setAttributeNS(null,"fill",n.fillColor),n.fillAlpha<1&&n.tspan.setAttributeNS(null,"fill-opacity",n.fillAlpha)):n.textRenderingMode===s.TextRenderingMode.ADD_TO_PATH?n.tspan.setAttributeNS(null,"fill","transparent"):n.tspan.setAttributeNS(null,"fill","none"),w!==s.TextRenderingMode.STROKE&&w!==s.TextRenderingMode.FILL_STROKE||this._setStrokeAttributes(n.tspan);var S=n.textMatrix;0!==n.textRise&&((S=S.slice())[5]+=n.textRise),n.txtElement.setAttributeNS(null,"transform",t(S)+" scale(1, -1)"),n.txtElement.setAttributeNS("http://www.w3.org/XML/1998/namespace","xml:space","preserve"),n.txtElement.appendChild(n.tspan),n.txtgrp.appendChild(n.txtElement),this._ensureTransformGroup().appendChild(n.txtElement)}},setLeadingMoveText:function(e,t){this.setLeading(-t),this.moveText(e,t)},addFontStyle:function(e){this.cssStyle||(this.cssStyle=this.svgFactory.createElement("svg:style"),this.cssStyle.setAttributeNS(null,"type","text/css"),this.defs.appendChild(this.cssStyle));var t=(0,s.createObjectURL)(e.data,e.mimetype,this.forceDataSchema);this.cssStyle.textContent+='@font-face { font-family: "'+e.loadedName+'"; src: url('+t+"); }\n"},setFont:function(t){var r=this.current,n=this.commonObjs.get(t[0]),o=t[1];this.current.font=n,this.embedFonts&&n.data&&!this.embeddedFonts[n.loadedName]&&(this.addFontStyle(n),this.embeddedFonts[n.loadedName]=n),r.fontMatrix=n.fontMatrix?n.fontMatrix:s.FONT_IDENTITY_MATRIX;var i=n.black?n.bold?"bolder":"bold":n.bold?"bold":"normal",a=n.italic?"italic":"normal";o<0?(o=-o,r.fontDirection=-1):r.fontDirection=1,r.fontSize=o,r.fontFamily=n.loadedName,r.fontWeight=i,r.fontStyle=a,r.tspan=this.svgFactory.createElement("svg:tspan"),r.tspan.setAttributeNS(null,"y",e(-r.y)),r.xcoords=[]},endText:function(){var e=this.current;e.textRenderingMode&s.TextRenderingMode.ADD_TO_PATH_FLAG&&e.txtElement&&e.txtElement.hasChildNodes()&&(e.element=e.txtElement,this.clip("nonzero"),this.endPath())},setLineWidth:function(e){e>0&&(this.current.lineWidth=e)},setLineCap:function(e){this.current.lineCap=o[e]},setLineJoin:function(e){this.current.lineJoin=i[e]},setMiterLimit:function(e){this.current.miterLimit=e},setStrokeAlpha:function(e){this.current.strokeAlpha=e},setStrokeRGBColor:function(e,t,r){var n=s.Util.makeCssRgb(e,t,r);this.current.strokeColor=n},setFillAlpha:function(e){this.current.fillAlpha=e},setFillRGBColor:function(e,t,r){var n=s.Util.makeCssRgb(e,t,r);this.current.fillColor=n,this.current.tspan=this.svgFactory.createElement("svg:tspan"),this.current.xcoords=[]},setDash:function(e,t){this.current.dashArray=e,this.current.dashPhase=t},constructPath:function(t,r){var n=this.current,o=n.x,i=n.y;n.path=this.svgFactory.createElement("svg:path");for(var a=[],u=t.length,l=0,c=0;l<u;l++)switch(0|t[l]){case s.OPS.rectangle:o=r[c++],i=r[c++];var f=o+r[c++],h=i+r[c++];a.push("M",e(o),e(i),"L",e(f),e(i),"L",e(f),e(h),"L",e(o),e(h),"Z");break;case s.OPS.moveTo:o=r[c++],i=r[c++],a.push("M",e(o),e(i));break;case s.OPS.lineTo:o=r[c++],i=r[c++],a.push("L",e(o),e(i));break;case s.OPS.curveTo:o=r[c+4],i=r[c+5],a.push("C",e(r[c]),e(r[c+1]),e(r[c+2]),e(r[c+3]),e(o),e(i)),c+=6;break;case s.OPS.curveTo2:o=r[c+2],i=r[c+3],a.push("C",e(o),e(i),e(r[c]),e(r[c+1]),e(r[c+2]),e(r[c+3])),c+=4;break;case s.OPS.curveTo3:o=r[c+2],i=r[c+3],a.push("C",e(r[c]),e(r[c+1]),e(o),e(i),e(o),e(i)),c+=4;break;case s.OPS.closePath:a.push("Z")}n.path.setAttributeNS(null,"d",a.join(" ")),n.path.setAttributeNS(null,"fill","none"),this._ensureTransformGroup().appendChild(n.path),n.element=n.path,n.setCurrentPoint(o,i)},endPath:function(){if(this.pendingClip){var e=this.current,r="clippath"+a;a++;var n=this.svgFactory.createElement("svg:clipPath");n.setAttributeNS(null,"id",r),n.setAttributeNS(null,"transform",t(this.transformMatrix));var o=e.element.cloneNode(!0);"evenodd"===this.pendingClip?o.setAttributeNS(null,"clip-rule","evenodd"):o.setAttributeNS(null,"clip-rule","nonzero"),this.pendingClip=null,n.appendChild(o),this.defs.appendChild(n),e.activeClipUrl&&(e.clipGroup=null,this.extraStack.forEach((function(e){e.clipGroup=null})),n.setAttributeNS(null,"clip-path",e.activeClipUrl)),e.activeClipUrl="url(#"+r+")",this.tgrp=null}},clip:function(e){this.pendingClip=e},closePath:function(){var e=this.current;if(e.path){var t=e.path.getAttributeNS(null,"d");t+="Z",e.path.setAttributeNS(null,"d",t)}},setLeading:function(e){this.current.leading=-e},setTextRise:function(e){this.current.textRise=e},setTextRenderingMode:function(e){this.current.textRenderingMode=e},setHScale:function(e){this.current.textHScale=e/100},setGState:function(e){for(var t=0,r=e.length;t<r;t++){var n=e[t],o=n[0],i=n[1];switch(o){case"LW":this.setLineWidth(i);break;case"LC":this.setLineCap(i);break;case"LJ":this.setLineJoin(i);break;case"ML":this.setMiterLimit(i);break;case"D":this.setDash(i[0],i[1]);break;case"Font":this.setFont(i);break;case"CA":this.setStrokeAlpha(i);break;case"ca":this.setFillAlpha(i);break;default:(0,s.warn)("Unimplemented graphic state "+o)}}},fill:function(){var e=this.current;e.element&&(e.element.setAttributeNS(null,"fill",e.fillColor),e.element.setAttributeNS(null,"fill-opacity",e.fillAlpha),this.endPath())},stroke:function(){var e=this.current;e.element&&(this._setStrokeAttributes(e.element),e.element.setAttributeNS(null,"fill","none"),this.endPath())},_setStrokeAttributes:function(t){var r=this.current;t.setAttributeNS(null,"stroke",r.strokeColor),t.setAttributeNS(null,"stroke-opacity",r.strokeAlpha),t.setAttributeNS(null,"stroke-miterlimit",e(r.miterLimit)),t.setAttributeNS(null,"stroke-linecap",r.lineCap),t.setAttributeNS(null,"stroke-linejoin",r.lineJoin),t.setAttributeNS(null,"stroke-width",e(r.lineWidth)+"px"),t.setAttributeNS(null,"stroke-dasharray",r.dashArray.map(e).join(" ")),t.setAttributeNS(null,"stroke-dashoffset",e(r.dashPhase)+"px")},eoFill:function(){this.current.element&&this.current.element.setAttributeNS(null,"fill-rule","evenodd"),this.fill()},fillStroke:function(){this.stroke(),this.fill()},eoFillStroke:function(){this.current.element&&this.current.element.setAttributeNS(null,"fill-rule","evenodd"),this.fillStroke()},closeStroke:function(){this.closePath(),this.stroke()},closeFillStroke:function(){this.closePath(),this.fillStroke()},closeEOFillStroke:function(){this.closePath(),this.eoFillStroke()},paintSolidColorImageMask:function(){var e=this.current,t=this.svgFactory.createElement("svg:rect");t.setAttributeNS(null,"x","0"),t.setAttributeNS(null,"y","0"),t.setAttributeNS(null,"width","1px"),t.setAttributeNS(null,"height","1px"),t.setAttributeNS(null,"fill",e.fillColor),this._ensureTransformGroup().appendChild(t)},paintJpegXObject:function(t,r,o){var i=this.objs.get(t),a=this.svgFactory.createElement("svg:image");a.setAttributeNS(n,"xlink:href",i.src),a.setAttributeNS(null,"width",e(r)),a.setAttributeNS(null,"height",e(o)),a.setAttributeNS(null,"x","0"),a.setAttributeNS(null,"y",e(-o)),a.setAttributeNS(null,"transform","scale("+e(1/r)+" "+e(-1/o)+")"),this._ensureTransformGroup().appendChild(a)},paintImageXObject:function(e){var t=this.objs.get(e);t?this.paintInlineImageXObject(t):(0,s.warn)("Dependent image isn't ready yet")},paintInlineImageXObject:function(t,r){var o=t.width,i=t.height,a=h(t,this.forceDataSchema,!!r),s=this.svgFactory.createElement("svg:rect");s.setAttributeNS(null,"x","0"),s.setAttributeNS(null,"y","0"),s.setAttributeNS(null,"width",e(o)),s.setAttributeNS(null,"height",e(i)),this.current.element=s,this.clip("nonzero");var u=this.svgFactory.createElement("svg:image");u.setAttributeNS(n,"xlink:href",a),u.setAttributeNS(null,"x","0"),u.setAttributeNS(null,"y",e(-i)),u.setAttributeNS(null,"width",e(o)+"px"),u.setAttributeNS(null,"height",e(i)+"px"),u.setAttributeNS(null,"transform","scale("+e(1/o)+" "+e(-1/i)+")"),r?r.appendChild(u):this._ensureTransformGroup().appendChild(u)},paintImageMaskXObject:function(t){var r=this.current,n=t.width,o=t.height,i=r.fillColor;r.maskId="mask"+l++;var a=this.svgFactory.createElement("svg:mask");a.setAttributeNS(null,"id",r.maskId);var s=this.svgFactory.createElement("svg:rect");s.setAttributeNS(null,"x","0"),s.setAttributeNS(null,"y","0"),s.setAttributeNS(null,"width",e(n)),s.setAttributeNS(null,"height",e(o)),s.setAttributeNS(null,"fill",i),s.setAttributeNS(null,"mask","url(#"+r.maskId+")"),this.defs.appendChild(a),this._ensureTransformGroup().appendChild(s),this.paintInlineImageXObject(t,a)},paintFormXObjectBegin:function(t,r){if(Array.isArray(t)&&6===t.length&&this.transform(t[0],t[1],t[2],t[3],t[4],t[5]),r){var n=r[2]-r[0],o=r[3]-r[1],i=this.svgFactory.createElement("svg:rect");i.setAttributeNS(null,"x",r[0]),i.setAttributeNS(null,"y",r[1]),i.setAttributeNS(null,"width",e(n)),i.setAttributeNS(null,"height",e(o)),this.current.element=i,this.clip("nonzero"),this.endPath()}},paintFormXObjectEnd:function(){},_initialize:function(e){var r=this.svgFactory.create(e.width,e.height),n=this.svgFactory.createElement("svg:defs");r.appendChild(n),this.defs=n;var o=this.svgFactory.createElement("svg:g");return o.setAttributeNS(null,"transform",t(e.transform)),r.appendChild(o),this.svg=o,r},_ensureClipGroup:function(){if(!this.current.clipGroup){var e=this.svgFactory.createElement("svg:g");e.setAttributeNS(null,"clip-path",this.current.activeClipUrl),this.svg.appendChild(e),this.current.clipGroup=e}return this.current.clipGroup},_ensureTransformGroup:function(){return this.tgrp||(this.tgrp=this.svgFactory.createElement("svg:g"),this.tgrp.setAttributeNS(null,"transform",t(this.transformMatrix)),this.current.activeClipUrl?this._ensureClipGroup().appendChild(this.tgrp):this.svg.appendChild(this.tgrp)),this.tgrp}},r}()},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.PDFNodeStream=void 0;var o,i=(o=n(147))&&o.__esModule?o:{default:o},a=n(1),s=n(166);function u(e){return(u="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function l(e,t){return!t||"object"!==u(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function c(e){return(c=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function f(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&h(e,t)}function h(e,t){return(h=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function d(e,t,r,n,o,i,a){try{var s=e[i](a),u=s.value}catch(e){return void r(e)}s.done?t(u):Promise.resolve(u).then(n,o)}function p(e){return function(){var t=this,r=arguments;return new Promise((function(n,o){var i=e.apply(t,r);function a(e){d(i,n,o,a,s,"next",e)}function s(e){d(i,n,o,a,s,"throw",e)}a(void 0)}))}}function y(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function v(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function m(e,t,r){return t&&v(e.prototype,t),r&&v(e,r),e}var g=r(59),b=r(60),_=r(61),w=r(62),S=/^file:\/\/\/[a-zA-Z]:\//,P=function(){function e(t){var r,n;y(this,e),this.source=t,this.url=(r=t.url,"file:"===(n=w.parse(r)).protocol||n.host?n:/^[a-z]:[/\\]/i.test(r)?w.parse("file:///".concat(r)):(n.host||(n.protocol="file:"),n)),this.isHttp="http:"===this.url.protocol||"https:"===this.url.protocol,this.isFsUrl="file:"===this.url.protocol,this.httpHeaders=this.isHttp&&t.httpHeaders||{},this._fullRequest=null,this._rangeRequestReaders=[]}return m(e,[{key:"getFullReader",value:function(){return(0,a.assert)(!this._fullRequest),this._fullRequest=this.isFsUrl?new R(this):new x(this),this._fullRequest}},{key:"getRangeReader",value:function(e,t){var r=this.isFsUrl?new C(this,e,t):new O(this,e,t);return this._rangeRequestReaders.push(r),r}},{key:"cancelAllRequests",value:function(e){this._fullRequest&&this._fullRequest.cancel(e),this._rangeRequestReaders.slice(0).forEach((function(t){t.cancel(e)}))}}]),e}();t.PDFNodeStream=P;var A=function(){function e(t){y(this,e),this._url=t.url,this._done=!1,this._storedError=null,this.onProgress=null;var r=t.source;this._contentLength=r.length,this._loaded=0,this._filename=null,this._disableRange=r.disableRange||!1,this._rangeChunkSize=r.rangeChunkSize,this._rangeChunkSize||this._disableRange||(this._disableRange=!0),this._isStreamingSupported=!r.disableStream,this._isRangeSupported=!r.disableRange,this._readableStream=null,this._readCapability=(0,a.createPromiseCapability)(),this._headersCapability=(0,a.createPromiseCapability)()}var t;return m(e,[{key:"read",value:(t=p(i.default.mark((function e(){var t,r;return i.default.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,this._readCapability.promise;case 2:if(!this._done){e.next=4;break}return e.abrupt("return",{value:void 0,done:!0});case 4:if(!this._storedError){e.next=6;break}throw this._storedError;case 6:if(null!==(t=this._readableStream.read())){e.next=10;break}return this._readCapability=(0,a.createPromiseCapability)(),e.abrupt("return",this.read());case 10:return this._loaded+=t.length,this.onProgress&&this.onProgress({loaded:this._loaded,total:this._contentLength}),r=new Uint8Array(t).buffer,e.abrupt("return",{value:r,done:!1});case 14:case"end":return e.stop()}}),e,this)}))),function(){return t.apply(this,arguments)})},{key:"cancel",value:function(e){this._readableStream?this._readableStream.destroy(e):this._error(e)}},{key:"_error",value:function(e){this._storedError=e,this._readCapability.resolve()}},{key:"_setReadableStream",value:function(e){var t=this;this._readableStream=e,e.on("readable",(function(){t._readCapability.resolve()})),e.on("end",(function(){e.destroy(),t._done=!0,t._readCapability.resolve()})),e.on("error",(function(e){t._error(e)})),!this._isStreamingSupported&&this._isRangeSupported&&this._error(new a.AbortException("streaming is disabled")),this._storedError&&this._readableStream.destroy(this._storedError)}},{key:"headersReady",get:function(){return this._headersCapability.promise}},{key:"filename",get:function(){return this._filename}},{key:"contentLength",get:function(){return this._contentLength}},{key:"isRangeSupported",get:function(){return this._isRangeSupported}},{key:"isStreamingSupported",get:function(){return this._isStreamingSupported}}]),e}(),k=function(){function e(t){y(this,e),this._url=t.url,this._done=!1,this._storedError=null,this.onProgress=null,this._loaded=0,this._readableStream=null,this._readCapability=(0,a.createPromiseCapability)();var r=t.source;this._isStreamingSupported=!r.disableStream}var t;return m(e,[{key:"read",value:(t=p(i.default.mark((function e(){var t,r;return i.default.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,this._readCapability.promise;case 2:if(!this._done){e.next=4;break}return e.abrupt("return",{value:void 0,done:!0});case 4:if(!this._storedError){e.next=6;break}throw this._storedError;case 6:if(null!==(t=this._readableStream.read())){e.next=10;break}return this._readCapability=(0,a.createPromiseCapability)(),e.abrupt("return",this.read());case 10:return this._loaded+=t.length,this.onProgress&&this.onProgress({loaded:this._loaded}),r=new Uint8Array(t).buffer,e.abrupt("return",{value:r,done:!1});case 14:case"end":return e.stop()}}),e,this)}))),function(){return t.apply(this,arguments)})},{key:"cancel",value:function(e){this._readableStream?this._readableStream.destroy(e):this._error(e)}},{key:"_error",value:function(e){this._storedError=e,this._readCapability.resolve()}},{key:"_setReadableStream",value:function(e){var t=this;this._readableStream=e,e.on("readable",(function(){t._readCapability.resolve()})),e.on("end",(function(){e.destroy(),t._done=!0,t._readCapability.resolve()})),e.on("error",(function(e){t._error(e)})),this._storedError&&this._readableStream.destroy(this._storedError)}},{key:"isStreamingSupported",get:function(){return this._isStreamingSupported}}]),e}();function E(e,t){return{protocol:e.protocol,auth:e.auth,host:e.hostname,port:e.port,path:e.path,method:"GET",headers:t}}var x=function(e){function t(e){var r;y(this,t);var n=function(t){if(404===t.statusCode){var n=new a.MissingPDFException('Missing PDF "'.concat(r._url,'".'));return r._storedError=n,void r._headersCapability.reject(n)}r._headersCapability.resolve(),r._setReadableStream(t);var o=function(e){return r._readableStream.headers[e.toLowerCase()]},i=(0,s.validateRangeRequestCapabilities)({getResponseHeader:o,isHttp:e.isHttp,rangeChunkSize:r._rangeChunkSize,disableRange:r._disableRange}),u=i.allowRangeRequests,l=i.suggestedLength;r._isRangeSupported=u,r._contentLength=l||r._contentLength,r._filename=(0,s.extractFilenameFromHeader)(o)};return(r=l(this,c(t).call(this,e)))._request=null,"http:"===r._url.protocol?r._request=b.request(E(r._url,e.httpHeaders),n):r._request=_.request(E(r._url,e.httpHeaders),n),r._request.on("error",(function(e){r._storedError=e,r._headersCapability.reject(e)})),r._request.end(),r}return f(t,e),t}(A),O=function(e){function t(e,r,n){var o;for(var i in y(this,t),(o=l(this,c(t).call(this,e)))._httpHeaders={},e.httpHeaders){var s=e.httpHeaders[i];void 0!==s&&(o._httpHeaders[i]=s)}o._httpHeaders.Range="bytes=".concat(r,"-").concat(n-1);var u=function(e){if(404!==e.statusCode)o._setReadableStream(e);else{var t=new a.MissingPDFException('Missing PDF "'.concat(o._url,'".'));o._storedError=t}};return o._request=null,"http:"===o._url.protocol?o._request=b.request(E(o._url,o._httpHeaders),u):o._request=_.request(E(o._url,o._httpHeaders),u),o._request.on("error",(function(e){o._storedError=e})),o._request.end(),o}return f(t,e),t}(k),R=function(e){function t(e){var r;y(this,t),r=l(this,c(t).call(this,e));var n=decodeURIComponent(r._url.path);return S.test(r._url.href)&&(n=n.replace(/^\//,"")),g.lstat(n,(function(e,t){if(e)return"ENOENT"===e.code&&(e=new a.MissingPDFException('Missing PDF "'.concat(n,'".'))),r._storedError=e,void r._headersCapability.reject(e);r._contentLength=t.size,r._setReadableStream(g.createReadStream(n)),r._headersCapability.resolve()})),r}return f(t,e),t}(A),C=function(e){function t(e,r,n){var o;y(this,t),o=l(this,c(t).call(this,e));var i=decodeURIComponent(o._url.path);return S.test(o._url.href)&&(i=i.replace(/^\//,"")),o._setReadableStream(g.createReadStream(i,{start:r,end:n-1})),o}return f(t,e),t}(k)},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.createResponseStatusError=function(e,t){return 404===e||0===e&&/^file:/.test(t)?new n.MissingPDFException('Missing PDF "'+t+'".'):new n.UnexpectedResponseException("Unexpected server response ("+e+') while retrieving PDF "'+t+'".',e)},t.extractFilenameFromHeader=function(e){var t=e("Content-Disposition");if(t){var r=(0,o.getFilenameFromContentDispositionHeader)(t);if(/\.pdf$/i.test(r))return r}return null},t.validateRangeRequestCapabilities=function(e){var t=e.getResponseHeader,r=e.isHttp,o=e.rangeChunkSize,i=e.disableRange;(0,n.assert)(o>0,"Range chunk size must be larger than zero");var a={allowRangeRequests:!1,suggestedLength:void 0},s=parseInt(t("Content-Length"),10);return Number.isInteger(s)?(a.suggestedLength=s,s<=2*o?a:i||!r?a:"bytes"!==t("Accept-Ranges")?a:"identity"!==(t("Content-Encoding")||"identity")?a:(a.allowRangeRequests=!0,a)):a},t.validateResponseStatus=function(e){return 200===e||206===e};var n=r(1),o=r(167)},function(e,t,r){"use strict";function n(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var r=[],n=!0,o=!1,i=void 0;try{for(var a,s=e[Symbol.iterator]();!(n=(a=s.next()).done)&&(r.push(a.value),!t||r.length!==t);n=!0);}catch(e){o=!0,i=e}finally{try{n||null==s.return||s.return()}finally{if(o)throw i}}return r}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}Object.defineProperty(t,"__esModule",{value:!0}),t.getFilenameFromContentDispositionHeader=function(e){var t=!0,r=a("filename\\*","i").exec(e);if(r){var o=l(r=r[1]);return u(o=f(o=c(o=unescape(o))))}if(r=function(e){for(var t,r=[],o=a("filename\\*((?!0\\d)\\d+)(\\*?)","ig");null!==(t=o.exec(e));){var i=n(t,4),s=i[1],u=i[2],f=i[3];if((s=parseInt(s,10))in r){if(0===s)break}else r[s]=[u,f]}var h=[];for(s=0;s<r.length&&s in r;++s){var d=n(r[s],2);u=d[0],f=l(f=d[1]),u&&(f=unescape(f),0===s&&(f=c(f))),h.push(f)}return h.join("")}(e))return u(f(r));if(r=a("filename","i").exec(e)){var i=l(r=r[1]);return u(i=f(i))}function a(e,t){return new RegExp("(?:^|;)\\s*"+e+'\\s*=\\s*([^";\\s][^;\\s]*|"(?:[^"\\\\]|\\\\"?)+"?)',t)}function s(e,r){if(e){if(!/^[\x00-\xFF]+$/.test(r))return r;try{var n=new TextDecoder(e,{fatal:!0}),o=Array.from(r,(function(e){return 255&e.charCodeAt(0)}));r=n.decode(new Uint8Array(o)),t=!1}catch(n){if(/^utf-?8$/i.test(e))try{r=decodeURIComponent(escape(r)),t=!1}catch(e){}}}return r}function u(e){return t&&/[\x80-\xff]/.test(e)&&(e=s("utf-8",e),t&&(e=s("iso-8859-1",e))),e}function l(e){if(e.startsWith('"')){for(var t=e.slice(1).split('\\"'),r=0;r<t.length;++r){var n=t[r].indexOf('"');-1!==n&&(t[r]=t[r].slice(0,n),t.length=r+1),t[r]=t[r].replace(/\\(.)/g,"$1")}e=t.join('"')}return e}function c(e){var t=e.indexOf("'");return-1===t?e:s(e.slice(0,t),e.slice(t+1).replace(/^[^']*'/,""))}function f(e){return!e.startsWith("=?")||/[\x00-\x19\x80-\xff]/.test(e)?e:e.replace(/=\?([\w-]*)\?([QqBb])\?((?:[^?]|\?(?!=))*)\?=/g,(function(e,t,r,n){if("q"===r||"Q"===r)return s(t,n=(n=n.replace(/_/g," ")).replace(/=([0-9a-fA-F]{2})/g,(function(e,t){return String.fromCharCode(parseInt(t,16))})));try{n=atob(n)}catch(e){}return s(t,n)}))}return""}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.PDFFetchStream=void 0;var n,o=(n=r(147))&&n.__esModule?n:{default:n},i=r(1),a=r(166);function s(e,t,r,n,o,i,a){try{var s=e[i](a),u=s.value}catch(e){return void r(e)}s.done?t(u):Promise.resolve(u).then(n,o)}function u(e){return function(){var t=this,r=arguments;return new Promise((function(n,o){var i=e.apply(t,r);function a(e){s(i,n,o,a,u,"next",e)}function u(e){s(i,n,o,a,u,"throw",e)}a(void 0)}))}}function l(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function c(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function f(e,t,r){return t&&c(e.prototype,t),r&&c(e,r),e}function h(e,t,r){return{method:"GET",headers:e,signal:r&&r.signal,mode:"cors",credentials:t?"include":"same-origin",redirect:"follow"}}var d=function(){function e(t){l(this,e),this.source=t,this.isHttp=/^https?:/i.test(t.url),this.httpHeaders=this.isHttp&&t.httpHeaders||{},this._fullRequestReader=null,this._rangeRequestReaders=[]}return f(e,[{key:"getFullReader",value:function(){return(0,i.assert)(!this._fullRequestReader),this._fullRequestReader=new p(this),this._fullRequestReader}},{key:"getRangeReader",value:function(e,t){var r=new y(this,e,t);return this._rangeRequestReaders.push(r),r}},{key:"cancelAllRequests",value:function(e){this._fullRequestReader&&this._fullRequestReader.cancel(e),this._rangeRequestReaders.slice(0).forEach((function(t){t.cancel(e)}))}}]),e}();t.PDFFetchStream=d;var p=function(){function e(t){var r=this;l(this,e),this._stream=t,this._reader=null,this._loaded=0,this._filename=null;var n=t.source;for(var o in this._withCredentials=n.withCredentials,this._contentLength=n.length,this._headersCapability=(0,i.createPromiseCapability)(),this._disableRange=n.disableRange||!1,this._rangeChunkSize=n.rangeChunkSize,this._rangeChunkSize||this._disableRange||(this._disableRange=!0),"undefined"!=typeof AbortController&&(this._abortController=new AbortController),this._isStreamingSupported=!n.disableStream,this._isRangeSupported=!n.disableRange,this._headers=new Headers,this._stream.httpHeaders){var s=this._stream.httpHeaders[o];void 0!==s&&this._headers.append(o,s)}var u=n.url;fetch(u,h(this._headers,this._withCredentials,this._abortController)).then((function(e){if(!(0,a.validateResponseStatus)(e.status))throw(0,a.createResponseStatusError)(e.status,u);r._reader=e.body.getReader(),r._headersCapability.resolve();var t=function(t){return e.headers.get(t)},n=(0,a.validateRangeRequestCapabilities)({getResponseHeader:t,isHttp:r._stream.isHttp,rangeChunkSize:r._rangeChunkSize,disableRange:r._disableRange}),o=n.allowRangeRequests,s=n.suggestedLength;r._isRangeSupported=o,r._contentLength=s||r._contentLength,r._filename=(0,a.extractFilenameFromHeader)(t),!r._isStreamingSupported&&r._isRangeSupported&&r.cancel(new i.AbortException("streaming is disabled"))})).catch(this._headersCapability.reject),this.onProgress=null}var t;return f(e,[{key:"read",value:(t=u(o.default.mark((function e(){var t,r,n,i;return o.default.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,this._headersCapability.promise;case 2:return e.next=4,this._reader.read();case 4:if(t=e.sent,r=t.value,!(n=t.done)){e.next=9;break}return e.abrupt("return",{value:r,done:n});case 9:return this._loaded+=r.byteLength,this.onProgress&&this.onProgress({loaded:this._loaded,total:this._contentLength}),i=new Uint8Array(r).buffer,e.abrupt("return",{value:i,done:!1});case 13:case"end":return e.stop()}}),e,this)}))),function(){return t.apply(this,arguments)})},{key:"cancel",value:function(e){this._reader&&this._reader.cancel(e),this._abortController&&this._abortController.abort()}},{key:"headersReady",get:function(){return this._headersCapability.promise}},{key:"filename",get:function(){return this._filename}},{key:"contentLength",get:function(){return this._contentLength}},{key:"isRangeSupported",get:function(){return this._isRangeSupported}},{key:"isStreamingSupported",get:function(){return this._isStreamingSupported}}]),e}(),y=function(){function e(t,r,n){var o=this;l(this,e),this._stream=t,this._reader=null,this._loaded=0;var s=t.source;for(var u in this._withCredentials=s.withCredentials,this._readCapability=(0,i.createPromiseCapability)(),this._isStreamingSupported=!s.disableStream,"undefined"!=typeof AbortController&&(this._abortController=new AbortController),this._headers=new Headers,this._stream.httpHeaders){var c=this._stream.httpHeaders[u];void 0!==c&&this._headers.append(u,c)}var f=r+"-"+(n-1);this._headers.append("Range","bytes="+f);var d=s.url;fetch(d,h(this._headers,this._withCredentials,this._abortController)).then((function(e){if(!(0,a.validateResponseStatus)(e.status))throw(0,a.createResponseStatusError)(e.status,d);o._readCapability.resolve(),o._reader=e.body.getReader()})),this.onProgress=null}var t;return f(e,[{key:"read",value:(t=u(o.default.mark((function e(){var t,r,n,i;return o.default.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,this._readCapability.promise;case 2:return e.next=4,this._reader.read();case 4:if(t=e.sent,r=t.value,!(n=t.done)){e.next=9;break}return e.abrupt("return",{value:r,done:n});case 9:return this._loaded+=r.byteLength,this.onProgress&&this.onProgress({loaded:this._loaded}),i=new Uint8Array(r).buffer,e.abrupt("return",{value:i,done:!1});case 13:case"end":return e.stop()}}),e,this)}))),function(){return t.apply(this,arguments)})},{key:"cancel",value:function(e){this._reader&&this._reader.cancel(e),this._abortController&&this._abortController.abort()}},{key:"isStreamingSupported",get:function(){return this._isStreamingSupported}}]),e}()},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.PDFNetworkStream=y,t.NetworkManager=c;var n=s(r(147)),o=r(1),i=r(166),a=s(r(3));function s(e){return e&&e.__esModule?e:{default:e}}function u(e,t,r,n,o,i,a){try{var s=e[i](a),u=s.value}catch(e){return void r(e)}s.done?t(u):Promise.resolve(u).then(n,o)}function l(e){return function(){var t=this,r=arguments;return new Promise((function(n,o){var i=e.apply(t,r);function a(e){u(i,n,o,a,s,"next",e)}function s(e){u(i,n,o,a,s,"throw",e)}a(void 0)}))}}function c(e,t){this.url=e,t=t||{},this.isHttp=/^https?:/i.test(e),this.httpHeaders=this.isHttp&&t.httpHeaders||{},this.withCredentials=t.withCredentials||!1,this.getXhr=t.getXhr||function(){return new XMLHttpRequest},this.currXhrId=0,this.pendingRequests=Object.create(null),this.loadedRequests=Object.create(null)}function f(e){var t=e.response;return"string"!=typeof t?t:(0,o.stringToBytes)(t).buffer}var h,d,p=function(){try{var e=new XMLHttpRequest;return e.open("GET",a.default.location.href),e.responseType="moz-chunked-arraybuffer","moz-chunked-arraybuffer"===e.responseType}catch(e){return!1}}();function y(e){this._source=e,this._manager=new c(e.url,{httpHeaders:e.httpHeaders,withCredentials:e.withCredentials}),this._rangeChunkSize=e.rangeChunkSize,this._fullRequestReader=null,this._rangeRequestReaders=[]}function v(e,t){this._manager=e;var r={onHeadersReceived:this._onHeadersReceived.bind(this),onProgressiveData:t.disableStream?null:this._onProgressiveData.bind(this),onDone:this._onDone.bind(this),onError:this._onError.bind(this),onProgress:this._onProgress.bind(this)};this._url=t.url,this._fullRequestId=e.requestFull(r),this._headersReceivedCapability=(0,o.createPromiseCapability)(),this._disableRange=t.disableRange||!1,this._contentLength=t.length,this._rangeChunkSize=t.rangeChunkSize,this._rangeChunkSize||this._disableRange||(this._disableRange=!0),this._isStreamingSupported=!1,this._isRangeSupported=!1,this._cachedChunks=[],this._requests=[],this._done=!1,this._storedError=void 0,this._filename=null,this.onProgress=null}function m(e,t,r){this._manager=e;var n={onDone:this._onDone.bind(this),onProgress:this._onProgress.bind(this)};this._requestId=e.requestRange(t,r,n),this._requests=[],this._queuedChunk=null,this._done=!1,this.onProgress=null,this.onClosed=null}c.prototype={requestRange:function(e,t,r){var n={begin:e,end:t};for(var o in r)n[o]=r[o];return this.request(n)},requestFull:function(e){return this.request(e)},request:function(e){var t=this.getXhr(),r=this.currXhrId++,n=this.pendingRequests[r]={xhr:t};for(var o in t.open("GET",this.url),t.withCredentials=this.withCredentials,this.httpHeaders){var i=this.httpHeaders[o];void 0!==i&&t.setRequestHeader(o,i)}if(this.isHttp&&"begin"in e&&"end"in e){var a=e.begin+"-"+(e.end-1);t.setRequestHeader("Range","bytes="+a),n.expectedStatus=206}else n.expectedStatus=200;return p&&e.onProgressiveData?(t.responseType="moz-chunked-arraybuffer",n.onProgressiveData=e.onProgressiveData,n.mozChunked=!0):t.responseType="arraybuffer",e.onError&&(t.onerror=function(r){e.onError(t.status)}),t.onreadystatechange=this.onStateChange.bind(this,r),t.onprogress=this.onProgress.bind(this,r),n.onHeadersReceived=e.onHeadersReceived,n.onDone=e.onDone,n.onError=e.onError,n.onProgress=e.onProgress,t.send(null),r},onProgress:function(e,t){var r=this.pendingRequests[e];if(r){if(r.mozChunked){var n=f(r.xhr);r.onProgressiveData(n)}var o=r.onProgress;o&&o(t)}},onStateChange:function(e,t){var r=this.pendingRequests[e];if(r){var n=r.xhr;if(n.readyState>=2&&r.onHeadersReceived&&(r.onHeadersReceived(),delete r.onHeadersReceived),4===n.readyState&&e in this.pendingRequests)if(delete this.pendingRequests[e],0===n.status&&this.isHttp)r.onError&&r.onError(n.status);else{var o=n.status||200;if(200===o&&206===r.expectedStatus||o===r.expectedStatus){this.loadedRequests[e]=!0;var i=f(n);if(206===o){var a=n.getResponseHeader("Content-Range"),s=/bytes (\d+)-(\d+)\/(\d+)/.exec(a),u=parseInt(s[1],10);r.onDone({begin:u,chunk:i})}else r.onProgressiveData?r.onDone(null):i?r.onDone({begin:0,chunk:i}):r.onError&&r.onError(n.status)}else r.onError&&r.onError(n.status)}}},hasPendingRequests:function(){for(var e in this.pendingRequests)return!0;return!1},getRequestXhr:function(e){return this.pendingRequests[e].xhr},isStreamingRequest:function(e){return!!this.pendingRequests[e].onProgressiveData},isPendingRequest:function(e){return e in this.pendingRequests},isLoadedRequest:function(e){return e in this.loadedRequests},abortAllRequests:function(){for(var e in this.pendingRequests)this.abortRequest(0|e)},abortRequest:function(e){var t=this.pendingRequests[e].xhr;delete this.pendingRequests[e],t.abort()}},y.prototype={_onRangeRequestReaderClosed:function(e){var t=this._rangeRequestReaders.indexOf(e);t>=0&&this._rangeRequestReaders.splice(t,1)},getFullReader:function(){return(0,o.assert)(!this._fullRequestReader),this._fullRequestReader=new v(this._manager,this._source),this._fullRequestReader},getRangeReader:function(e,t){var r=new m(this._manager,e,t);return r.onClosed=this._onRangeRequestReaderClosed.bind(this),this._rangeRequestReaders.push(r),r},cancelAllRequests:function(e){this._fullRequestReader&&this._fullRequestReader.cancel(e),this._rangeRequestReaders.slice(0).forEach((function(t){t.cancel(e)}))}},v.prototype={_onHeadersReceived:function(){var e=this._fullRequestId,t=this._manager.getRequestXhr(e),r=function(e){return t.getResponseHeader(e)},n=(0,i.validateRangeRequestCapabilities)({getResponseHeader:r,isHttp:this._manager.isHttp,rangeChunkSize:this._rangeChunkSize,disableRange:this._disableRange}),o=n.allowRangeRequests,a=n.suggestedLength;o&&(this._isRangeSupported=!0),this._contentLength=a||this._contentLength,this._filename=(0,i.extractFilenameFromHeader)(r);var s=this._manager;s.isStreamingRequest(e)?this._isStreamingSupported=!0:this._isRangeSupported&&s.abortRequest(e),this._headersReceivedCapability.resolve()},_onProgressiveData:function(e){this._requests.length>0?this._requests.shift().resolve({value:e,done:!1}):this._cachedChunks.push(e)},_onDone:function(e){e&&this._onProgressiveData(e.chunk),this._done=!0,this._cachedChunks.length>0||(this._requests.forEach((function(e){e.resolve({value:void 0,done:!0})})),this._requests=[])},_onError:function(e){var t=this._url,r=(0,i.createResponseStatusError)(e,t);this._storedError=r,this._headersReceivedCapability.reject(r),this._requests.forEach((function(e){e.reject(r)})),this._requests=[],this._cachedChunks=[]},_onProgress:function(e){this.onProgress&&this.onProgress({loaded:e.loaded,total:e.lengthComputable?e.total:this._contentLength})},get filename(){return this._filename},get isRangeSupported(){return this._isRangeSupported},get isStreamingSupported(){return this._isStreamingSupported},get contentLength(){return this._contentLength},get headersReady(){return this._headersReceivedCapability.promise},read:(h=l(n.default.mark((function e(){var t,r;return n.default.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(!this._storedError){e.next=2;break}throw this._storedError;case 2:if(!(this._cachedChunks.length>0)){e.next=5;break}return t=this._cachedChunks.shift(),e.abrupt("return",{value:t,done:!1});case 5:if(!this._done){e.next=7;break}return e.abrupt("return",{value:void 0,done:!0});case 7:return r=(0,o.createPromiseCapability)(),this._requests.push(r),e.abrupt("return",r.promise);case 10:case"end":return e.stop()}}),e,this)}))),function(){return h.apply(this,arguments)}),cancel:function(e){this._done=!0,this._headersReceivedCapability.reject(e),this._requests.forEach((function(e){e.resolve({value:void 0,done:!0})})),this._requests=[],this._manager.isPendingRequest(this._fullRequestId)&&this._manager.abortRequest(this._fullRequestId),this._fullRequestReader=null}},m.prototype={_close:function(){this.onClosed&&this.onClosed(this)},_onDone:function(e){var t=e.chunk;this._requests.length>0?this._requests.shift().resolve({value:t,done:!1}):this._queuedChunk=t,this._done=!0,this._requests.forEach((function(e){e.resolve({value:void 0,done:!0})})),this._requests=[],this._close()},_onProgress:function(e){!this.isStreamingSupported&&this.onProgress&&this.onProgress({loaded:e.loaded})},get isStreamingSupported(){return!1},read:(d=l(n.default.mark((function e(){var t,r;return n.default.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(null===this._queuedChunk){e.next=4;break}return t=this._queuedChunk,this._queuedChunk=null,e.abrupt("return",{value:t,done:!1});case 4:if(!this._done){e.next=6;break}return e.abrupt("return",{value:void 0,done:!0});case 6:return r=(0,o.createPromiseCapability)(),this._requests.push(r),e.abrupt("return",r.promise);case 9:case"end":return e.stop()}}),e,this)}))),function(){return d.apply(this,arguments)}),cancel:function(e){this._done=!0,this._requests.forEach((function(e){e.resolve({value:void 0,done:!0})})),this._requests=[],this._manager.isPendingRequest(this._requestId)&&this._manager.abortRequest(this._requestId),this._close()}}}])},e.exports=i()}).call(this,r(46).Buffer,r(24),r(47))},function(e,t){function r(e){return(r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function n(t){return"function"==typeof Symbol&&"symbol"===r(Symbol.iterator)?e.exports=n=function(e){return r(e)}:e.exports=n=function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":r(e)},n(t)}e.exports=n},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=t.focusEvents=t.keyboardEvents=t.touchEvents=t.mouseEvents=void 0;var n=["onClick","onContextMenu","onDoubleClick","onDrag","onDragEnd","onDragEnter","onDragExit","onDragLeave","onDragOver","onDragStart","onDrop","onMouseDown","onMouseEnter","onMouseLeave","onMouseMove","onMouseOut","onMouseOver","onMouseUp"];t.mouseEvents=n;var o=["onTouchCancel","onTouchEnd","onTouchMove","onTouchStart"];t.touchEvents=o;var i=["onKeyDown","onKeyPress","onKeyUp"];t.keyboardEvents=i;var a=["onFocus","onBlur"];t.focusEvents=a;var s=function(e,t){var r={};return[].concat(n,o,i,a).forEach((function(n){e[n]&&(r[n]=function(r){return t?e[n](r,t(n)):e[n](r)})})),r};t.default=s},function(e,t){var r;r=function(){return this}();try{r=r||new Function("return this")()}catch(e){"object"==typeof window&&(r=window)}e.exports=r},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=t.YouTube=void 0;var n,o=function(e){if(e&&e.__esModule)return e;var t=s();if(t&&t.has(e))return t.get(e);var r={};if(null!=e){var n=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var o in e)if(Object.prototype.hasOwnProperty.call(e,o)){var i=n?Object.getOwnPropertyDescriptor(e,o):null;i&&(i.get||i.set)?Object.defineProperty(r,o,i):r[o]=e[o]}}r.default=e,t&&t.set(e,r);return r}(r(0)),i=r(3),a=(n=r(6))&&n.__esModule?n:{default:n};function s(){if("function"!=typeof WeakMap)return null;var e=new WeakMap;return s=function(){return e},e}function u(e){return(u="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function l(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function c(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?l(r,!0).forEach((function(t){y(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):l(r).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function f(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function h(e){return(h=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function d(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function p(e,t){return(p=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function y(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function v(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if(!(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e)))return;var r=[],n=!0,o=!1,i=void 0;try{for(var a,s=e[Symbol.iterator]();!(n=(a=s.next()).done)&&(r.push(a.value),!t||r.length!==t);n=!0);}catch(e){o=!0,i=e}finally{try{n||null==s.return||s.return()}finally{if(o)throw i}}return r}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}var m="YT",g=/(?:youtu\.be\/|youtube\.com\/(?:embed\/|v\/|watch\?v=|watch\?.+&v=))((\w|-){11})|youtube\.com\/playlist\?list=/,b=/list=([a-zA-Z0-9_-]+)/;function _(e){return b.test(e)?{listType:"playlist",list:v(e.match(b),2)[1]}:{}}var w=function(e){function t(){var e,r;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var n=arguments.length,o=new Array(n),a=0;a<n;a++)o[a]=arguments[a];return r=function(e,t){return!t||"object"!==u(t)&&"function"!=typeof t?d(e):t}(this,(e=h(t)).call.apply(e,[this].concat(o))),y(d(r),"callPlayer",i.callPlayer),y(d(r),"onStateChange",(function(e){var t=e.data,n=r.props,o=n.onPlay,i=n.onPause,a=n.onBuffer,s=n.onBufferEnd,u=n.onEnded,l=n.onReady,c=n.loop,f=window[m].PlayerState,h=f.PLAYING,d=f.PAUSED,p=f.BUFFERING,y=f.ENDED,v=f.CUED;if(t===h&&(o(),s()),t===d&&i(),t===p&&a(),t===y){var g=!!r.callPlayer("getPlaylist");c&&!g&&r.play(),u()}t===v&&l()})),y(d(r),"mute",(function(){r.callPlayer("mute")})),y(d(r),"unmute",(function(){r.callPlayer("unMute")})),y(d(r),"ref",(function(e){r.container=e})),r}var r,n,a;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&p(e,t)}(t,e),r=t,(n=[{key:"load",value:function(e,t){var r=this,n=this.props,o=n.playing,a=n.muted,s=n.playsinline,u=n.controls,l=n.loop,f=n.config,h=n.onError,d=f.youtube,p=d.playerVars,y=d.embedOptions,v=e&&e.match(g)[1];if(t)return b.test(e)?void this.player.loadPlaylist(_(e)):void this.player.cueVideoById({videoId:v,startSeconds:(0,i.parseStartTime)(e)||p.start,endSeconds:(0,i.parseEndTime)(e)||p.end});(0,i.getSDK)("https://www.youtube.com/iframe_api",m,"onYouTubeIframeAPIReady",(function(e){return e.loaded})).then((function(t){r.container&&(r.player=new t.Player(r.container,c({width:"100%",height:"100%",videoId:v,playerVars:c({autoplay:o?1:0,mute:a?1:0,controls:u?1:0,start:(0,i.parseStartTime)(e),end:(0,i.parseEndTime)(e),origin:window.location.origin,playsinline:s},_(e),{},p),events:{onReady:function(){l&&r.player.setLoop(!0),r.props.onReady()},onStateChange:r.onStateChange,onError:function(e){return h(e.data)}}},y)))}),h)}},{key:"play",value:function(){this.callPlayer("playVideo")}},{key:"pause",value:function(){this.callPlayer("pauseVideo")}},{key:"stop",value:function(){document.body.contains(this.callPlayer("getIframe"))&&this.callPlayer("stopVideo")}},{key:"seekTo",value:function(e){this.callPlayer("seekTo",e),this.props.playing||this.pause()}},{key:"setVolume",value:function(e){this.callPlayer("setVolume",100*e)}},{key:"setPlaybackRate",value:function(e){this.callPlayer("setPlaybackRate",e)}},{key:"setLoop",value:function(e){this.callPlayer("setLoop",e)}},{key:"getDuration",value:function(){return this.callPlayer("getDuration")}},{key:"getCurrentTime",value:function(){return this.callPlayer("getCurrentTime")}},{key:"getSecondsLoaded",value:function(){return this.callPlayer("getVideoLoadedFraction")*this.getDuration()}},{key:"render",value:function(){var e={width:"100%",height:"100%",display:this.props.display};return o.default.createElement("div",{style:e},o.default.createElement("div",{ref:this.ref}))}}])&&f(r.prototype,n),a&&f(r,a),t}(o.Component);t.YouTube=w,y(w,"displayName","YouTube"),y(w,"canPlay",(function(e){return g.test(e)}));var S=(0,a.default)(w);t.default=S},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var n=function(e){if(e&&e.__esModule)return e;var t=a();if(t&&t.has(e))return t.get(e);var r={};if(null!=e){var n=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var o in e)if(Object.prototype.hasOwnProperty.call(e,o)){var i=n?Object.getOwnPropertyDescriptor(e,o):null;i&&(i.get||i.set)?Object.defineProperty(r,o,i):r[o]=e[o]}}r.default=e,t&&t.set(e,r);return r}(r(0)),o=r(20),i=r(3);function a(){if("function"!=typeof WeakMap)return null;var e=new WeakMap;return a=function(){return e},e}function s(e){return(s="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function u(){return(u=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var n in r)Object.prototype.hasOwnProperty.call(r,n)&&(e[n]=r[n])}return e}).apply(this,arguments)}function l(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function c(e){return(c=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function f(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function h(e,t){return(h=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function d(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}var p=function(e){function t(){var e,r;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var n=arguments.length,o=new Array(n),i=0;i<n;i++)o[i]=arguments[i];return r=function(e,t){return!t||"object"!==s(t)&&"function"!=typeof t?f(e):t}(this,(e=c(t)).call.apply(e,[this].concat(o))),d(f(r),"mounted",!1),d(f(r),"isReady",!1),d(f(r),"isPlaying",!1),d(f(r),"isLoading",!0),d(f(r),"loadOnReady",null),d(f(r),"startOnPlay",!0),d(f(r),"seekOnPlay",null),d(f(r),"onDurationCalled",!1),d(f(r),"getInternalPlayer",(function(e){return r.player?r.player[e]:null})),d(f(r),"progress",(function(){if(r.props.url&&r.player&&r.isReady){var e=r.getCurrentTime()||0,t=r.getSecondsLoaded(),n=r.getDuration();if(n){var o={playedSeconds:e,played:e/n};null!==t&&(o.loadedSeconds=t,o.loaded=t/n),o.playedSeconds===r.prevPlayed&&o.loadedSeconds===r.prevLoaded||r.props.onProgress(o),r.prevPlayed=o.playedSeconds,r.prevLoaded=o.loadedSeconds}}r.progressTimeout=setTimeout(r.progress,r.props.progressFrequency||r.props.progressInterval)})),d(f(r),"handleReady",(function(){if(r.mounted){r.isReady=!0,r.isLoading=!1;var e=r.props,t=e.onReady,n=e.playing,o=e.volume,i=e.muted;t(),i||null===o||r.player.setVolume(o),r.loadOnReady?(r.player.load(r.loadOnReady,!0),r.loadOnReady=null):n&&r.player.play(),r.handleDurationCheck()}})),d(f(r),"handlePlay",(function(){r.isPlaying=!0,r.isLoading=!1;var e=r.props,t=e.onStart,n=e.onPlay,o=e.playbackRate;r.startOnPlay&&(r.player.setPlaybackRate&&1!==o&&r.player.setPlaybackRate(o),t(),r.startOnPlay=!1),n(),r.seekOnPlay&&(r.seekTo(r.seekOnPlay),r.seekOnPlay=null),r.handleDurationCheck()})),d(f(r),"handlePause",(function(e){r.isPlaying=!1,r.isLoading||r.props.onPause(e)})),d(f(r),"handleEnded",(function(){var e=r.props,t=e.activePlayer,n=e.loop,o=e.onEnded;t.loopOnEnded&&n&&r.seekTo(0),n||(r.isPlaying=!1,o())})),d(f(r),"handleError",(function(){var e;r.isLoading=!1,(e=r.props).onError.apply(e,arguments)})),d(f(r),"handleDurationCheck",(function(){clearTimeout(r.durationCheckTimeout);var e=r.getDuration();e?r.onDurationCalled||(r.props.onDuration(e),r.onDurationCalled=!0):r.durationCheckTimeout=setTimeout(r.handleDurationCheck,100)})),d(f(r),"handleLoaded",(function(){r.isLoading=!1})),d(f(r),"ref",(function(e){e&&(r.player=e)})),r}var r,o,a;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&h(e,t)}(t,e),r=t,(o=[{key:"componentDidMount",value:function(){this.mounted=!0,this.player.load(this.props.url),this.progress()}},{key:"componentWillUnmount",value:function(){clearTimeout(this.progressTimeout),clearTimeout(this.durationCheckTimeout),this.isReady&&this.player.stop(),this.player.disablePIP&&this.player.disablePIP(),this.mounted=!1}},{key:"componentDidUpdate",value:function(e){var t=this,r=this.props,n=r.url,o=r.playing,a=r.volume,s=r.muted,u=r.playbackRate,l=r.pip,c=r.loop,f=r.activePlayer;if(!(0,i.isEqual)(e.url,n)){if(this.isLoading&&!f.forceLoad)return console.warn("ReactPlayer: the attempt to load ".concat(n," is being deferred until the player has loaded")),void(this.loadOnReady=n);this.isLoading=!0,this.startOnPlay=!0,this.onDurationCalled=!1,this.player.load(n,this.isReady)}e.playing||!o||this.isPlaying||this.player.play(),e.playing&&!o&&this.isPlaying&&this.player.pause(),!e.pip&&l&&this.player.enablePIP&&this.player.enablePIP(),e.pip&&!l&&this.player.disablePIP&&this.player.disablePIP(),e.volume!==a&&null!==a&&this.player.setVolume(a),e.muted!==s&&(s?this.player.mute():(this.player.unmute(),null!==a&&setTimeout((function(){return t.player.setVolume(a)})))),e.playbackRate!==u&&this.player.setPlaybackRate&&this.player.setPlaybackRate(u),e.loop!==c&&this.player.setLoop&&this.player.setLoop(c)}},{key:"getDuration",value:function(){return this.isReady?this.player.getDuration():null}},{key:"getCurrentTime",value:function(){return this.isReady?this.player.getCurrentTime():null}},{key:"getSecondsLoaded",value:function(){return this.isReady?this.player.getSecondsLoaded():null}},{key:"seekTo",value:function(e,t){var r=this;if(!this.isReady&&0!==e)return this.seekOnPlay=e,void setTimeout((function(){r.seekOnPlay=null}),5e3);if(t?"fraction"===t:e>0&&e<1){var n=this.player.getDuration();return n?void this.player.seekTo(n*e):void console.warn("ReactPlayer: could not seek using fraction – duration not yet available")}this.player.seekTo(e)}},{key:"render",value:function(){var e=this.props.activePlayer;return e?n.default.createElement(e,u({},this.props,{ref:this.ref,onReady:this.handleReady,onPlay:this.handlePlay,onPause:this.handlePause,onEnded:this.handleEnded,onLoaded:this.handleLoaded,onError:this.handleError})):null}}])&&l(r.prototype,o),a&&l(r,a),t}(n.Component);t.default=p,d(p,"displayName","Player"),d(p,"propTypes",o.propTypes),d(p,"defaultProps",o.defaultProps)},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=t.SoundCloud=void 0;var n,o=function(e){if(e&&e.__esModule)return e;var t=s();if(t&&t.has(e))return t.get(e);var r={};if(null!=e){var n=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var o in e)if(Object.prototype.hasOwnProperty.call(e,o)){var i=n?Object.getOwnPropertyDescriptor(e,o):null;i&&(i.get||i.set)?Object.defineProperty(r,o,i):r[o]=e[o]}}r.default=e,t&&t.set(e,r);return r}(r(0)),i=r(3),a=(n=r(6))&&n.__esModule?n:{default:n};function s(){if("function"!=typeof WeakMap)return null;var e=new WeakMap;return s=function(){return e},e}function u(e){return(u="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function l(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function c(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function f(e){return(f=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function h(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function d(e,t){return(d=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function p(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}var y=/(soundcloud\.com|snd\.sc)\/.+$/,v=function(e){function t(){var e,r;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var n=arguments.length,o=new Array(n),a=0;a<n;a++)o[a]=arguments[a];return r=function(e,t){return!t||"object"!==u(t)&&"function"!=typeof t?h(e):t}(this,(e=f(t)).call.apply(e,[this].concat(o))),p(h(r),"callPlayer",i.callPlayer),p(h(r),"duration",null),p(h(r),"currentTime",null),p(h(r),"fractionLoaded",null),p(h(r),"mute",(function(){r.setVolume(0)})),p(h(r),"unmute",(function(){null!==r.props.volume&&r.setVolume(r.props.volume)})),p(h(r),"ref",(function(e){r.iframe=e})),r}var r,n,a;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&d(e,t)}(t,e),r=t,(n=[{key:"load",value:function(e,t){var r=this;(0,i.getSDK)("https://w.soundcloud.com/player/api.js","SC").then((function(n){if(r.iframe){var o=n.Widget.Events,i=o.PLAY,a=o.PLAY_PROGRESS,s=o.PAUSE,u=o.FINISH,c=o.ERROR;t||(r.player=n.Widget(r.iframe),r.player.bind(i,r.props.onPlay),r.player.bind(s,r.props.onPause),r.player.bind(a,(function(e){r.currentTime=e.currentPosition/1e3,r.fractionLoaded=e.loadedProgress})),r.player.bind(u,(function(){return r.props.onEnded()})),r.player.bind(c,(function(e){return r.props.onError(e)}))),r.player.load(e,function(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?l(r,!0).forEach((function(t){p(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):l(r).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}({},r.props.config.soundcloud.options,{callback:function(){r.player.getDuration((function(e){r.duration=e/1e3,r.props.onReady()}))}}))}}))}},{key:"play",value:function(){this.callPlayer("play")}},{key:"pause",value:function(){this.callPlayer("pause")}},{key:"stop",value:function(){}},{key:"seekTo",value:function(e){this.callPlayer("seekTo",1e3*e)}},{key:"setVolume",value:function(e){this.callPlayer("setVolume",100*e)}},{key:"getDuration",value:function(){return this.duration}},{key:"getCurrentTime",value:function(){return this.currentTime}},{key:"getSecondsLoaded",value:function(){return this.fractionLoaded*this.duration}},{key:"render",value:function(){var e={width:"100%",height:"100%",display:this.props.display};return o.default.createElement("iframe",{ref:this.ref,src:"https://w.soundcloud.com/player/?url=".concat(encodeURIComponent(this.props.url)),style:e,frameBorder:0,allow:"autoplay"})}}])&&c(r.prototype,n),a&&c(r,a),t}(o.Component);t.SoundCloud=v,p(v,"displayName","SoundCloud"),p(v,"canPlay",(function(e){return y.test(e)})),p(v,"loopOnEnded",!0);var m=(0,a.default)(v);t.default=m},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=t.Vimeo=void 0;var n,o=function(e){if(e&&e.__esModule)return e;var t=s();if(t&&t.has(e))return t.get(e);var r={};if(null!=e){var n=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var o in e)if(Object.prototype.hasOwnProperty.call(e,o)){var i=n?Object.getOwnPropertyDescriptor(e,o):null;i&&(i.get||i.set)?Object.defineProperty(r,o,i):r[o]=e[o]}}r.default=e,t&&t.set(e,r);return r}(r(0)),i=r(3),a=(n=r(6))&&n.__esModule?n:{default:n};function s(){if("function"!=typeof WeakMap)return null;var e=new WeakMap;return s=function(){return e},e}function u(e){return(u="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function l(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function c(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function f(e){return(f=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function h(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function d(e,t){return(d=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function p(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}var y=/vimeo\.com\/.+/,v=/vimeo\.com\/external\/[0-9]+\..+/,m=function(e){function t(){var e,r;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var n=arguments.length,o=new Array(n),a=0;a<n;a++)o[a]=arguments[a];return r=function(e,t){return!t||"object"!==u(t)&&"function"!=typeof t?h(e):t}(this,(e=f(t)).call.apply(e,[this].concat(o))),p(h(r),"callPlayer",i.callPlayer),p(h(r),"duration",null),p(h(r),"currentTime",null),p(h(r),"secondsLoaded",null),p(h(r),"mute",(function(){r.setVolume(0)})),p(h(r),"unmute",(function(){null!==r.props.volume&&r.setVolume(r.props.volume)})),p(h(r),"ref",(function(e){r.container=e})),r}var r,n,a;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&d(e,t)}(t,e),r=t,(n=[{key:"load",value:function(e){var t=this;this.duration=null,(0,i.getSDK)("https://player.vimeo.com/api/player.js","Vimeo").then((function(r){t.container&&(t.player=new r.Player(t.container,function(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?l(r,!0).forEach((function(t){p(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):l(r).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}({url:e,autoplay:t.props.playing,muted:t.props.muted,loop:t.props.loop,playsinline:t.props.playsinline,controls:t.props.controls},t.props.config.vimeo.playerOptions)),t.player.ready().then((function(){var e=t.container.querySelector("iframe");e.style.width="100%",e.style.height="100%"})).catch(t.props.onError),t.player.on("loaded",(function(){t.props.onReady(),t.refreshDuration()})),t.player.on("play",(function(){t.props.onPlay(),t.refreshDuration()})),t.player.on("pause",t.props.onPause),t.player.on("seeked",(function(e){return t.props.onSeek(e.seconds)})),t.player.on("ended",t.props.onEnded),t.player.on("error",t.props.onError),t.player.on("timeupdate",(function(e){var r=e.seconds;t.currentTime=r})),t.player.on("progress",(function(e){var r=e.seconds;t.secondsLoaded=r})))}),this.props.onError)}},{key:"refreshDuration",value:function(){var e=this;this.player.getDuration().then((function(t){e.duration=t}))}},{key:"play",value:function(){var e=this.callPlayer("play");e&&e.catch(this.props.onError)}},{key:"pause",value:function(){this.callPlayer("pause")}},{key:"stop",value:function(){this.callPlayer("unload")}},{key:"seekTo",value:function(e){this.callPlayer("setCurrentTime",e)}},{key:"setVolume",value:function(e){this.callPlayer("setVolume",e)}},{key:"setLoop",value:function(e){this.callPlayer("setLoop",e)}},{key:"setPlaybackRate",value:function(e){this.callPlayer("setPlaybackRate",e)}},{key:"getDuration",value:function(){return this.duration}},{key:"getCurrentTime",value:function(){return this.currentTime}},{key:"getSecondsLoaded",value:function(){return this.secondsLoaded}},{key:"render",value:function(){var e={width:"100%",height:"100%",overflow:"hidden",display:this.props.display};return o.default.createElement("div",{key:this.props.url,ref:this.ref,style:e})}}])&&c(r.prototype,n),a&&c(r,a),t}(o.Component);t.Vimeo=m,p(m,"displayName","Vimeo"),p(m,"forceLoad",!0),p(m,"canPlay",(function(e){return!v.test(e)&&y.test(e)}));var g=(0,a.default)(m);t.default=g},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=t.DailyMotion=void 0;var n,o=function(e){if(e&&e.__esModule)return e;var t=s();if(t&&t.has(e))return t.get(e);var r={};if(null!=e){var n=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var o in e)if(Object.prototype.hasOwnProperty.call(e,o)){var i=n?Object.getOwnPropertyDescriptor(e,o):null;i&&(i.get||i.set)?Object.defineProperty(r,o,i):r[o]=e[o]}}r.default=e,t&&t.set(e,r);return r}(r(0)),i=r(3),a=(n=r(6))&&n.__esModule?n:{default:n};function s(){if("function"!=typeof WeakMap)return null;var e=new WeakMap;return s=function(){return e},e}function u(e){return(u="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function l(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function c(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?l(r,!0).forEach((function(t){v(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):l(r).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function f(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if(!(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e)))return;var r=[],n=!0,o=!1,i=void 0;try{for(var a,s=e[Symbol.iterator]();!(n=(a=s.next()).done)&&(r.push(a.value),!t||r.length!==t);n=!0);}catch(e){o=!0,i=e}finally{try{n||null==s.return||s.return()}finally{if(o)throw i}}return r}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}function h(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function d(e){return(d=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function p(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function y(e,t){return(y=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function v(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}var m=/^(?:(?:https?):)?(?:\/\/)?(?:www\.)?(?:(?:dailymotion\.com(?:\/embed)?\/video)|dai\.ly)\/([a-zA-Z0-9]+)(?:_[\w_-]+)?$/,g=function(e){function t(){var e,r;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var n=arguments.length,o=new Array(n),a=0;a<n;a++)o[a]=arguments[a];return r=function(e,t){return!t||"object"!==u(t)&&"function"!=typeof t?p(e):t}(this,(e=d(t)).call.apply(e,[this].concat(o))),v(p(r),"callPlayer",i.callPlayer),v(p(r),"onDurationChange",(function(){var e=r.getDuration();r.props.onDuration(e)})),v(p(r),"mute",(function(){r.callPlayer("setMuted",!0)})),v(p(r),"unmute",(function(){r.callPlayer("setMuted",!1)})),v(p(r),"ref",(function(e){r.container=e})),r}var r,n,a;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&y(e,t)}(t,e),r=t,(n=[{key:"load",value:function(e){var t=this,r=this.props,n=r.controls,o=r.config,a=r.onError,s=r.playing,u=f(e.match(m),2)[1];this.player?this.player.load(u,{start:(0,i.parseStartTime)(e),autoplay:s}):(0,i.getSDK)("https://api.dmcdn.net/all.js","DM","dmAsyncInit",(function(e){return e.player})).then((function(r){if(t.container){var s=r.player;t.player=new s(t.container,{width:"100%",height:"100%",video:u,params:c({controls:n,autoplay:t.props.playing,mute:t.props.muted,start:(0,i.parseStartTime)(e),origin:window.location.origin},o.dailymotion.params),events:{apiready:t.props.onReady,seeked:function(){return t.props.onSeek(t.player.currentTime)},video_end:t.props.onEnded,durationchange:t.onDurationChange,pause:t.props.onPause,playing:t.props.onPlay,waiting:t.props.onBuffer,error:function(e){return a(e)}}})}}),a)}},{key:"play",value:function(){this.callPlayer("play")}},{key:"pause",value:function(){this.callPlayer("pause")}},{key:"stop",value:function(){}},{key:"seekTo",value:function(e){this.callPlayer("seek",e)}},{key:"setVolume",value:function(e){this.callPlayer("setVolume",e)}},{key:"getDuration",value:function(){return this.player.duration||null}},{key:"getCurrentTime",value:function(){return this.player.currentTime}},{key:"getSecondsLoaded",value:function(){return this.player.bufferedTime}},{key:"render",value:function(){var e={width:"100%",height:"100%",display:this.props.display};return o.default.createElement("div",{style:e},o.default.createElement("div",{ref:this.ref}))}}])&&h(r.prototype,n),a&&h(r,a),t}(o.Component);t.DailyMotion=g,v(g,"displayName","DailyMotion"),v(g,"canPlay",(function(e){return m.test(e)})),v(g,"loopOnEnded",!0);var b=(0,a.default)(g);t.default=b},function(e,t,r){var n=r(7);e.exports=function(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{},o=Object.keys(Object(r));"function"==typeof Object.getOwnPropertySymbols&&(o=o.concat(Object.getOwnPropertySymbols(r).filter((function(e){return Object.getOwnPropertyDescriptor(r,e).enumerable})))),o.forEach((function(t){n(e,t,r[t])}))}return e}},function(e,t){function r(t,n){return e.exports=r=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e},r(t,n)}e.exports=r},function(e,t,r){"use strict";function n(){for(var e=arguments.length,t=new Array(e),r=0;r<e;r++)t[r]=arguments[r];return t.reduce((function(e,t){return"string"==typeof t||t instanceof Array?e.concat(t):e}),[]).filter(Boolean).join(" ")}r.r(t),r.d(t,"default",(function(){return n}))},function(e,t,r){"use strict";var n=r(1);Object.defineProperty(t,"__esModule",{value:!0}),Object.defineProperty(t,"pdfjs",{enumerable:!0,get:function(){return o.default}}),Object.defineProperty(t,"Document",{enumerable:!0,get:function(){return i.default}}),Object.defineProperty(t,"Outline",{enumerable:!0,get:function(){return a.default}}),Object.defineProperty(t,"Page",{enumerable:!0,get:function(){return s.default}});var o=n(r(21)),i=n(r(69)),a=n(r(83)),s=n(r(89)),u=r(12);u.isLocalFileSystem&&(0,u.warnOnDev)("You are running React-PDF from your local file system. PDF.js Worker may fail to load due to browser's security policies. If you're on Google Chrome, you can use --allow-file-access-from-files flag for debugging purposes."),o.default.GlobalWorkerOptions.workerSrc="pdf.worker.js"},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=t.Facebook=void 0;var n,o=function(e){if(e&&e.__esModule)return e;var t=s();if(t&&t.has(e))return t.get(e);var r={};if(null!=e){var n=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var o in e)if(Object.prototype.hasOwnProperty.call(e,o)){var i=n?Object.getOwnPropertyDescriptor(e,o):null;i&&(i.get||i.set)?Object.defineProperty(r,o,i):r[o]=e[o]}}r.default=e,t&&t.set(e,r);return r}(r(0)),i=r(3),a=(n=r(6))&&n.__esModule?n:{default:n};function s(){if("function"!=typeof WeakMap)return null;var e=new WeakMap;return s=function(){return e},e}function u(e){return(u="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function l(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function c(e){return(c=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function f(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function h(e,t){return(h=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function d(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}var p="https://connect.facebook.net/en_US/sdk.js",y=/facebook\.com\/([^/?].+\/)?video(s|\.php)[/?].*$/,v="facebook-player-",m=function(e){function t(){var e,r;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var n=arguments.length,o=new Array(n),a=0;a<n;a++)o[a]=arguments[a];return r=function(e,t){return!t||"object"!==u(t)&&"function"!=typeof t?f(e):t}(this,(e=c(t)).call.apply(e,[this].concat(o))),d(f(r),"callPlayer",i.callPlayer),d(f(r),"playerID",v+(0,i.randomString)()),d(f(r),"mute",(function(){r.callPlayer("mute")})),d(f(r),"unmute",(function(){r.callPlayer("unmute")})),r}var r,n,a;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&h(e,t)}(t,e),r=t,(n=[{key:"load",value:function(e,t){var r=this;t?(0,i.getSDK)(p,"FB","fbAsyncInit").then((function(e){return e.XFBML.parse()})):(0,i.getSDK)(p,"FB","fbAsyncInit").then((function(e){e.init({appId:r.props.config.facebook.appId,xfbml:!0,version:r.props.config.facebook.version}),e.Event.subscribe("xfbml.render",(function(e){r.props.onLoaded()})),e.Event.subscribe("xfbml.ready",(function(e){"video"===e.type&&e.id===r.playerID&&(r.player=e.instance,r.player.subscribe("startedPlaying",r.props.onPlay),r.player.subscribe("paused",r.props.onPause),r.player.subscribe("finishedPlaying",r.props.onEnded),r.player.subscribe("startedBuffering",r.props.onBuffer),r.player.subscribe("finishedBuffering",r.props.onBufferEnd),r.player.subscribe("error",r.props.onError),r.props.muted||r.callPlayer("unmute"),r.props.onReady(),document.getElementById(r.playerID).querySelector("iframe").style.visibility="visible")}))}))}},{key:"play",value:function(){this.callPlayer("play")}},{key:"pause",value:function(){this.callPlayer("pause")}},{key:"stop",value:function(){}},{key:"seekTo",value:function(e){this.callPlayer("seek",e)}},{key:"setVolume",value:function(e){this.callPlayer("setVolume",e)}},{key:"getDuration",value:function(){return this.callPlayer("getDuration")}},{key:"getCurrentTime",value:function(){return this.callPlayer("getCurrentPosition")}},{key:"getSecondsLoaded",value:function(){return null}},{key:"render",value:function(){return o.default.createElement("div",{style:{width:"100%",height:"100%"},id:this.playerID,className:"fb-video","data-href":this.props.url,"data-autoplay":this.props.playing?"true":"false","data-allowfullscreen":"true","data-controls":this.props.controls?"true":"false"})}}])&&l(r.prototype,n),a&&l(r,a),t}(o.Component);t.Facebook=m,d(m,"displayName","Facebook"),d(m,"canPlay",(function(e){return y.test(e)})),d(m,"loopOnEnded",!0);var g=(0,a.default)(m);t.default=g},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=t.Streamable=void 0;var n,o=function(e){if(e&&e.__esModule)return e;var t=s();if(t&&t.has(e))return t.get(e);var r={};if(null!=e){var n=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var o in e)if(Object.prototype.hasOwnProperty.call(e,o)){var i=n?Object.getOwnPropertyDescriptor(e,o):null;i&&(i.get||i.set)?Object.defineProperty(r,o,i):r[o]=e[o]}}r.default=e,t&&t.set(e,r);return r}(r(0)),i=r(3),a=(n=r(6))&&n.__esModule?n:{default:n};function s(){if("function"!=typeof WeakMap)return null;var e=new WeakMap;return s=function(){return e},e}function u(e){return(u="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function l(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function c(e){return(c=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function f(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function h(e,t){return(h=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function d(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}var p=/streamable\.com\/([a-z0-9]+)$/,y=function(e){function t(){var e,r;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var n=arguments.length,o=new Array(n),a=0;a<n;a++)o[a]=arguments[a];return r=function(e,t){return!t||"object"!==u(t)&&"function"!=typeof t?f(e):t}(this,(e=c(t)).call.apply(e,[this].concat(o))),d(f(r),"callPlayer",i.callPlayer),d(f(r),"duration",null),d(f(r),"currentTime",null),d(f(r),"secondsLoaded",null),d(f(r),"mute",(function(){r.callPlayer("mute")})),d(f(r),"unmute",(function(){r.callPlayer("unmute")})),d(f(r),"ref",(function(e){r.iframe=e})),r}var r,n,a;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&h(e,t)}(t,e),r=t,(n=[{key:"load",value:function(e){var t=this;(0,i.getSDK)("https://cdn.embed.ly/player-0.1.0.min.js","playerjs").then((function(e){t.iframe&&(t.player=new e.Player(t.iframe),t.player.setLoop(t.props.loop),t.player.on("ready",t.props.onReady),t.player.on("play",t.props.onPlay),t.player.on("pause",t.props.onPause),t.player.on("seeked",t.props.onSeek),t.player.on("ended",t.props.onEnded),t.player.on("error",t.props.onError),t.player.on("timeupdate",(function(e){var r=e.duration,n=e.seconds;t.duration=r,t.currentTime=n})),t.player.on("buffered",(function(e){var r=e.percent;t.duration&&(t.secondsLoaded=t.duration*r)})),t.props.muted&&t.player.mute())}),this.props.onError)}},{key:"play",value:function(){this.callPlayer("play")}},{key:"pause",value:function(){this.callPlayer("pause")}},{key:"stop",value:function(){}},{key:"seekTo",value:function(e){this.callPlayer("setCurrentTime",e)}},{key:"setVolume",value:function(e){this.callPlayer("setVolume",100*e)}},{key:"setLoop",value:function(e){this.callPlayer("setLoop",e)}},{key:"getDuration",value:function(){return this.duration}},{key:"getCurrentTime",value:function(){return this.currentTime}},{key:"getSecondsLoaded",value:function(){return this.secondsLoaded}},{key:"render",value:function(){var e=this.props.url.match(p)[1];return o.default.createElement("iframe",{ref:this.ref,src:"https://streamable.com/o/".concat(e),frameBorder:"0",scrolling:"no",style:{width:"100%",height:"100%"},allowFullScreen:!0})}}])&&l(r.prototype,n),a&&l(r,a),t}(o.Component);t.Streamable=y,d(y,"displayName","Streamable"),d(y,"canPlay",(function(e){return p.test(e)}));var v=(0,a.default)(y);t.default=v},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=t.Wistia=void 0;var n,o=function(e){if(e&&e.__esModule)return e;var t=s();if(t&&t.has(e))return t.get(e);var r={};if(null!=e){var n=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var o in e)if(Object.prototype.hasOwnProperty.call(e,o)){var i=n?Object.getOwnPropertyDescriptor(e,o):null;i&&(i.get||i.set)?Object.defineProperty(r,o,i):r[o]=e[o]}}r.default=e,t&&t.set(e,r);return r}(r(0)),i=r(3),a=(n=r(6))&&n.__esModule?n:{default:n};function s(){if("function"!=typeof WeakMap)return null;var e=new WeakMap;return s=function(){return e},e}function u(e){return(u="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function l(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function c(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?l(r,!0).forEach((function(t){y(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):l(r).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function f(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function h(e){return(h=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function d(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function p(e,t){return(p=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function y(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}var v=/(?:wistia\.com|wi\.st)\/(?:medias|embed)\/(.*)$/,m=function(e){function t(){var e,r;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var n=arguments.length,o=new Array(n),a=0;a<n;a++)o[a]=arguments[a];return r=function(e,t){return!t||"object"!==u(t)&&"function"!=typeof t?d(e):t}(this,(e=h(t)).call.apply(e,[this].concat(o))),y(d(r),"callPlayer",i.callPlayer),y(d(r),"mute",(function(){r.callPlayer("mute")})),y(d(r),"unmute",(function(){r.callPlayer("unmute")})),r}var r,n,a;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&p(e,t)}(t,e),r=t,(n=[{key:"getID",value:function(e){return e&&e.match(v)[1]}},{key:"load",value:function(e){var t=this,r=this.props,n=r.playing,o=r.muted,a=r.controls,s=r.onReady,u=r.onPlay,l=r.onPause,f=r.onSeek,h=r.onEnded,d=r.config,p=r.onError;(0,i.getSDK)("https://fast.wistia.com/assets/external/E-v1.js","Wistia").then((function(){window._wq=window._wq||[],window._wq.push({id:t.getID(e),options:c({autoPlay:n,silentAutoPlay:"allow",muted:o,controlsVisibleOnLoad:a},d.wistia.options),onReady:function(e){t.player=e,t.unbind(),t.player.bind("play",u),t.player.bind("pause",l),t.player.bind("seek",f),t.player.bind("end",h),s()}})}),p)}},{key:"play",value:function(){this.callPlayer("play")}},{key:"pause",value:function(){this.callPlayer("pause")}},{key:"unbind",value:function(){var e=this.props,t=e.onPlay,r=e.onPause,n=e.onSeek,o=e.onEnded;this.player.unbind("play",t),this.player.unbind("pause",r),this.player.unbind("seek",n),this.player.unbind("end",o)}},{key:"stop",value:function(){this.unbind(),this.callPlayer("remove")}},{key:"seekTo",value:function(e){this.callPlayer("time",e)}},{key:"setVolume",value:function(e){this.callPlayer("volume",e)}},{key:"setPlaybackRate",value:function(e){this.callPlayer("playbackRate",e)}},{key:"getDuration",value:function(){return this.callPlayer("duration")}},{key:"getCurrentTime",value:function(){return this.callPlayer("time")}},{key:"getSecondsLoaded",value:function(){return null}},{key:"render",value:function(){var e=this.getID(this.props.url),t="wistia_embed wistia_async_".concat(e);return o.default.createElement("div",{key:e,className:t,style:{width:"100%",height:"100%"}})}}])&&f(r.prototype,n),a&&f(r,a),t}(o.Component);t.Wistia=m,y(m,"displayName","Wistia"),y(m,"canPlay",(function(e){return v.test(e)})),y(m,"loopOnEnded",!0);var g=(0,a.default)(m);t.default=g},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=t.Twitch=void 0;var n,o=function(e){if(e&&e.__esModule)return e;var t=s();if(t&&t.has(e))return t.get(e);var r={};if(null!=e){var n=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var o in e)if(Object.prototype.hasOwnProperty.call(e,o)){var i=n?Object.getOwnPropertyDescriptor(e,o):null;i&&(i.get||i.set)?Object.defineProperty(r,o,i):r[o]=e[o]}}r.default=e,t&&t.set(e,r);return r}(r(0)),i=r(3),a=(n=r(6))&&n.__esModule?n:{default:n};function s(){if("function"!=typeof WeakMap)return null;var e=new WeakMap;return s=function(){return e},e}function u(e){return(u="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function l(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function c(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function f(e){return(f=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function h(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function d(e,t){return(d=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function p(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}var y=/(?:www\.|go\.)?twitch\.tv\/videos\/(\d+)($|\?)/,v=/(?:www\.|go\.)?twitch\.tv\/([a-z0-9_]+)($|\?)/,m="twitch-player-",g=function(e){function t(){var e,r;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var n=arguments.length,o=new Array(n),a=0;a<n;a++)o[a]=arguments[a];return r=function(e,t){return!t||"object"!==u(t)&&"function"!=typeof t?h(e):t}(this,(e=f(t)).call.apply(e,[this].concat(o))),p(h(r),"callPlayer",i.callPlayer),p(h(r),"playerID",m+(0,i.randomString)()),p(h(r),"mute",(function(){r.callPlayer("setMuted",!0)})),p(h(r),"unmute",(function(){r.callPlayer("setMuted",!1)})),r}var r,n,a;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&d(e,t)}(t,e),r=t,(n=[{key:"load",value:function(e,t){var r=this,n=this.props,o=n.playsinline,a=n.onError,s=n.config,u=n.controls,c=v.test(e),f=c?e.match(v)[1]:e.match(y)[1];t?c?this.player.setChannel(f):this.player.setVideo("v"+f):(0,i.getSDK)("https://player.twitch.tv/js/embed/v1.js","Twitch").then((function(e){r.player=new e.Player(r.playerID,function(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?l(r,!0).forEach((function(t){p(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):l(r).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}({video:c?"":f,channel:c?f:"",height:"100%",width:"100%",playsinline:o,autoplay:r.props.playing,muted:r.props.muted,controls:!!c||u},s.twitch.options));var t=e.Player,n=t.READY,i=t.PLAYING,a=t.PAUSE,h=t.ENDED,d=t.ONLINE,y=t.OFFLINE;r.player.addEventListener(n,r.props.onReady),r.player.addEventListener(i,r.props.onPlay),r.player.addEventListener(a,r.props.onPause),r.player.addEventListener(h,r.props.onEnded),r.player.addEventListener(d,r.props.onLoaded),r.player.addEventListener(y,r.props.onLoaded)}),a)}},{key:"play",value:function(){this.callPlayer("play")}},{key:"pause",value:function(){this.callPlayer("pause")}},{key:"stop",value:function(){this.callPlayer("pause")}},{key:"seekTo",value:function(e){this.callPlayer("seek",e)}},{key:"setVolume",value:function(e){this.callPlayer("setVolume",e)}},{key:"getDuration",value:function(){return this.callPlayer("getDuration")}},{key:"getCurrentTime",value:function(){return this.callPlayer("getCurrentTime")}},{key:"getSecondsLoaded",value:function(){return null}},{key:"render",value:function(){return o.default.createElement("div",{style:{width:"100%",height:"100%"},id:this.playerID})}}])&&c(r.prototype,n),a&&c(r,a),t}(o.Component);t.Twitch=g,p(g,"displayName","Twitch"),p(g,"canPlay",(function(e){return y.test(e)||v.test(e)})),p(g,"loopOnEnded",!0);var b=(0,a.default)(g);t.default=b},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=t.Mixcloud=void 0;var n,o=function(e){if(e&&e.__esModule)return e;var t=s();if(t&&t.has(e))return t.get(e);var r={};if(null!=e){var n=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var o in e)if(Object.prototype.hasOwnProperty.call(e,o)){var i=n?Object.getOwnPropertyDescriptor(e,o):null;i&&(i.get||i.set)?Object.defineProperty(r,o,i):r[o]=e[o]}}r.default=e,t&&t.set(e,r);return r}(r(0)),i=r(3),a=(n=r(6))&&n.__esModule?n:{default:n};function s(){if("function"!=typeof WeakMap)return null;var e=new WeakMap;return s=function(){return e},e}function u(e){return(u="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function l(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function c(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function f(e){return(f=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function h(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function d(e,t){return(d=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function p(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}var y=/mixcloud\.com\/([^/]+\/[^/]+)/,v=function(e){function t(){var e,r;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var n=arguments.length,o=new Array(n),a=0;a<n;a++)o[a]=arguments[a];return r=function(e,t){return!t||"object"!==u(t)&&"function"!=typeof t?h(e):t}(this,(e=f(t)).call.apply(e,[this].concat(o))),p(h(r),"callPlayer",i.callPlayer),p(h(r),"duration",null),p(h(r),"currentTime",null),p(h(r),"secondsLoaded",null),p(h(r),"mute",(function(){})),p(h(r),"unmute",(function(){})),p(h(r),"ref",(function(e){r.iframe=e})),r}var r,n,a;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&d(e,t)}(t,e),r=t,(n=[{key:"load",value:function(e){var t=this;(0,i.getSDK)("https://widget.mixcloud.com/media/js/widgetApi.js","Mixcloud").then((function(e){t.player=e.PlayerWidget(t.iframe),t.player.ready.then((function(){t.player.events.play.on(t.props.onPlay),t.player.events.pause.on(t.props.onPause),t.player.events.ended.on(t.props.onEnded),t.player.events.error.on(t.props.error),t.player.events.progress.on((function(e,r){t.currentTime=e,t.duration=r})),t.props.onReady()}))}),this.props.onError)}},{key:"play",value:function(){this.callPlayer("play")}},{key:"pause",value:function(){this.callPlayer("pause")}},{key:"stop",value:function(){}},{key:"seekTo",value:function(e){this.callPlayer("seek",e)}},{key:"setVolume",value:function(e){}},{key:"getDuration",value:function(){return this.duration}},{key:"getCurrentTime",value:function(){return this.currentTime}},{key:"getSecondsLoaded",value:function(){return null}},{key:"render",value:function(){var e=this.props,t=e.url,r=e.config,n=t.match(y)[1],a=(0,i.queryString)(function(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?l(r,!0).forEach((function(t){p(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):l(r).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}({},r.mixcloud.options,{feed:"/".concat(n,"/")}));return o.default.createElement("iframe",{key:n,ref:this.ref,style:{width:"100%",height:"100%"},src:"https://www.mixcloud.com/widget/iframe/?".concat(a),frameBorder:"0"})}}])&&c(r.prototype,n),a&&c(r,a),t}(o.Component);t.Mixcloud=v,p(v,"displayName","Mixcloud"),p(v,"canPlay",(function(e){return y.test(e)})),p(v,"loopOnEnded",!0);var m=(0,a.default)(v);t.default=m},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=t.FilePlayer=void 0;var n,o=function(e){if(e&&e.__esModule)return e;var t=s();if(t&&t.has(e))return t.get(e);var r={};if(null!=e){var n=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var o in e)if(Object.prototype.hasOwnProperty.call(e,o)){var i=n?Object.getOwnPropertyDescriptor(e,o):null;i&&(i.get||i.set)?Object.defineProperty(r,o,i):r[o]=e[o]}}r.default=e,t&&t.set(e,r);return r}(r(0)),i=r(3),a=(n=r(6))&&n.__esModule?n:{default:n};function s(){if("function"!=typeof WeakMap)return null;var e=new WeakMap;return s=function(){return e},e}function u(e){return(u="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function l(){return(l=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var n in r)Object.prototype.hasOwnProperty.call(r,n)&&(e[n]=r[n])}return e}).apply(this,arguments)}function c(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function f(e){return(f=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function h(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function d(e,t){return(d=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function p(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}var y="undefined"!=typeof navigator&&/iPad|iPhone|iPod/.test(navigator.userAgent)&&!window.MSStream,v=/\.(m4a|mp4a|mpga|mp2|mp2a|mp3|m2a|m3a|wav|weba|aac|oga|spx)($|\?)/i,m=/\.(mp4|og[gv]|webm|mov|m4v)($|\?)/i,g=/\.(m3u8)($|\?)/i,b=/\.(mpd)($|\?)/i,_=/www\.dropbox\.com\/.+/;function w(e){if(e instanceof Array){var t=!0,r=!1,n=void 0;try{for(var o,a=e[Symbol.iterator]();!(t=(o=a.next()).done);t=!0){var s=o.value;if("string"==typeof s&&w(s))return!0;if(w(s.src))return!0}}catch(e){r=!0,n=e}finally{try{t||null==a.return||a.return()}finally{if(r)throw n}}return!1}return!!(0,i.isMediaStream)(e)||(v.test(e)||m.test(e)||g.test(e)||b.test(e))}function S(e){return e||(e=document.createElement("video")),e.webkitSupportsPresentationMode&&"function"==typeof e.webkitSetPresentationMode&&!/iPhone|iPod/.test(navigator.userAgent)}var P=function(e){function t(){var e,r;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var n=arguments.length,i=new Array(n),a=0;a<n;a++)i[a]=arguments[a];return r=function(e,t){return!t||"object"!==u(t)&&"function"!=typeof t?h(e):t}(this,(e=f(t)).call.apply(e,[this].concat(i))),p(h(r),"onReady",(function(){var e;return(e=r.props).onReady.apply(e,arguments)})),p(h(r),"onPlay",(function(){var e;return(e=r.props).onPlay.apply(e,arguments)})),p(h(r),"onBuffer",(function(){var e;return(e=r.props).onBuffer.apply(e,arguments)})),p(h(r),"onBufferEnd",(function(){var e;return(e=r.props).onBufferEnd.apply(e,arguments)})),p(h(r),"onPause",(function(){var e;return(e=r.props).onPause.apply(e,arguments)})),p(h(r),"onEnded",(function(){var e;return(e=r.props).onEnded.apply(e,arguments)})),p(h(r),"onError",(function(){var e;return(e=r.props).onError.apply(e,arguments)})),p(h(r),"onEnablePIP",(function(){var e;return(e=r.props).onEnablePIP.apply(e,arguments)})),p(h(r),"onDisablePIP",(function(e){var t=r.props,n=t.onDisablePIP,o=t.playing;n(e),o&&r.play()})),p(h(r),"onPresentationModeChange",(function(e){if(r.player&&S(r.player)){var t=r.player.webkitPresentationMode;"picture-in-picture"===t?r.onEnablePIP(e):"inline"===t&&r.onDisablePIP(e)}})),p(h(r),"onSeek",(function(e){r.props.onSeek(e.target.currentTime)})),p(h(r),"mute",(function(){r.player.muted=!0})),p(h(r),"unmute",(function(){r.player.muted=!1})),p(h(r),"renderSourceElement",(function(e,t){return"string"==typeof e?o.default.createElement("source",{key:t,src:e}):o.default.createElement("source",l({key:t},e))})),p(h(r),"renderTrack",(function(e,t){return o.default.createElement("track",l({key:t},e))})),p(h(r),"ref",(function(e){r.player&&(r.prevPlayer=r.player),r.player=e})),r}var r,n,a;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&d(e,t)}(t,e),r=t,(n=[{key:"componentDidMount",value:function(){this.addListeners(this.player),y&&this.player.load()}},{key:"componentDidUpdate",value:function(e){this.shouldUseAudio(this.props)!==this.shouldUseAudio(e)&&(this.removeListeners(this.prevPlayer),this.addListeners(this.player))}},{key:"componentWillUnmount",value:function(){this.removeListeners(this.player)}},{key:"addListeners",value:function(e){var t=this.props.playsinline;e.addEventListener("canplay",this.onReady),e.addEventListener("play",this.onPlay),e.addEventListener("waiting",this.onBuffer),e.addEventListener("playing",this.onBufferEnd),e.addEventListener("pause",this.onPause),e.addEventListener("seeked",this.onSeek),e.addEventListener("ended",this.onEnded),e.addEventListener("error",this.onError),e.addEventListener("enterpictureinpicture",this.onEnablePIP),e.addEventListener("leavepictureinpicture",this.onDisablePIP),e.addEventListener("webkitpresentationmodechanged",this.onPresentationModeChange),t&&(e.setAttribute("playsinline",""),e.setAttribute("webkit-playsinline",""),e.setAttribute("x5-playsinline",""))}},{key:"removeListeners",value:function(e){e.removeEventListener("canplay",this.onReady),e.removeEventListener("play",this.onPlay),e.removeEventListener("waiting",this.onBuffer),e.removeEventListener("playing",this.onBufferEnd),e.removeEventListener("pause",this.onPause),e.removeEventListener("seeked",this.onSeek),e.removeEventListener("ended",this.onEnded),e.removeEventListener("error",this.onError),e.removeEventListener("enterpictureinpicture",this.onEnablePIP),e.removeEventListener("leavepictureinpicture",this.onDisablePIP),e.removeEventListener("webkitpresentationmodechanged",this.onPresentationModeChange)}},{key:"shouldUseAudio",value:function(e){return!e.config.file.forceVideo&&!e.config.file.attributes.poster&&(v.test(e.url)||e.config.file.forceAudio)}},{key:"shouldUseHLS",value:function(e){return g.test(e)&&!y||this.props.config.file.forceHLS}},{key:"shouldUseDASH",value:function(e){return b.test(e)||this.props.config.file.forceDASH}},{key:"load",value:function(e){var t=this,r=this.props.config.file,n=r.hlsVersion,o=r.dashVersion;if(this.shouldUseHLS(e)&&(0,i.getSDK)("https://cdnjs.cloudflare.com/ajax/libs/hls.js/VERSION/hls.min.js".replace("VERSION",n),"Hls").then((function(r){t.hls=new r(t.props.config.file.hlsOptions),t.hls.on(r.Events.ERROR,(function(e,n){t.props.onError(e,n,t.hls,r)})),t.hls.loadSource(e),t.hls.attachMedia(t.player)})),this.shouldUseDASH(e)&&(0,i.getSDK)("https://cdnjs.cloudflare.com/ajax/libs/dashjs/VERSION/dash.all.min.js".replace("VERSION",o),"dashjs").then((function(r){t.dash=r.MediaPlayer().create(),t.dash.initialize(t.player,e,t.props.playing),t.dash.on("error",t.props.onError),t.dash.getDebug().setLogToBrowserConsole(!1)})),e instanceof Array)this.player.load();else if((0,i.isMediaStream)(e))try{this.player.srcObject=e}catch(t){this.player.src=window.URL.createObjectURL(e)}}},{key:"play",value:function(){var e=this.player.play();e&&e.catch(this.props.onError)}},{key:"pause",value:function(){this.player.pause()}},{key:"stop",value:function(){this.player.removeAttribute("src"),this.hls&&this.hls.destroy(),this.dash&&this.dash.reset()}},{key:"seekTo",value:function(e){this.player.currentTime=e}},{key:"setVolume",value:function(e){this.player.volume=e}},{key:"enablePIP",value:function(){this.player.requestPictureInPicture&&document.pictureInPictureElement!==this.player?this.player.requestPictureInPicture():S(this.player)&&"picture-in-picture"!==this.player.webkitPresentationMode&&this.player.webkitSetPresentationMode("picture-in-picture")}},{key:"disablePIP",value:function(){document.exitPictureInPicture&&document.pictureInPictureElement===this.player?document.exitPictureInPicture():S(this.player)&&"inline"!==this.player.webkitPresentationMode&&this.player.webkitSetPresentationMode("inline")}},{key:"setPlaybackRate",value:function(e){this.player.playbackRate=e}},{key:"getDuration",value:function(){if(!this.player)return null;var e=this.player,t=e.duration,r=e.seekable;return t===1/0&&r.length>0?r.end(r.length-1):t}},{key:"getCurrentTime",value:function(){return this.player?this.player.currentTime:null}},{key:"getSecondsLoaded",value:function(){if(!this.player)return null;var e=this.player.buffered;if(0===e.length)return 0;var t=e.end(e.length-1),r=this.getDuration();return t>r?r:t}},{key:"getSource",value:function(e){var t=this.shouldUseHLS(e),r=this.shouldUseDASH(e);if(!(e instanceof Array||(0,i.isMediaStream)(e)||t||r))return _.test(e)?e.replace("www.dropbox.com","dl.dropboxusercontent.com"):e}},{key:"render",value:function(){var e=this.props,t=e.url,r=e.playing,n=e.loop,i=e.controls,a=e.muted,s=e.config,u=e.width,c=e.height,f=this.shouldUseAudio(this.props)?"audio":"video",h={width:"auto"===u?u:"100%",height:"auto"===c?c:"100%"};return o.default.createElement(f,l({ref:this.ref,src:this.getSource(t),style:h,preload:"auto",autoPlay:r||void 0,controls:i,muted:a,loop:n},s.file.attributes),t instanceof Array&&t.map(this.renderSourceElement),s.file.tracks.map(this.renderTrack))}}])&&c(r.prototype,n),a&&c(r,a),t}(o.Component);t.FilePlayer=P,p(P,"displayName","FilePlayer"),p(P,"canPlay",w),p(P,"canEnablePIP",(function(e){return w(e)&&(!!document.pictureInPictureEnabled||S())&&!v.test(e)}));var A=(0,a.default)(P);t.default=A},function(e,t,r){var n=r(70);e.exports=function(e,t){if(null==e)return{};var r,o,i=n(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)r=a[o],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(i[r]=e[r])}return i}},function(e,t,r){"use strict";var n=r(1);Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var o=n(r(0)),i=n(r(2)),a=function(e){var t=e.children,r=e.type;return o.default.createElement("div",{className:"react-pdf__message react-pdf__message--".concat(r)},t)};a.propTypes={children:i.default.node,type:i.default.oneOf(["error","loading","no-data"]).isRequired};var s=a;t.default=s},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var n=r(72).PDFLinkService;t.default=n},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var n=(0,r(0).createContext)(null);t.default=n},function(e,t,r){var n=r(85),o=r(86),i=r(87);e.exports=function(e,t){return n(e)||o(e,t)||i()}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),Object.defineProperty(t,"FilePlayer",{enumerable:!0,get:function(){return l.default}}),Object.defineProperty(t,"YouTube",{enumerable:!0,get:function(){return f.default}}),Object.defineProperty(t,"SoundCloud",{enumerable:!0,get:function(){return h.default}}),Object.defineProperty(t,"Vimeo",{enumerable:!0,get:function(){return d.default}}),Object.defineProperty(t,"Facebook",{enumerable:!0,get:function(){return p.default}}),Object.defineProperty(t,"Streamable",{enumerable:!0,get:function(){return y.default}}),Object.defineProperty(t,"Wistia",{enumerable:!0,get:function(){return v.default}}),Object.defineProperty(t,"Twitch",{enumerable:!0,get:function(){return m.default}}),Object.defineProperty(t,"DailyMotion",{enumerable:!0,get:function(){return g.default}}),Object.defineProperty(t,"Mixcloud",{enumerable:!0,get:function(){return b.default}}),t.default=void 0;var n=S(r(0)),o=r(20),i=r(3),a=_(r(52)),s=_(r(26)),u=_(r(53)),l=S(r(39)),c=_(r(54)),f=_(r(25)),h=_(r(27)),d=_(r(28)),p=_(r(34)),y=_(r(35)),v=_(r(36)),m=_(r(37)),g=_(r(29)),b=_(r(38));function _(e){return e&&e.__esModule?e:{default:e}}function w(){if("function"!=typeof WeakMap)return null;var e=new WeakMap;return w=function(){return e},e}function S(e){if(e&&e.__esModule)return e;var t=w();if(t&&t.has(e))return t.get(e);var r={};if(null!=e){var n=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var o in e)if(Object.prototype.hasOwnProperty.call(e,o)){var i=n?Object.getOwnPropertyDescriptor(e,o):null;i&&(i.get||i.set)?Object.defineProperty(r,o,i):r[o]=e[o]}}return r.default=e,t&&t.set(e,r),r}function P(e){return(P="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function A(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function k(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?A(r,!0).forEach((function(t){j(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):A(r).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function E(){return(E=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var n in r)Object.prototype.hasOwnProperty.call(r,n)&&(e[n]=r[n])}return e}).apply(this,arguments)}function x(e){return function(e){if(Array.isArray(e)){for(var t=0,r=new Array(e.length);t<e.length;t++)r[t]=e[t];return r}}(e)||function(e){if(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e))return Array.from(e)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}function O(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function R(e){return(R=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function C(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function T(e,t){return(T=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function j(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}var L=Object.keys(o.propTypes),I=[],D=function(e){function t(){var e,r;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var n=arguments.length,a=new Array(n),s=0;s<n;s++)a[s]=arguments[s];return r=function(e,t){return!t||"object"!==P(t)&&"function"!=typeof t?C(e):t}(this,(e=R(t)).call.apply(e,[this].concat(a))),j(C(r),"config",(0,i.getConfig)(r.props,o.defaultProps,!0)),j(C(r),"state",{showPreview:!!r.props.light}),j(C(r),"handleClickPreview",(function(){r.setState({showPreview:!1})})),j(C(r),"showPreview",(function(){r.setState({showPreview:!0})})),j(C(r),"getDuration",(function(){return r.player?r.player.getDuration():null})),j(C(r),"getCurrentTime",(function(){return r.player?r.player.getCurrentTime():null})),j(C(r),"getSecondsLoaded",(function(){return r.player?r.player.getSecondsLoaded():null})),j(C(r),"getInternalPlayer",(function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"player";return r.player?r.player.getInternalPlayer(e):null})),j(C(r),"seekTo",(function(e,t){if(!r.player)return null;r.player.seekTo(e,t)})),j(C(r),"handleReady",(function(){r.props.onReady(C(r))})),j(C(r),"wrapperRef",(function(e){r.wrapper=e})),j(C(r),"activePlayerRef",(function(e){r.player=e})),r}var r,f,h;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&T(e,t)}(t,e),r=t,(f=[{key:"componentDidMount",value:function(){this.props.progressFrequency&&console.warn("ReactPlayer: %cprogressFrequency%c is deprecated, please use %cprogressInterval%c instead","font-weight: bold","","font-weight: bold","")}},{key:"shouldComponentUpdate",value:function(e,t){return!(0,i.isEqual)(this.props,e)||!(0,i.isEqual)(this.state,t)}},{key:"componentDidUpdate",value:function(e){var t=this.props.light;this.config=(0,i.getConfig)(this.props,o.defaultProps),!e.light&&t&&this.setState({showPreview:!0}),e.light&&!t&&this.setState({showPreview:!1})}},{key:"getActivePlayer",value:function(e){for(var t=0,r=[].concat(x(I),x(a.default));t<r.length;t++){var n=r[t];if(n.canPlay(e))return n}return l.FilePlayer}},{key:"renderActivePlayer",value:function(e,t){return e?n.default.createElement(s.default,E({},this.props,{key:t.displayName,ref:this.activePlayerRef,config:this.config,activePlayer:t,onReady:this.handleReady})):null}},{key:"sortPlayers",value:function(e,t){return e&&t?e.key<t.key?-1:1:0}},{key:"render",value:function(){var e=this.props,t=e.url,r=e.controls,a=e.style,s=e.width,l=e.height,f=e.light,h=e.playIcon,d=e.wrapper,p=this.state.showPreview&&t,y=(0,i.omit)(this.props,L,o.DEPRECATED_CONFIG_PROPS),v=this.getActivePlayer(t),m=this.renderActivePlayer(t,v),g=(0,c.default)(t,r,this.config),b=[m].concat(x(g)).sort(this.sortPlayers),_=n.default.createElement(u.default,{url:t,light:f,playIcon:h,onClick:this.handleClickPreview});return n.default.createElement(d,E({ref:this.wrapperRef,style:k({},a,{width:s,height:l})},y),p?_:b)}}])&&O(r.prototype,f),h&&O(r,h),t}(n.Component);t.default=D,j(D,"addCustomPlayer",(function(e){I.push(e)})),j(D,"removeCustomPlayers",(function(){I=[]})),j(D,"displayName","ReactPlayer"),j(D,"propTypes",o.propTypes),j(D,"defaultProps",o.defaultProps),j(D,"canPlay",(function(e){for(var t=0,r=[].concat(x(I),x(a.default));t<r.length;t++){if(r[t].canPlay(e))return!0}return!1})),j(D,"canEnablePIP",(function(e){for(var t=0,r=[].concat(x(I),x(a.default));t<r.length;t++){var n=r[t];if(n.canEnablePIP&&n.canEnablePIP(e))return!0}return!1}))},function(e,t,r){"use strict";(function(e){
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <http://feross.org>
 * @license  MIT
 */
var n=r(55),o=r(56),i=r(57);function a(){return u.TYPED_ARRAY_SUPPORT?2147483647:1073741823}function s(e,t){if(a()<t)throw new RangeError("Invalid typed array length");return u.TYPED_ARRAY_SUPPORT?(e=new Uint8Array(t)).__proto__=u.prototype:(null===e&&(e=new u(t)),e.length=t),e}function u(e,t,r){if(!(u.TYPED_ARRAY_SUPPORT||this instanceof u))return new u(e,t,r);if("number"==typeof e){if("string"==typeof t)throw new Error("If encoding is specified then the first argument must be a string");return f(this,e)}return l(this,e,t,r)}function l(e,t,r,n){if("number"==typeof t)throw new TypeError('"value" argument must not be a number');return"undefined"!=typeof ArrayBuffer&&t instanceof ArrayBuffer?function(e,t,r,n){if(t.byteLength,r<0||t.byteLength<r)throw new RangeError("'offset' is out of bounds");if(t.byteLength<r+(n||0))throw new RangeError("'length' is out of bounds");t=void 0===r&&void 0===n?new Uint8Array(t):void 0===n?new Uint8Array(t,r):new Uint8Array(t,r,n);u.TYPED_ARRAY_SUPPORT?(e=t).__proto__=u.prototype:e=h(e,t);return e}(e,t,r,n):"string"==typeof t?function(e,t,r){"string"==typeof r&&""!==r||(r="utf8");if(!u.isEncoding(r))throw new TypeError('"encoding" must be a valid string encoding');var n=0|p(t,r),o=(e=s(e,n)).write(t,r);o!==n&&(e=e.slice(0,o));return e}(e,t,r):function(e,t){if(u.isBuffer(t)){var r=0|d(t.length);return 0===(e=s(e,r)).length?e:(t.copy(e,0,0,r),e)}if(t){if("undefined"!=typeof ArrayBuffer&&t.buffer instanceof ArrayBuffer||"length"in t)return"number"!=typeof t.length||(n=t.length)!=n?s(e,0):h(e,t);if("Buffer"===t.type&&i(t.data))return h(e,t.data)}var n;throw new TypeError("First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.")}(e,t)}function c(e){if("number"!=typeof e)throw new TypeError('"size" argument must be a number');if(e<0)throw new RangeError('"size" argument must not be negative')}function f(e,t){if(c(t),e=s(e,t<0?0:0|d(t)),!u.TYPED_ARRAY_SUPPORT)for(var r=0;r<t;++r)e[r]=0;return e}function h(e,t){var r=t.length<0?0:0|d(t.length);e=s(e,r);for(var n=0;n<r;n+=1)e[n]=255&t[n];return e}function d(e){if(e>=a())throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x"+a().toString(16)+" bytes");return 0|e}function p(e,t){if(u.isBuffer(e))return e.length;if("undefined"!=typeof ArrayBuffer&&"function"==typeof ArrayBuffer.isView&&(ArrayBuffer.isView(e)||e instanceof ArrayBuffer))return e.byteLength;"string"!=typeof e&&(e=""+e);var r=e.length;if(0===r)return 0;for(var n=!1;;)switch(t){case"ascii":case"latin1":case"binary":return r;case"utf8":case"utf-8":case void 0:return W(e).length;case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return 2*r;case"hex":return r>>>1;case"base64":return B(e).length;default:if(n)return W(e).length;t=(""+t).toLowerCase(),n=!0}}function y(e,t,r){var n=!1;if((void 0===t||t<0)&&(t=0),t>this.length)return"";if((void 0===r||r>this.length)&&(r=this.length),r<=0)return"";if((r>>>=0)<=(t>>>=0))return"";for(e||(e="utf8");;)switch(e){case"hex":return C(this,t,r);case"utf8":case"utf-8":return E(this,t,r);case"ascii":return O(this,t,r);case"latin1":case"binary":return R(this,t,r);case"base64":return k(this,t,r);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return T(this,t,r);default:if(n)throw new TypeError("Unknown encoding: "+e);e=(e+"").toLowerCase(),n=!0}}function v(e,t,r){var n=e[t];e[t]=e[r],e[r]=n}function m(e,t,r,n,o){if(0===e.length)return-1;if("string"==typeof r?(n=r,r=0):r>2147483647?r=2147483647:r<-2147483648&&(r=-2147483648),r=+r,isNaN(r)&&(r=o?0:e.length-1),r<0&&(r=e.length+r),r>=e.length){if(o)return-1;r=e.length-1}else if(r<0){if(!o)return-1;r=0}if("string"==typeof t&&(t=u.from(t,n)),u.isBuffer(t))return 0===t.length?-1:g(e,t,r,n,o);if("number"==typeof t)return t&=255,u.TYPED_ARRAY_SUPPORT&&"function"==typeof Uint8Array.prototype.indexOf?o?Uint8Array.prototype.indexOf.call(e,t,r):Uint8Array.prototype.lastIndexOf.call(e,t,r):g(e,[t],r,n,o);throw new TypeError("val must be string, number or Buffer")}function g(e,t,r,n,o){var i,a=1,s=e.length,u=t.length;if(void 0!==n&&("ucs2"===(n=String(n).toLowerCase())||"ucs-2"===n||"utf16le"===n||"utf-16le"===n)){if(e.length<2||t.length<2)return-1;a=2,s/=2,u/=2,r/=2}function l(e,t){return 1===a?e[t]:e.readUInt16BE(t*a)}if(o){var c=-1;for(i=r;i<s;i++)if(l(e,i)===l(t,-1===c?0:i-c)){if(-1===c&&(c=i),i-c+1===u)return c*a}else-1!==c&&(i-=i-c),c=-1}else for(r+u>s&&(r=s-u),i=r;i>=0;i--){for(var f=!0,h=0;h<u;h++)if(l(e,i+h)!==l(t,h)){f=!1;break}if(f)return i}return-1}function b(e,t,r,n){r=Number(r)||0;var o=e.length-r;n?(n=Number(n))>o&&(n=o):n=o;var i=t.length;if(i%2!=0)throw new TypeError("Invalid hex string");n>i/2&&(n=i/2);for(var a=0;a<n;++a){var s=parseInt(t.substr(2*a,2),16);if(isNaN(s))return a;e[r+a]=s}return a}function _(e,t,r,n){return G(W(t,e.length-r),e,r,n)}function w(e,t,r,n){return G(function(e){for(var t=[],r=0;r<e.length;++r)t.push(255&e.charCodeAt(r));return t}(t),e,r,n)}function S(e,t,r,n){return w(e,t,r,n)}function P(e,t,r,n){return G(B(t),e,r,n)}function A(e,t,r,n){return G(function(e,t){for(var r,n,o,i=[],a=0;a<e.length&&!((t-=2)<0);++a)r=e.charCodeAt(a),n=r>>8,o=r%256,i.push(o),i.push(n);return i}(t,e.length-r),e,r,n)}function k(e,t,r){return 0===t&&r===e.length?n.fromByteArray(e):n.fromByteArray(e.slice(t,r))}function E(e,t,r){r=Math.min(e.length,r);for(var n=[],o=t;o<r;){var i,a,s,u,l=e[o],c=null,f=l>239?4:l>223?3:l>191?2:1;if(o+f<=r)switch(f){case 1:l<128&&(c=l);break;case 2:128==(192&(i=e[o+1]))&&(u=(31&l)<<6|63&i)>127&&(c=u);break;case 3:i=e[o+1],a=e[o+2],128==(192&i)&&128==(192&a)&&(u=(15&l)<<12|(63&i)<<6|63&a)>2047&&(u<55296||u>57343)&&(c=u);break;case 4:i=e[o+1],a=e[o+2],s=e[o+3],128==(192&i)&&128==(192&a)&&128==(192&s)&&(u=(15&l)<<18|(63&i)<<12|(63&a)<<6|63&s)>65535&&u<1114112&&(c=u)}null===c?(c=65533,f=1):c>65535&&(c-=65536,n.push(c>>>10&1023|55296),c=56320|1023&c),n.push(c),o+=f}return function(e){var t=e.length;if(t<=x)return String.fromCharCode.apply(String,e);var r="",n=0;for(;n<t;)r+=String.fromCharCode.apply(String,e.slice(n,n+=x));return r}(n)}t.Buffer=u,t.SlowBuffer=function(e){+e!=e&&(e=0);return u.alloc(+e)},t.INSPECT_MAX_BYTES=50,u.TYPED_ARRAY_SUPPORT=void 0!==e.TYPED_ARRAY_SUPPORT?e.TYPED_ARRAY_SUPPORT:function(){try{var e=new Uint8Array(1);return e.__proto__={__proto__:Uint8Array.prototype,foo:function(){return 42}},42===e.foo()&&"function"==typeof e.subarray&&0===e.subarray(1,1).byteLength}catch(e){return!1}}(),t.kMaxLength=a(),u.poolSize=8192,u._augment=function(e){return e.__proto__=u.prototype,e},u.from=function(e,t,r){return l(null,e,t,r)},u.TYPED_ARRAY_SUPPORT&&(u.prototype.__proto__=Uint8Array.prototype,u.__proto__=Uint8Array,"undefined"!=typeof Symbol&&Symbol.species&&u[Symbol.species]===u&&Object.defineProperty(u,Symbol.species,{value:null,configurable:!0})),u.alloc=function(e,t,r){return function(e,t,r,n){return c(t),t<=0?s(e,t):void 0!==r?"string"==typeof n?s(e,t).fill(r,n):s(e,t).fill(r):s(e,t)}(null,e,t,r)},u.allocUnsafe=function(e){return f(null,e)},u.allocUnsafeSlow=function(e){return f(null,e)},u.isBuffer=function(e){return!(null==e||!e._isBuffer)},u.compare=function(e,t){if(!u.isBuffer(e)||!u.isBuffer(t))throw new TypeError("Arguments must be Buffers");if(e===t)return 0;for(var r=e.length,n=t.length,o=0,i=Math.min(r,n);o<i;++o)if(e[o]!==t[o]){r=e[o],n=t[o];break}return r<n?-1:n<r?1:0},u.isEncoding=function(e){switch(String(e).toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"latin1":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return!0;default:return!1}},u.concat=function(e,t){if(!i(e))throw new TypeError('"list" argument must be an Array of Buffers');if(0===e.length)return u.alloc(0);var r;if(void 0===t)for(t=0,r=0;r<e.length;++r)t+=e[r].length;var n=u.allocUnsafe(t),o=0;for(r=0;r<e.length;++r){var a=e[r];if(!u.isBuffer(a))throw new TypeError('"list" argument must be an Array of Buffers');a.copy(n,o),o+=a.length}return n},u.byteLength=p,u.prototype._isBuffer=!0,u.prototype.swap16=function(){var e=this.length;if(e%2!=0)throw new RangeError("Buffer size must be a multiple of 16-bits");for(var t=0;t<e;t+=2)v(this,t,t+1);return this},u.prototype.swap32=function(){var e=this.length;if(e%4!=0)throw new RangeError("Buffer size must be a multiple of 32-bits");for(var t=0;t<e;t+=4)v(this,t,t+3),v(this,t+1,t+2);return this},u.prototype.swap64=function(){var e=this.length;if(e%8!=0)throw new RangeError("Buffer size must be a multiple of 64-bits");for(var t=0;t<e;t+=8)v(this,t,t+7),v(this,t+1,t+6),v(this,t+2,t+5),v(this,t+3,t+4);return this},u.prototype.toString=function(){var e=0|this.length;return 0===e?"":0===arguments.length?E(this,0,e):y.apply(this,arguments)},u.prototype.equals=function(e){if(!u.isBuffer(e))throw new TypeError("Argument must be a Buffer");return this===e||0===u.compare(this,e)},u.prototype.inspect=function(){var e="",r=t.INSPECT_MAX_BYTES;return this.length>0&&(e=this.toString("hex",0,r).match(/.{2}/g).join(" "),this.length>r&&(e+=" ... ")),"<Buffer "+e+">"},u.prototype.compare=function(e,t,r,n,o){if(!u.isBuffer(e))throw new TypeError("Argument must be a Buffer");if(void 0===t&&(t=0),void 0===r&&(r=e?e.length:0),void 0===n&&(n=0),void 0===o&&(o=this.length),t<0||r>e.length||n<0||o>this.length)throw new RangeError("out of range index");if(n>=o&&t>=r)return 0;if(n>=o)return-1;if(t>=r)return 1;if(this===e)return 0;for(var i=(o>>>=0)-(n>>>=0),a=(r>>>=0)-(t>>>=0),s=Math.min(i,a),l=this.slice(n,o),c=e.slice(t,r),f=0;f<s;++f)if(l[f]!==c[f]){i=l[f],a=c[f];break}return i<a?-1:a<i?1:0},u.prototype.includes=function(e,t,r){return-1!==this.indexOf(e,t,r)},u.prototype.indexOf=function(e,t,r){return m(this,e,t,r,!0)},u.prototype.lastIndexOf=function(e,t,r){return m(this,e,t,r,!1)},u.prototype.write=function(e,t,r,n){if(void 0===t)n="utf8",r=this.length,t=0;else if(void 0===r&&"string"==typeof t)n=t,r=this.length,t=0;else{if(!isFinite(t))throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");t|=0,isFinite(r)?(r|=0,void 0===n&&(n="utf8")):(n=r,r=void 0)}var o=this.length-t;if((void 0===r||r>o)&&(r=o),e.length>0&&(r<0||t<0)||t>this.length)throw new RangeError("Attempt to write outside buffer bounds");n||(n="utf8");for(var i=!1;;)switch(n){case"hex":return b(this,e,t,r);case"utf8":case"utf-8":return _(this,e,t,r);case"ascii":return w(this,e,t,r);case"latin1":case"binary":return S(this,e,t,r);case"base64":return P(this,e,t,r);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return A(this,e,t,r);default:if(i)throw new TypeError("Unknown encoding: "+n);n=(""+n).toLowerCase(),i=!0}},u.prototype.toJSON=function(){return{type:"Buffer",data:Array.prototype.slice.call(this._arr||this,0)}};var x=4096;function O(e,t,r){var n="";r=Math.min(e.length,r);for(var o=t;o<r;++o)n+=String.fromCharCode(127&e[o]);return n}function R(e,t,r){var n="";r=Math.min(e.length,r);for(var o=t;o<r;++o)n+=String.fromCharCode(e[o]);return n}function C(e,t,r){var n=e.length;(!t||t<0)&&(t=0),(!r||r<0||r>n)&&(r=n);for(var o="",i=t;i<r;++i)o+=U(e[i]);return o}function T(e,t,r){for(var n=e.slice(t,r),o="",i=0;i<n.length;i+=2)o+=String.fromCharCode(n[i]+256*n[i+1]);return o}function j(e,t,r){if(e%1!=0||e<0)throw new RangeError("offset is not uint");if(e+t>r)throw new RangeError("Trying to access beyond buffer length")}function L(e,t,r,n,o,i){if(!u.isBuffer(e))throw new TypeError('"buffer" argument must be a Buffer instance');if(t>o||t<i)throw new RangeError('"value" argument is out of bounds');if(r+n>e.length)throw new RangeError("Index out of range")}function I(e,t,r,n){t<0&&(t=65535+t+1);for(var o=0,i=Math.min(e.length-r,2);o<i;++o)e[r+o]=(t&255<<8*(n?o:1-o))>>>8*(n?o:1-o)}function D(e,t,r,n){t<0&&(t=4294967295+t+1);for(var o=0,i=Math.min(e.length-r,4);o<i;++o)e[r+o]=t>>>8*(n?o:3-o)&255}function M(e,t,r,n,o,i){if(r+n>e.length)throw new RangeError("Index out of range");if(r<0)throw new RangeError("Index out of range")}function F(e,t,r,n,i){return i||M(e,0,r,4),o.write(e,t,r,n,23,4),r+4}function N(e,t,r,n,i){return i||M(e,0,r,8),o.write(e,t,r,n,52,8),r+8}u.prototype.slice=function(e,t){var r,n=this.length;if((e=~~e)<0?(e+=n)<0&&(e=0):e>n&&(e=n),(t=void 0===t?n:~~t)<0?(t+=n)<0&&(t=0):t>n&&(t=n),t<e&&(t=e),u.TYPED_ARRAY_SUPPORT)(r=this.subarray(e,t)).__proto__=u.prototype;else{var o=t-e;r=new u(o,void 0);for(var i=0;i<o;++i)r[i]=this[i+e]}return r},u.prototype.readUIntLE=function(e,t,r){e|=0,t|=0,r||j(e,t,this.length);for(var n=this[e],o=1,i=0;++i<t&&(o*=256);)n+=this[e+i]*o;return n},u.prototype.readUIntBE=function(e,t,r){e|=0,t|=0,r||j(e,t,this.length);for(var n=this[e+--t],o=1;t>0&&(o*=256);)n+=this[e+--t]*o;return n},u.prototype.readUInt8=function(e,t){return t||j(e,1,this.length),this[e]},u.prototype.readUInt16LE=function(e,t){return t||j(e,2,this.length),this[e]|this[e+1]<<8},u.prototype.readUInt16BE=function(e,t){return t||j(e,2,this.length),this[e]<<8|this[e+1]},u.prototype.readUInt32LE=function(e,t){return t||j(e,4,this.length),(this[e]|this[e+1]<<8|this[e+2]<<16)+16777216*this[e+3]},u.prototype.readUInt32BE=function(e,t){return t||j(e,4,this.length),16777216*this[e]+(this[e+1]<<16|this[e+2]<<8|this[e+3])},u.prototype.readIntLE=function(e,t,r){e|=0,t|=0,r||j(e,t,this.length);for(var n=this[e],o=1,i=0;++i<t&&(o*=256);)n+=this[e+i]*o;return n>=(o*=128)&&(n-=Math.pow(2,8*t)),n},u.prototype.readIntBE=function(e,t,r){e|=0,t|=0,r||j(e,t,this.length);for(var n=t,o=1,i=this[e+--n];n>0&&(o*=256);)i+=this[e+--n]*o;return i>=(o*=128)&&(i-=Math.pow(2,8*t)),i},u.prototype.readInt8=function(e,t){return t||j(e,1,this.length),128&this[e]?-1*(255-this[e]+1):this[e]},u.prototype.readInt16LE=function(e,t){t||j(e,2,this.length);var r=this[e]|this[e+1]<<8;return 32768&r?4294901760|r:r},u.prototype.readInt16BE=function(e,t){t||j(e,2,this.length);var r=this[e+1]|this[e]<<8;return 32768&r?4294901760|r:r},u.prototype.readInt32LE=function(e,t){return t||j(e,4,this.length),this[e]|this[e+1]<<8|this[e+2]<<16|this[e+3]<<24},u.prototype.readInt32BE=function(e,t){return t||j(e,4,this.length),this[e]<<24|this[e+1]<<16|this[e+2]<<8|this[e+3]},u.prototype.readFloatLE=function(e,t){return t||j(e,4,this.length),o.read(this,e,!0,23,4)},u.prototype.readFloatBE=function(e,t){return t||j(e,4,this.length),o.read(this,e,!1,23,4)},u.prototype.readDoubleLE=function(e,t){return t||j(e,8,this.length),o.read(this,e,!0,52,8)},u.prototype.readDoubleBE=function(e,t){return t||j(e,8,this.length),o.read(this,e,!1,52,8)},u.prototype.writeUIntLE=function(e,t,r,n){(e=+e,t|=0,r|=0,n)||L(this,e,t,r,Math.pow(2,8*r)-1,0);var o=1,i=0;for(this[t]=255&e;++i<r&&(o*=256);)this[t+i]=e/o&255;return t+r},u.prototype.writeUIntBE=function(e,t,r,n){(e=+e,t|=0,r|=0,n)||L(this,e,t,r,Math.pow(2,8*r)-1,0);var o=r-1,i=1;for(this[t+o]=255&e;--o>=0&&(i*=256);)this[t+o]=e/i&255;return t+r},u.prototype.writeUInt8=function(e,t,r){return e=+e,t|=0,r||L(this,e,t,1,255,0),u.TYPED_ARRAY_SUPPORT||(e=Math.floor(e)),this[t]=255&e,t+1},u.prototype.writeUInt16LE=function(e,t,r){return e=+e,t|=0,r||L(this,e,t,2,65535,0),u.TYPED_ARRAY_SUPPORT?(this[t]=255&e,this[t+1]=e>>>8):I(this,e,t,!0),t+2},u.prototype.writeUInt16BE=function(e,t,r){return e=+e,t|=0,r||L(this,e,t,2,65535,0),u.TYPED_ARRAY_SUPPORT?(this[t]=e>>>8,this[t+1]=255&e):I(this,e,t,!1),t+2},u.prototype.writeUInt32LE=function(e,t,r){return e=+e,t|=0,r||L(this,e,t,4,4294967295,0),u.TYPED_ARRAY_SUPPORT?(this[t+3]=e>>>24,this[t+2]=e>>>16,this[t+1]=e>>>8,this[t]=255&e):D(this,e,t,!0),t+4},u.prototype.writeUInt32BE=function(e,t,r){return e=+e,t|=0,r||L(this,e,t,4,4294967295,0),u.TYPED_ARRAY_SUPPORT?(this[t]=e>>>24,this[t+1]=e>>>16,this[t+2]=e>>>8,this[t+3]=255&e):D(this,e,t,!1),t+4},u.prototype.writeIntLE=function(e,t,r,n){if(e=+e,t|=0,!n){var o=Math.pow(2,8*r-1);L(this,e,t,r,o-1,-o)}var i=0,a=1,s=0;for(this[t]=255&e;++i<r&&(a*=256);)e<0&&0===s&&0!==this[t+i-1]&&(s=1),this[t+i]=(e/a>>0)-s&255;return t+r},u.prototype.writeIntBE=function(e,t,r,n){if(e=+e,t|=0,!n){var o=Math.pow(2,8*r-1);L(this,e,t,r,o-1,-o)}var i=r-1,a=1,s=0;for(this[t+i]=255&e;--i>=0&&(a*=256);)e<0&&0===s&&0!==this[t+i+1]&&(s=1),this[t+i]=(e/a>>0)-s&255;return t+r},u.prototype.writeInt8=function(e,t,r){return e=+e,t|=0,r||L(this,e,t,1,127,-128),u.TYPED_ARRAY_SUPPORT||(e=Math.floor(e)),e<0&&(e=255+e+1),this[t]=255&e,t+1},u.prototype.writeInt16LE=function(e,t,r){return e=+e,t|=0,r||L(this,e,t,2,32767,-32768),u.TYPED_ARRAY_SUPPORT?(this[t]=255&e,this[t+1]=e>>>8):I(this,e,t,!0),t+2},u.prototype.writeInt16BE=function(e,t,r){return e=+e,t|=0,r||L(this,e,t,2,32767,-32768),u.TYPED_ARRAY_SUPPORT?(this[t]=e>>>8,this[t+1]=255&e):I(this,e,t,!1),t+2},u.prototype.writeInt32LE=function(e,t,r){return e=+e,t|=0,r||L(this,e,t,4,2147483647,-2147483648),u.TYPED_ARRAY_SUPPORT?(this[t]=255&e,this[t+1]=e>>>8,this[t+2]=e>>>16,this[t+3]=e>>>24):D(this,e,t,!0),t+4},u.prototype.writeInt32BE=function(e,t,r){return e=+e,t|=0,r||L(this,e,t,4,2147483647,-2147483648),e<0&&(e=4294967295+e+1),u.TYPED_ARRAY_SUPPORT?(this[t]=e>>>24,this[t+1]=e>>>16,this[t+2]=e>>>8,this[t+3]=255&e):D(this,e,t,!1),t+4},u.prototype.writeFloatLE=function(e,t,r){return F(this,e,t,!0,r)},u.prototype.writeFloatBE=function(e,t,r){return F(this,e,t,!1,r)},u.prototype.writeDoubleLE=function(e,t,r){return N(this,e,t,!0,r)},u.prototype.writeDoubleBE=function(e,t,r){return N(this,e,t,!1,r)},u.prototype.copy=function(e,t,r,n){if(r||(r=0),n||0===n||(n=this.length),t>=e.length&&(t=e.length),t||(t=0),n>0&&n<r&&(n=r),n===r)return 0;if(0===e.length||0===this.length)return 0;if(t<0)throw new RangeError("targetStart out of bounds");if(r<0||r>=this.length)throw new RangeError("sourceStart out of bounds");if(n<0)throw new RangeError("sourceEnd out of bounds");n>this.length&&(n=this.length),e.length-t<n-r&&(n=e.length-t+r);var o,i=n-r;if(this===e&&r<t&&t<n)for(o=i-1;o>=0;--o)e[o+t]=this[o+r];else if(i<1e3||!u.TYPED_ARRAY_SUPPORT)for(o=0;o<i;++o)e[o+t]=this[o+r];else Uint8Array.prototype.set.call(e,this.subarray(r,r+i),t);return i},u.prototype.fill=function(e,t,r,n){if("string"==typeof e){if("string"==typeof t?(n=t,t=0,r=this.length):"string"==typeof r&&(n=r,r=this.length),1===e.length){var o=e.charCodeAt(0);o<256&&(e=o)}if(void 0!==n&&"string"!=typeof n)throw new TypeError("encoding must be a string");if("string"==typeof n&&!u.isEncoding(n))throw new TypeError("Unknown encoding: "+n)}else"number"==typeof e&&(e&=255);if(t<0||this.length<t||this.length<r)throw new RangeError("Out of range index");if(r<=t)return this;var i;if(t>>>=0,r=void 0===r?this.length:r>>>0,e||(e=0),"number"==typeof e)for(i=t;i<r;++i)this[i]=e;else{var a=u.isBuffer(e)?e:W(new u(e,n).toString()),s=a.length;for(i=0;i<r-t;++i)this[i+t]=a[i%s]}return this};var q=/[^+\/0-9A-Za-z-_]/g;function U(e){return e<16?"0"+e.toString(16):e.toString(16)}function W(e,t){var r;t=t||1/0;for(var n=e.length,o=null,i=[],a=0;a<n;++a){if((r=e.charCodeAt(a))>55295&&r<57344){if(!o){if(r>56319){(t-=3)>-1&&i.push(239,191,189);continue}if(a+1===n){(t-=3)>-1&&i.push(239,191,189);continue}o=r;continue}if(r<56320){(t-=3)>-1&&i.push(239,191,189),o=r;continue}r=65536+(o-55296<<10|r-56320)}else o&&(t-=3)>-1&&i.push(239,191,189);if(o=null,r<128){if((t-=1)<0)break;i.push(r)}else if(r<2048){if((t-=2)<0)break;i.push(r>>6|192,63&r|128)}else if(r<65536){if((t-=3)<0)break;i.push(r>>12|224,r>>6&63|128,63&r|128)}else{if(!(r<1114112))throw new Error("Invalid code point");if((t-=4)<0)break;i.push(r>>18|240,r>>12&63|128,r>>6&63|128,63&r|128)}}return i}function B(e){return n.toByteArray(function(e){if((e=function(e){return e.trim?e.trim():e.replace(/^\s+|\s+$/g,"")}(e).replace(q,"")).length<2)return"";for(;e.length%4!=0;)e+="=";return e}(e))}function G(e,t,r,n){for(var o=0;o<n&&!(o+r>=t.length||o>=e.length);++o)t[o+r]=e[o];return o}}).call(this,r(24))},function(e,t){var r,n,o=e.exports={};function i(){throw new Error("setTimeout has not been defined")}function a(){throw new Error("clearTimeout has not been defined")}function s(e){if(r===setTimeout)return setTimeout(e,0);if((r===i||!r)&&setTimeout)return r=setTimeout,setTimeout(e,0);try{return r(e,0)}catch(t){try{return r.call(null,e,0)}catch(t){return r.call(this,e,0)}}}!function(){try{r="function"==typeof setTimeout?setTimeout:i}catch(e){r=i}try{n="function"==typeof clearTimeout?clearTimeout:a}catch(e){n=a}}();var u,l=[],c=!1,f=-1;function h(){c&&u&&(c=!1,u.length?l=u.concat(l):f=-1,l.length&&d())}function d(){if(!c){var e=s(h);c=!0;for(var t=l.length;t;){for(u=l,l=[];++f<t;)u&&u[f].run();f=-1,t=l.length}u=null,c=!1,function(e){if(n===clearTimeout)return clearTimeout(e);if((n===a||!n)&&clearTimeout)return n=clearTimeout,clearTimeout(e);try{n(e)}catch(t){try{return n.call(null,e)}catch(t){return n.call(this,e)}}}(e)}}function p(e,t){this.fun=e,this.array=t}function y(){}o.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1)for(var r=1;r<arguments.length;r++)t[r-1]=arguments[r];l.push(new p(e,t)),1!==l.length||c||s(d)},p.prototype.run=function(){this.fun.apply(null,this.array)},o.title="browser",o.browser=!0,o.env={},o.argv=[],o.version="",o.versions={},o.on=y,o.addListener=y,o.once=y,o.off=y,o.removeListener=y,o.removeAllListeners=y,o.emit=y,o.prependListener=y,o.prependOnceListener=y,o.listeners=function(e){return[]},o.binding=function(e){throw new Error("process.binding is not supported")},o.cwd=function(){return"/"},o.chdir=function(e){throw new Error("process.chdir is not supported")},o.umask=function(){return 0}},function(e,t,r){"use strict";var n=r(49);function o(){}function i(){}i.resetWarningCache=o,e.exports=function(){function e(e,t,r,o,i,a){if(a!==n){var s=new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types");throw s.name="Invariant Violation",s}}function t(){return e}e.isRequired=e;var r={array:e,bool:e,func:e,number:e,object:e,string:e,symbol:e,any:e,arrayOf:t,element:e,elementType:e,instanceOf:t,node:e,objectOf:t,oneOf:t,oneOfType:t,shape:t,exact:t,checkPropTypes:i,resetWarningCache:o};return r.PropTypes=r,r}},function(e,t,r){"use strict";e.exports="SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED"},function(e,t){function r(e,t){e.onload=function(){this.onerror=this.onload=null,t(null,e)},e.onerror=function(){this.onerror=this.onload=null,t(new Error("Failed to load "+this.src),e)}}function n(e,t){e.onreadystatechange=function(){"complete"!=this.readyState&&"loaded"!=this.readyState||(this.onreadystatechange=null,t(null,e))}}e.exports=function(e,t,o){var i=document.head||document.getElementsByTagName("head")[0],a=document.createElement("script");"function"==typeof t&&(o=t,t={}),t=t||{},o=o||function(){},a.type=t.type||"text/javascript",a.charset=t.charset||"utf8",a.async=!("async"in t)||!!t.async,a.src=e,t.attrs&&function(e,t){for(var r in t)e.setAttribute(r,t[r])}(a,t.attrs),t.text&&(a.text=""+t.text),("onload"in a?r:n)(a,o),a.onload||r(a,o),i.appendChild(a)}},function(e,t,r){"use strict";var n=function(e){return function(e){return!!e&&"object"==typeof e}(e)&&!function(e){var t=Object.prototype.toString.call(e);return"[object RegExp]"===t||"[object Date]"===t||function(e){return e.$$typeof===o}(e)}(e)};var o="function"==typeof Symbol&&Symbol.for?Symbol.for("react.element"):60103;function i(e,t){return!1!==t.clone&&t.isMergeableObject(e)?c((r=e,Array.isArray(r)?[]:{}),e,t):e;var r}function a(e,t,r){return e.concat(t).map((function(e){return i(e,r)}))}function s(e){return Object.keys(e).concat(function(e){return Object.getOwnPropertySymbols?Object.getOwnPropertySymbols(e).filter((function(t){return e.propertyIsEnumerable(t)})):[]}(e))}function u(e,t){try{return t in e}catch(e){return!1}}function l(e,t,r){var n={};return r.isMergeableObject(e)&&s(e).forEach((function(t){n[t]=i(e[t],r)})),s(t).forEach((function(o){(function(e,t){return u(e,t)&&!(Object.hasOwnProperty.call(e,t)&&Object.propertyIsEnumerable.call(e,t))})(e,o)||(u(e,o)&&r.isMergeableObject(t[o])?n[o]=function(e,t){if(!t.customMerge)return c;var r=t.customMerge(e);return"function"==typeof r?r:c}(o,r)(e[o],t[o],r):n[o]=i(t[o],r))})),n}function c(e,t,r){(r=r||{}).arrayMerge=r.arrayMerge||a,r.isMergeableObject=r.isMergeableObject||n,r.cloneUnlessOtherwiseSpecified=i;var o=Array.isArray(t);return o===Array.isArray(e)?o?r.arrayMerge(e,t,r):l(e,t,r):i(t,r)}c.all=function(e,t){if(!Array.isArray(e))throw new Error("first argument should be an array");return e.reduce((function(e,r){return c(e,r,t)}),{})};var f=c;e.exports=f},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var n=r(25),o=r(27),i=r(28),a=r(34),s=r(35),u=r(36),l=r(37),c=r(29),f=r(38),h=r(39),d=[n.YouTube,o.SoundCloud,i.Vimeo,a.Facebook,s.Streamable,u.Wistia,l.Twitch,c.DailyMotion,f.Mixcloud,h.FilePlayer];t.default=d},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var n=function(e){if(e&&e.__esModule)return e;var t=o();if(t&&t.has(e))return t.get(e);var r={};if(null!=e){var n=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var i in e)if(Object.prototype.hasOwnProperty.call(e,i)){var a=n?Object.getOwnPropertyDescriptor(e,i):null;a&&(a.get||a.set)?Object.defineProperty(r,i,a):r[i]=e[i]}}r.default=e,t&&t.set(e,r);return r}(r(0));function o(){if("function"!=typeof WeakMap)return null;var e=new WeakMap;return o=function(){return e},e}function i(e){return(i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function s(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(r,!0).forEach((function(t){h(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(r).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function u(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function l(e){return(l=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function c(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function f(e,t){return(f=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function h(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}var d=function(e){function t(){var e,r;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var n=arguments.length,o=new Array(n),a=0;a<n;a++)o[a]=arguments[a];return r=function(e,t){return!t||"object"!==i(t)&&"function"!=typeof t?c(e):t}(this,(e=l(t)).call.apply(e,[this].concat(o))),h(c(r),"mounted",!1),h(c(r),"state",{image:null}),r}var r,o,a;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&f(e,t)}(t,e),r=t,(o=[{key:"componentDidMount",value:function(){this.mounted=!0,this.fetchImage(this.props)}},{key:"componentDidUpdate",value:function(e){var t=this.props,r=t.url,n=t.light;e.url===r&&e.light===n||this.fetchImage(this.props)}},{key:"componentWillUnmount",value:function(){this.mounted=!1}},{key:"fetchImage",value:function(e){var t=this,r=e.url,n=e.light;if("string"!=typeof n)return this.setState({image:null}),window.fetch("https://noembed.com/embed?url=".concat(r)).then((function(e){return e.json()})).then((function(e){if(e.thumbnail_url&&t.mounted){var r=e.thumbnail_url.replace("height=100","height=480");t.setState({image:r})}}));this.setState({image:n})}},{key:"render",value:function(){var e=this.props,t=e.onClick,r=e.playIcon,o=this.state.image,i={display:"flex",alignItems:"center",justifyContent:"center"},a={preview:s({width:"100%",height:"100%",backgroundImage:o?"url(".concat(o,")"):void 0,backgroundSize:"cover",backgroundPosition:"center",cursor:"pointer"},i),shadow:s({background:"radial-gradient(rgb(0, 0, 0, 0.3), rgba(0, 0, 0, 0) 60%)",borderRadius:"64px",width:"64px",height:"64px"},i),playIcon:{borderStyle:"solid",borderWidth:"16px 0 16px 26px",borderColor:"transparent transparent transparent white",marginLeft:"7px"}},u=n.default.createElement("div",{style:a.shadow,className:"react-player__shadow"},n.default.createElement("div",{style:a.playIcon,className:"react-player__play-icon"}));return n.default.createElement("div",{style:a.preview,className:"react-player__preview",onClick:t},r||u)}}])&&u(r.prototype,o),a&&u(r,a),t}(n.Component);t.default=d},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t,r){var i=[],a=!0,s=!1,u=void 0;try{for(var l,f=c[Symbol.iterator]();!(a=(l=f.next()).done);a=!0){var h=l.value;!h.Player.canPlay(e)&&r[h.configKey].preload&&i.push(n.default.createElement(o.default,{key:h.Player.displayName,activePlayer:h.Player,url:h.url,controls:t,playing:!0,muted:!0,display:"none"}))}}catch(e){s=!0,u=e}finally{try{a||null==f.return||f.return()}finally{if(s)throw u}}return i};var n=l(r(0)),o=l(r(26)),i=r(25),a=r(27),s=r(28),u=r(29);function l(e){return e&&e.__esModule?e:{default:e}}var c=[{Player:i.YouTube,configKey:"youtube",url:"https://www.youtube.com/watch?v=GlCmAC4MHek"},{Player:a.SoundCloud,configKey:"soundcloud",url:"https://soundcloud.com/seucheu/john-cage-433-8-bit-version"},{Player:s.Vimeo,configKey:"vimeo",url:"https://vimeo.com/300970506"},{Player:u.DailyMotion,configKey:"dailymotion",url:"http://www.dailymotion.com/video/xqdpyk"}]},function(e,t,r){"use strict";t.byteLength=function(e){var t=l(e),r=t[0],n=t[1];return 3*(r+n)/4-n},t.toByteArray=function(e){var t,r,n=l(e),a=n[0],s=n[1],u=new i(function(e,t,r){return 3*(t+r)/4-r}(0,a,s)),c=0,f=s>0?a-4:a;for(r=0;r<f;r+=4)t=o[e.charCodeAt(r)]<<18|o[e.charCodeAt(r+1)]<<12|o[e.charCodeAt(r+2)]<<6|o[e.charCodeAt(r+3)],u[c++]=t>>16&255,u[c++]=t>>8&255,u[c++]=255&t;2===s&&(t=o[e.charCodeAt(r)]<<2|o[e.charCodeAt(r+1)]>>4,u[c++]=255&t);1===s&&(t=o[e.charCodeAt(r)]<<10|o[e.charCodeAt(r+1)]<<4|o[e.charCodeAt(r+2)]>>2,u[c++]=t>>8&255,u[c++]=255&t);return u},t.fromByteArray=function(e){for(var t,r=e.length,o=r%3,i=[],a=0,s=r-o;a<s;a+=16383)i.push(c(e,a,a+16383>s?s:a+16383));1===o?(t=e[r-1],i.push(n[t>>2]+n[t<<4&63]+"==")):2===o&&(t=(e[r-2]<<8)+e[r-1],i.push(n[t>>10]+n[t>>4&63]+n[t<<2&63]+"="));return i.join("")};for(var n=[],o=[],i="undefined"!=typeof Uint8Array?Uint8Array:Array,a="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",s=0,u=a.length;s<u;++s)n[s]=a[s],o[a.charCodeAt(s)]=s;function l(e){var t=e.length;if(t%4>0)throw new Error("Invalid string. Length must be a multiple of 4");var r=e.indexOf("=");return-1===r&&(r=t),[r,r===t?0:4-r%4]}function c(e,t,r){for(var o,i,a=[],s=t;s<r;s+=3)o=(e[s]<<16&16711680)+(e[s+1]<<8&65280)+(255&e[s+2]),a.push(n[(i=o)>>18&63]+n[i>>12&63]+n[i>>6&63]+n[63&i]);return a.join("")}o["-".charCodeAt(0)]=62,o["_".charCodeAt(0)]=63},function(e,t){t.read=function(e,t,r,n,o){var i,a,s=8*o-n-1,u=(1<<s)-1,l=u>>1,c=-7,f=r?o-1:0,h=r?-1:1,d=e[t+f];for(f+=h,i=d&(1<<-c)-1,d>>=-c,c+=s;c>0;i=256*i+e[t+f],f+=h,c-=8);for(a=i&(1<<-c)-1,i>>=-c,c+=n;c>0;a=256*a+e[t+f],f+=h,c-=8);if(0===i)i=1-l;else{if(i===u)return a?NaN:1/0*(d?-1:1);a+=Math.pow(2,n),i-=l}return(d?-1:1)*a*Math.pow(2,i-n)},t.write=function(e,t,r,n,o,i){var a,s,u,l=8*i-o-1,c=(1<<l)-1,f=c>>1,h=23===o?Math.pow(2,-24)-Math.pow(2,-77):0,d=n?0:i-1,p=n?1:-1,y=t<0||0===t&&1/t<0?1:0;for(t=Math.abs(t),isNaN(t)||t===1/0?(s=isNaN(t)?1:0,a=c):(a=Math.floor(Math.log(t)/Math.LN2),t*(u=Math.pow(2,-a))<1&&(a--,u*=2),(t+=a+f>=1?h/u:h*Math.pow(2,1-f))*u>=2&&(a++,u/=2),a+f>=c?(s=0,a=c):a+f>=1?(s=(t*u-1)*Math.pow(2,o),a+=f):(s=t*Math.pow(2,f-1)*Math.pow(2,o),a=0));o>=8;e[r+d]=255&s,d+=p,s/=256,o-=8);for(a=a<<o|s,l+=o;l>0;e[r+d]=255&a,d+=p,a/=256,l-=8);e[r+d-p]|=128*y}},function(e,t){var r={}.toString;e.exports=Array.isArray||function(e){return"[object Array]"==r.call(e)}},function(e,t){},function(e,t){},function(e,t){},function(e,t){},function(e,t,r){"use strict";var n=r(63),o=r(65);function i(){this.protocol=null,this.slashes=null,this.auth=null,this.host=null,this.port=null,this.hostname=null,this.hash=null,this.search=null,this.query=null,this.pathname=null,this.path=null,this.href=null}t.parse=b,t.resolve=function(e,t){return b(e,!1,!0).resolve(t)},t.resolveObject=function(e,t){return e?b(e,!1,!0).resolveObject(t):t},t.format=function(e){o.isString(e)&&(e=b(e));return e instanceof i?e.format():i.prototype.format.call(e)},t.Url=i;var a=/^([a-z0-9.+-]+:)/i,s=/:[0-9]*$/,u=/^(\/\/?(?!\/)[^\?\s]*)(\?[^\s]*)?$/,l=["{","}","|","\\","^","`"].concat(["<",">",'"',"`"," ","\r","\n","\t"]),c=["'"].concat(l),f=["%","/","?",";","#"].concat(c),h=["/","?","#"],d=/^[+a-z0-9A-Z_-]{0,63}$/,p=/^([+a-z0-9A-Z_-]{0,63})(.*)$/,y={javascript:!0,"javascript:":!0},v={javascript:!0,"javascript:":!0},m={http:!0,https:!0,ftp:!0,gopher:!0,file:!0,"http:":!0,"https:":!0,"ftp:":!0,"gopher:":!0,"file:":!0},g=r(66);function b(e,t,r){if(e&&o.isObject(e)&&e instanceof i)return e;var n=new i;return n.parse(e,t,r),n}i.prototype.parse=function(e,t,r){if(!o.isString(e))throw new TypeError("Parameter 'url' must be a string, not "+typeof e);var i=e.indexOf("?"),s=-1!==i&&i<e.indexOf("#")?"?":"#",l=e.split(s);l[0]=l[0].replace(/\\/g,"/");var b=e=l.join(s);if(b=b.trim(),!r&&1===e.split("#").length){var _=u.exec(b);if(_)return this.path=b,this.href=b,this.pathname=_[1],_[2]?(this.search=_[2],this.query=t?g.parse(this.search.substr(1)):this.search.substr(1)):t&&(this.search="",this.query={}),this}var w=a.exec(b);if(w){var S=(w=w[0]).toLowerCase();this.protocol=S,b=b.substr(w.length)}if(r||w||b.match(/^\/\/[^@\/]+@[^@\/]+/)){var P="//"===b.substr(0,2);!P||w&&v[w]||(b=b.substr(2),this.slashes=!0)}if(!v[w]&&(P||w&&!m[w])){for(var A,k,E=-1,x=0;x<h.length;x++){-1!==(O=b.indexOf(h[x]))&&(-1===E||O<E)&&(E=O)}-1!==(k=-1===E?b.lastIndexOf("@"):b.lastIndexOf("@",E))&&(A=b.slice(0,k),b=b.slice(k+1),this.auth=decodeURIComponent(A)),E=-1;for(x=0;x<f.length;x++){var O;-1!==(O=b.indexOf(f[x]))&&(-1===E||O<E)&&(E=O)}-1===E&&(E=b.length),this.host=b.slice(0,E),b=b.slice(E),this.parseHost(),this.hostname=this.hostname||"";var R="["===this.hostname[0]&&"]"===this.hostname[this.hostname.length-1];if(!R)for(var C=this.hostname.split(/\./),T=(x=0,C.length);x<T;x++){var j=C[x];if(j&&!j.match(d)){for(var L="",I=0,D=j.length;I<D;I++)j.charCodeAt(I)>127?L+="x":L+=j[I];if(!L.match(d)){var M=C.slice(0,x),F=C.slice(x+1),N=j.match(p);N&&(M.push(N[1]),F.unshift(N[2])),F.length&&(b="/"+F.join(".")+b),this.hostname=M.join(".");break}}}this.hostname.length>255?this.hostname="":this.hostname=this.hostname.toLowerCase(),R||(this.hostname=n.toASCII(this.hostname));var q=this.port?":"+this.port:"",U=this.hostname||"";this.host=U+q,this.href+=this.host,R&&(this.hostname=this.hostname.substr(1,this.hostname.length-2),"/"!==b[0]&&(b="/"+b))}if(!y[S])for(x=0,T=c.length;x<T;x++){var W=c[x];if(-1!==b.indexOf(W)){var B=encodeURIComponent(W);B===W&&(B=escape(W)),b=b.split(W).join(B)}}var G=b.indexOf("#");-1!==G&&(this.hash=b.substr(G),b=b.slice(0,G));var z=b.indexOf("?");if(-1!==z?(this.search=b.substr(z),this.query=b.substr(z+1),t&&(this.query=g.parse(this.query)),b=b.slice(0,z)):t&&(this.search="",this.query={}),b&&(this.pathname=b),m[S]&&this.hostname&&!this.pathname&&(this.pathname="/"),this.pathname||this.search){q=this.pathname||"";var H=this.search||"";this.path=q+H}return this.href=this.format(),this},i.prototype.format=function(){var e=this.auth||"";e&&(e=(e=encodeURIComponent(e)).replace(/%3A/i,":"),e+="@");var t=this.protocol||"",r=this.pathname||"",n=this.hash||"",i=!1,a="";this.host?i=e+this.host:this.hostname&&(i=e+(-1===this.hostname.indexOf(":")?this.hostname:"["+this.hostname+"]"),this.port&&(i+=":"+this.port)),this.query&&o.isObject(this.query)&&Object.keys(this.query).length&&(a=g.stringify(this.query));var s=this.search||a&&"?"+a||"";return t&&":"!==t.substr(-1)&&(t+=":"),this.slashes||(!t||m[t])&&!1!==i?(i="//"+(i||""),r&&"/"!==r.charAt(0)&&(r="/"+r)):i||(i=""),n&&"#"!==n.charAt(0)&&(n="#"+n),s&&"?"!==s.charAt(0)&&(s="?"+s),t+i+(r=r.replace(/[?#]/g,(function(e){return encodeURIComponent(e)})))+(s=s.replace("#","%23"))+n},i.prototype.resolve=function(e){return this.resolveObject(b(e,!1,!0)).format()},i.prototype.resolveObject=function(e){if(o.isString(e)){var t=new i;t.parse(e,!1,!0),e=t}for(var r=new i,n=Object.keys(this),a=0;a<n.length;a++){var s=n[a];r[s]=this[s]}if(r.hash=e.hash,""===e.href)return r.href=r.format(),r;if(e.slashes&&!e.protocol){for(var u=Object.keys(e),l=0;l<u.length;l++){var c=u[l];"protocol"!==c&&(r[c]=e[c])}return m[r.protocol]&&r.hostname&&!r.pathname&&(r.path=r.pathname="/"),r.href=r.format(),r}if(e.protocol&&e.protocol!==r.protocol){if(!m[e.protocol]){for(var f=Object.keys(e),h=0;h<f.length;h++){var d=f[h];r[d]=e[d]}return r.href=r.format(),r}if(r.protocol=e.protocol,e.host||v[e.protocol])r.pathname=e.pathname;else{for(var p=(e.pathname||"").split("/");p.length&&!(e.host=p.shift()););e.host||(e.host=""),e.hostname||(e.hostname=""),""!==p[0]&&p.unshift(""),p.length<2&&p.unshift(""),r.pathname=p.join("/")}if(r.search=e.search,r.query=e.query,r.host=e.host||"",r.auth=e.auth,r.hostname=e.hostname||e.host,r.port=e.port,r.pathname||r.search){var y=r.pathname||"",g=r.search||"";r.path=y+g}return r.slashes=r.slashes||e.slashes,r.href=r.format(),r}var b=r.pathname&&"/"===r.pathname.charAt(0),_=e.host||e.pathname&&"/"===e.pathname.charAt(0),w=_||b||r.host&&e.pathname,S=w,P=r.pathname&&r.pathname.split("/")||[],A=(p=e.pathname&&e.pathname.split("/")||[],r.protocol&&!m[r.protocol]);if(A&&(r.hostname="",r.port=null,r.host&&(""===P[0]?P[0]=r.host:P.unshift(r.host)),r.host="",e.protocol&&(e.hostname=null,e.port=null,e.host&&(""===p[0]?p[0]=e.host:p.unshift(e.host)),e.host=null),w=w&&(""===p[0]||""===P[0])),_)r.host=e.host||""===e.host?e.host:r.host,r.hostname=e.hostname||""===e.hostname?e.hostname:r.hostname,r.search=e.search,r.query=e.query,P=p;else if(p.length)P||(P=[]),P.pop(),P=P.concat(p),r.search=e.search,r.query=e.query;else if(!o.isNullOrUndefined(e.search)){if(A)r.hostname=r.host=P.shift(),(R=!!(r.host&&r.host.indexOf("@")>0)&&r.host.split("@"))&&(r.auth=R.shift(),r.host=r.hostname=R.shift());return r.search=e.search,r.query=e.query,o.isNull(r.pathname)&&o.isNull(r.search)||(r.path=(r.pathname?r.pathname:"")+(r.search?r.search:"")),r.href=r.format(),r}if(!P.length)return r.pathname=null,r.search?r.path="/"+r.search:r.path=null,r.href=r.format(),r;for(var k=P.slice(-1)[0],E=(r.host||e.host||P.length>1)&&("."===k||".."===k)||""===k,x=0,O=P.length;O>=0;O--)"."===(k=P[O])?P.splice(O,1):".."===k?(P.splice(O,1),x++):x&&(P.splice(O,1),x--);if(!w&&!S)for(;x--;x)P.unshift("..");!w||""===P[0]||P[0]&&"/"===P[0].charAt(0)||P.unshift(""),E&&"/"!==P.join("/").substr(-1)&&P.push("");var R,C=""===P[0]||P[0]&&"/"===P[0].charAt(0);A&&(r.hostname=r.host=C?"":P.length?P.shift():"",(R=!!(r.host&&r.host.indexOf("@")>0)&&r.host.split("@"))&&(r.auth=R.shift(),r.host=r.hostname=R.shift()));return(w=w||r.host&&P.length)&&!C&&P.unshift(""),P.length?r.pathname=P.join("/"):(r.pathname=null,r.path=null),o.isNull(r.pathname)&&o.isNull(r.search)||(r.path=(r.pathname?r.pathname:"")+(r.search?r.search:"")),r.auth=e.auth||r.auth,r.slashes=r.slashes||e.slashes,r.href=r.format(),r},i.prototype.parseHost=function(){var e=this.host,t=s.exec(e);t&&(":"!==(t=t[0])&&(this.port=t.substr(1)),e=e.substr(0,e.length-t.length)),e&&(this.hostname=e)}},function(e,t,r){(function(e,n){var o;/*! https://mths.be/punycode v1.4.1 by @mathias */!function(i){t&&t.nodeType,e&&e.nodeType;var a="object"==typeof n&&n;a.global!==a&&a.window!==a&&a.self;var s,u=2147483647,l=36,c=1,f=26,h=38,d=700,p=72,y=128,v="-",m=/^xn--/,g=/[^\x20-\x7E]/,b=/[\x2E\u3002\uFF0E\uFF61]/g,_={overflow:"Overflow: input needs wider integers to process","not-basic":"Illegal input >= 0x80 (not a basic code point)","invalid-input":"Invalid input"},w=l-c,S=Math.floor,P=String.fromCharCode;function A(e){throw new RangeError(_[e])}function k(e,t){for(var r=e.length,n=[];r--;)n[r]=t(e[r]);return n}function E(e,t){var r=e.split("@"),n="";return r.length>1&&(n=r[0]+"@",e=r[1]),n+k((e=e.replace(b,".")).split("."),t).join(".")}function x(e){for(var t,r,n=[],o=0,i=e.length;o<i;)(t=e.charCodeAt(o++))>=55296&&t<=56319&&o<i?56320==(64512&(r=e.charCodeAt(o++)))?n.push(((1023&t)<<10)+(1023&r)+65536):(n.push(t),o--):n.push(t);return n}function O(e){return k(e,(function(e){var t="";return e>65535&&(t+=P((e-=65536)>>>10&1023|55296),e=56320|1023&e),t+=P(e)})).join("")}function R(e,t){return e+22+75*(e<26)-((0!=t)<<5)}function C(e,t,r){var n=0;for(e=r?S(e/d):e>>1,e+=S(e/t);e>w*f>>1;n+=l)e=S(e/w);return S(n+(w+1)*e/(e+h))}function T(e){var t,r,n,o,i,a,s,h,d,m,g,b=[],_=e.length,w=0,P=y,k=p;for((r=e.lastIndexOf(v))<0&&(r=0),n=0;n<r;++n)e.charCodeAt(n)>=128&&A("not-basic"),b.push(e.charCodeAt(n));for(o=r>0?r+1:0;o<_;){for(i=w,a=1,s=l;o>=_&&A("invalid-input"),((h=(g=e.charCodeAt(o++))-48<10?g-22:g-65<26?g-65:g-97<26?g-97:l)>=l||h>S((u-w)/a))&&A("overflow"),w+=h*a,!(h<(d=s<=k?c:s>=k+f?f:s-k));s+=l)a>S(u/(m=l-d))&&A("overflow"),a*=m;k=C(w-i,t=b.length+1,0==i),S(w/t)>u-P&&A("overflow"),P+=S(w/t),w%=t,b.splice(w++,0,P)}return O(b)}function j(e){var t,r,n,o,i,a,s,h,d,m,g,b,_,w,k,E=[];for(b=(e=x(e)).length,t=y,r=0,i=p,a=0;a<b;++a)(g=e[a])<128&&E.push(P(g));for(n=o=E.length,o&&E.push(v);n<b;){for(s=u,a=0;a<b;++a)(g=e[a])>=t&&g<s&&(s=g);for(s-t>S((u-r)/(_=n+1))&&A("overflow"),r+=(s-t)*_,t=s,a=0;a<b;++a)if((g=e[a])<t&&++r>u&&A("overflow"),g==t){for(h=r,d=l;!(h<(m=d<=i?c:d>=i+f?f:d-i));d+=l)k=h-m,w=l-m,E.push(P(R(m+k%w,0))),h=S(k/w);E.push(P(R(h,0))),i=C(r,_,n==o),r=0,++n}++r,++t}return E.join("")}s={version:"1.4.1",ucs2:{decode:x,encode:O},decode:T,encode:j,toASCII:function(e){return E(e,(function(e){return g.test(e)?"xn--"+j(e):e}))},toUnicode:function(e){return E(e,(function(e){return m.test(e)?T(e.slice(4).toLowerCase()):e}))}},void 0===(o=function(){return s}.call(t,r,t,e))||(e.exports=o)}()}).call(this,r(64)(e),r(24))},function(e,t){e.exports=function(e){return e.webpackPolyfill||(e.deprecate=function(){},e.paths=[],e.children||(e.children=[]),Object.defineProperty(e,"loaded",{enumerable:!0,get:function(){return e.l}}),Object.defineProperty(e,"id",{enumerable:!0,get:function(){return e.i}}),e.webpackPolyfill=1),e}},function(e,t,r){"use strict";e.exports={isString:function(e){return"string"==typeof e},isObject:function(e){return"object"==typeof e&&null!==e},isNull:function(e){return null===e},isNullOrUndefined:function(e){return null==e}}},function(e,t,r){"use strict";t.decode=t.parse=r(67),t.encode=t.stringify=r(68)},function(e,t,r){"use strict";function n(e,t){return Object.prototype.hasOwnProperty.call(e,t)}e.exports=function(e,t,r,i){t=t||"&",r=r||"=";var a={};if("string"!=typeof e||0===e.length)return a;var s=/\+/g;e=e.split(t);var u=1e3;i&&"number"==typeof i.maxKeys&&(u=i.maxKeys);var l=e.length;u>0&&l>u&&(l=u);for(var c=0;c<l;++c){var f,h,d,p,y=e[c].replace(s,"%20"),v=y.indexOf(r);v>=0?(f=y.substr(0,v),h=y.substr(v+1)):(f=y,h=""),d=decodeURIComponent(f),p=decodeURIComponent(h),n(a,d)?o(a[d])?a[d].push(p):a[d]=[a[d],p]:a[d]=p}return a};var o=Array.isArray||function(e){return"[object Array]"===Object.prototype.toString.call(e)}},function(e,t,r){"use strict";var n=function(e){switch(typeof e){case"string":return e;case"boolean":return e?"true":"false";case"number":return isFinite(e)?e:"";default:return""}};e.exports=function(e,t,r,s){return t=t||"&",r=r||"=",null===e&&(e=void 0),"object"==typeof e?i(a(e),(function(a){var s=encodeURIComponent(n(a))+r;return o(e[a])?i(e[a],(function(e){return s+encodeURIComponent(n(e))})).join(t):s+encodeURIComponent(n(e[a]))})).join(t):s?encodeURIComponent(n(s))+r+encodeURIComponent(n(e)):""};var o=Array.isArray||function(e){return"[object Array]"===Object.prototype.toString.call(e)};function i(e,t){if(e.map)return e.map(t);for(var r=[],n=0;n<e.length;n++)r.push(t(e[n],n));return r}var a=Object.keys||function(e){var t=[];for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&t.push(r);return t}},function(e,t,r){"use strict";var n=r(13),o=r(1);Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var i=o(r(14)),a=o(r(40)),s=o(r(22)),u=o(r(16)),l=o(r(30)),c=o(r(17)),f=o(r(4)),h=o(r(8)),d=o(r(9)),p=o(r(5)),y=o(r(11)),v=o(r(10)),m=o(r(7)),g=n(r(0)),b=o(r(2)),_=o(r(23)),w=o(r(32)),S=n(r(21)),P=o(r(19)),A=o(r(41)),k=o(r(42)),E=o(r(74)),x=r(12),O=r(15),R=function(e){function t(){var e,r;(0,f.default)(this,t);for(var n=arguments.length,o=new Array(n),i=0;i<n;i++)o[i]=arguments[i];return r=(0,d.default)(this,(e=(0,p.default)(t)).call.apply(e,[this].concat(o))),(0,m.default)((0,v.default)((0,v.default)(r)),"state",{pdf:null}),(0,m.default)((0,v.default)((0,v.default)(r)),"viewer",{scrollPageIntoView:function(e){var t=e.pageNumber,n=r.props.onItemClick;if(n)n({pageNumber:t});else{var o=r.pages[t-1];o?o.scrollIntoView():(0,x.warnOnDev)("Warning: An internal link leading to page ".concat(t," was clicked, but neither <Document> was provided with onItemClick nor it was able to find the page within itself. Either provide onItemClick to <Document> and handle navigating by yourself or ensure that all pages are rendered within <Document>."))}}}),(0,m.default)((0,v.default)((0,v.default)(r)),"linkService",new k.default),(0,m.default)((0,v.default)((0,v.default)(r)),"loadDocument",(0,c.default)(u.default.mark((function e(){var t,n,o,i,a,s,c,f;return u.default.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return t=null,e.prev=1,e.next=4,r.findDocumentSource();case 4:t=e.sent,r.onSourceSuccess(),e.next=11;break;case 8:e.prev=8,e.t0=e.catch(1),r.onSourceError(e.t0);case 11:if(t){e.next=13;break}return e.abrupt("return");case 13:return r.setState((function(e){return e.pdf?{pdf:null}:null})),n=r.props,o=n.options,i=n.onLoadProgress,a=n.onPassword,e.prev=15,(0,x.cancelRunningTask)(r.runningTask),(s=S.default.getDocument((0,l.default)({},t,o))).onPassword=a,i&&(s.onProgress=i),c=(0,x.makeCancellable)(s.promise),r.runningTask=c,e.next=24,c.promise;case 24:f=e.sent,r.setState((function(e){return e.pdf&&e.pdf.fingerprint===f.fingerprint?null:{pdf:f}}),r.onLoadSuccess),e.next=31;break;case 28:e.prev=28,e.t1=e.catch(15),r.onLoadError(e.t1);case 31:case"end":return e.stop()}}),e,this,[[1,8],[15,28]])})))),(0,m.default)((0,v.default)((0,v.default)(r)),"setupLinkService",(function(){r.linkService.setViewer(r.viewer);var e=(0,v.default)((0,v.default)(r));Object.defineProperty(r.linkService,"externalLinkTarget",{get:function(){switch(e.props.externalLinkTarget){case"_self":return 1;case"_blank":return 2;case"_parent":return 3;case"_top":return 4;default:return 0}}})})),(0,m.default)((0,v.default)((0,v.default)(r)),"onSourceSuccess",(function(){var e=r.props.onSourceSuccess;(0,x.callIfDefined)(e)})),(0,m.default)((0,v.default)((0,v.default)(r)),"onSourceError",(function(e){if(!(0,x.isCancelException)(e)){(0,x.errorOnDev)(e);var t=r.props.onSourceError;(0,x.callIfDefined)(t,e)}})),(0,m.default)((0,v.default)((0,v.default)(r)),"onLoadSuccess",(function(){var e=r.props.onLoadSuccess,t=r.state.pdf;(0,x.callIfDefined)(e,t),r.pages=new Array(t.numPages),r.linkService.setDocument(t)})),(0,m.default)((0,v.default)((0,v.default)(r)),"onLoadError",(function(e){if(!(0,x.isCancelException)(e)){r.setState({pdf:!1}),(0,x.errorOnDev)(e);var t=r.props.onLoadError;(0,x.callIfDefined)(t,e)}})),(0,m.default)((0,v.default)((0,v.default)(r)),"findDocumentSource",(0,c.default)(u.default.mark((function e(){var t,n,o,i,c;return u.default.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(t=r.props.file){e.next=3;break}return e.abrupt("return",null);case 3:if("string"!=typeof t){e.next=9;break}if(!(0,x.isDataURI)(t)){e.next=7;break}return n=(0,x.dataURItoUint8Array)(t),e.abrupt("return",{data:n});case 7:return(0,x.displayCORSWarning)(),e.abrupt("return",{url:t});case 9:if(!(t instanceof S.PDFDataRangeTransport)){e.next=11;break}return e.abrupt("return",{range:t});case 11:if(!(0,x.isArrayBuffer)(t)){e.next=13;break}return e.abrupt("return",{data:t});case 13:if(!x.isBrowser){e.next=19;break}if(!(0,x.isBlob)(t)&&!(0,x.isFile)(t)){e.next=19;break}return e.next=17,(0,x.loadFromFile)(t);case 17:return e.t0=e.sent,e.abrupt("return",{data:e.t0});case 19:if("object"===(0,s.default)(t)){e.next=21;break}throw new Error("Invalid parameter in file, need either Uint8Array, string or a parameter object");case 21:if(t.url||t.data||t.range){e.next=23;break}throw new Error("Invalid parameter object: need either .data, .range or .url");case 23:if("string"!=typeof t.url){e.next=29;break}if(!(0,x.isDataURI)(t.url)){e.next=28;break}return o=t.url,i=(0,a.default)(t,["url"]),c=(0,x.dataURItoUint8Array)(o),e.abrupt("return",(0,l.default)({data:c},i));case 28:(0,x.displayCORSWarning)();case 29:return e.abrupt("return",t);case 30:case"end":return e.stop()}}),e,this)})))),(0,m.default)((0,v.default)((0,v.default)(r)),"registerPage",(function(e,t){r.pages[e]=t})),(0,m.default)((0,v.default)((0,v.default)(r)),"unregisterPage",(function(e){delete r.pages[e]})),r}return(0,y.default)(t,e),(0,h.default)(t,[{key:"componentDidMount",value:function(){this.loadDocument(),this.setupLinkService()}},{key:"componentDidUpdate",value:function(e){this.props.file!==e.file&&this.loadDocument()}},{key:"componentWillUnmount",value:function(){(0,x.cancelRunningTask)(this.runningTask)}},{key:"renderChildren",value:function(){var e=this.props.children;return g.default.createElement(P.default.Provider,{value:this.childContext},e)}},{key:"renderContent",value:function(){var e=this.props.file,t=this.state.pdf;if(!e){var r=this.props.noData;return g.default.createElement(A.default,{type:"no-data"},"function"==typeof r?r():r)}if(null===t){var n=this.props.loading;return g.default.createElement(A.default,{type:"loading"},"function"==typeof n?n():n)}if(!1===t){var o=this.props.error;return g.default.createElement(A.default,{type:"error"},"function"==typeof o?o():o)}return this.renderChildren()}},{key:"render",value:function(){var e=this.props,t=e.className,r=e.inputRef;return g.default.createElement("div",(0,i.default)({className:(0,w.default)("react-pdf__Document",t),ref:r},this.eventProps),this.renderContent())}},{key:"childContext",get:function(){var e=this.linkService,t=this.registerPage,r=this.unregisterPage,n=this.props,o=n.renderMode,i=n.rotate;return{linkService:e,pdf:this.state.pdf,registerPage:t,renderMode:o,rotate:i,unregisterPage:r}}},{key:"eventProps",get:function(){var e=this;return(0,_.default)(this.props,(function(){return e.state.pdf}))}}]),t}(g.PureComponent);t.default=R,R.defaultProps={error:"Failed to load PDF file.",loading:"Loading PDF…",noData:"No PDF file specified.",onPassword:function(e,t){switch(t){case E.default.NEED_PASSWORD:e(prompt("Enter the password to open this PDF file."));break;case E.default.INCORRECT_PASSWORD:e(prompt("Invalid password. Please try again."))}}},R.propTypes=(0,l.default)({children:b.default.node,className:O.isClassName,error:b.default.node,file:x.isFile,inputRef:b.default.func,loading:b.default.node,noData:b.default.node,onItemClick:b.default.func,onLoadError:b.default.func,onLoadProgress:b.default.func,onLoadSuccess:b.default.func,onPassword:b.default.func,onSourceError:b.default.func,onSourceSuccess:b.default.func,rotate:b.default.number},(0,O.eventsProps)())},function(e,t){e.exports=function(e,t){if(null==e)return{};var r,n,o={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}},function(e,t,r){var n=function(e){"use strict";var t,r=Object.prototype,n=r.hasOwnProperty,o="function"==typeof Symbol?Symbol:{},i=o.iterator||"@@iterator",a=o.asyncIterator||"@@asyncIterator",s=o.toStringTag||"@@toStringTag";function u(e,t,r,n){var o=t&&t.prototype instanceof y?t:y,i=Object.create(o.prototype),a=new x(n||[]);return i._invoke=function(e,t,r){var n=c;return function(o,i){if(n===h)throw new Error("Generator is already running");if(n===d){if("throw"===o)throw i;return R()}for(r.method=o,r.arg=i;;){var a=r.delegate;if(a){var s=A(a,r);if(s){if(s===p)continue;return s}}if("next"===r.method)r.sent=r._sent=r.arg;else if("throw"===r.method){if(n===c)throw n=d,r.arg;r.dispatchException(r.arg)}else"return"===r.method&&r.abrupt("return",r.arg);n=h;var u=l(e,t,r);if("normal"===u.type){if(n=r.done?d:f,u.arg===p)continue;return{value:u.arg,done:r.done}}"throw"===u.type&&(n=d,r.method="throw",r.arg=u.arg)}}}(e,r,a),i}function l(e,t,r){try{return{type:"normal",arg:e.call(t,r)}}catch(e){return{type:"throw",arg:e}}}e.wrap=u;var c="suspendedStart",f="suspendedYield",h="executing",d="completed",p={};function y(){}function v(){}function m(){}var g={};g[i]=function(){return this};var b=Object.getPrototypeOf,_=b&&b(b(O([])));_&&_!==r&&n.call(_,i)&&(g=_);var w=m.prototype=y.prototype=Object.create(g);function S(e){["next","throw","return"].forEach((function(t){e[t]=function(e){return this._invoke(t,e)}}))}function P(e){var t;this._invoke=function(r,o){function i(){return new Promise((function(t,i){!function t(r,o,i,a){var s=l(e[r],e,o);if("throw"!==s.type){var u=s.arg,c=u.value;return c&&"object"==typeof c&&n.call(c,"__await")?Promise.resolve(c.__await).then((function(e){t("next",e,i,a)}),(function(e){t("throw",e,i,a)})):Promise.resolve(c).then((function(e){u.value=e,i(u)}),(function(e){return t("throw",e,i,a)}))}a(s.arg)}(r,o,t,i)}))}return t=t?t.then(i,i):i()}}function A(e,r){var n=e.iterator[r.method];if(n===t){if(r.delegate=null,"throw"===r.method){if(e.iterator.return&&(r.method="return",r.arg=t,A(e,r),"throw"===r.method))return p;r.method="throw",r.arg=new TypeError("The iterator does not provide a 'throw' method")}return p}var o=l(n,e.iterator,r.arg);if("throw"===o.type)return r.method="throw",r.arg=o.arg,r.delegate=null,p;var i=o.arg;return i?i.done?(r[e.resultName]=i.value,r.next=e.nextLoc,"return"!==r.method&&(r.method="next",r.arg=t),r.delegate=null,p):i:(r.method="throw",r.arg=new TypeError("iterator result is not an object"),r.delegate=null,p)}function k(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function E(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function x(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(k,this),this.reset(!0)}function O(e){if(e){var r=e[i];if(r)return r.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length)){var o=-1,a=function r(){for(;++o<e.length;)if(n.call(e,o))return r.value=e[o],r.done=!1,r;return r.value=t,r.done=!0,r};return a.next=a}}return{next:R}}function R(){return{value:t,done:!0}}return v.prototype=w.constructor=m,m.constructor=v,m[s]=v.displayName="GeneratorFunction",e.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===v||"GeneratorFunction"===(t.displayName||t.name))},e.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,m):(e.__proto__=m,s in e||(e[s]="GeneratorFunction")),e.prototype=Object.create(w),e},e.awrap=function(e){return{__await:e}},S(P.prototype),P.prototype[a]=function(){return this},e.AsyncIterator=P,e.async=function(t,r,n,o){var i=new P(u(t,r,n,o));return e.isGeneratorFunction(r)?i:i.next().then((function(e){return e.done?e.value:i.next()}))},S(w),w[s]="Generator",w[i]=function(){return this},w.toString=function(){return"[object Generator]"},e.keys=function(e){var t=[];for(var r in e)t.push(r);return t.reverse(),function r(){for(;t.length;){var n=t.pop();if(n in e)return r.value=n,r.done=!1,r}return r.done=!0,r}},e.values=O,x.prototype={constructor:x,reset:function(e){if(this.prev=0,this.next=0,this.sent=this._sent=t,this.done=!1,this.delegate=null,this.method="next",this.arg=t,this.tryEntries.forEach(E),!e)for(var r in this)"t"===r.charAt(0)&&n.call(this,r)&&!isNaN(+r.slice(1))&&(this[r]=t)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(e){if(this.done)throw e;var r=this;function o(n,o){return s.type="throw",s.arg=e,r.next=n,o&&(r.method="next",r.arg=t),!!o}for(var i=this.tryEntries.length-1;i>=0;--i){var a=this.tryEntries[i],s=a.completion;if("root"===a.tryLoc)return o("end");if(a.tryLoc<=this.prev){var u=n.call(a,"catchLoc"),l=n.call(a,"finallyLoc");if(u&&l){if(this.prev<a.catchLoc)return o(a.catchLoc,!0);if(this.prev<a.finallyLoc)return o(a.finallyLoc)}else if(u){if(this.prev<a.catchLoc)return o(a.catchLoc,!0)}else{if(!l)throw new Error("try statement without catch or finally");if(this.prev<a.finallyLoc)return o(a.finallyLoc)}}}},abrupt:function(e,t){for(var r=this.tryEntries.length-1;r>=0;--r){var o=this.tryEntries[r];if(o.tryLoc<=this.prev&&n.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var i=o;break}}i&&("break"===e||"continue"===e)&&i.tryLoc<=t&&t<=i.finallyLoc&&(i=null);var a=i?i.completion:{};return a.type=e,a.arg=t,i?(this.method="next",this.next=i.finallyLoc,p):this.complete(a)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),p},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var r=this.tryEntries[t];if(r.finallyLoc===e)return this.complete(r.completion,r.afterLoc),E(r),p}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var r=this.tryEntries[t];if(r.tryLoc===e){var n=r.completion;if("throw"===n.type){var o=n.arg;E(r)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(e,r,n){return this.delegate={iterator:O(e),resultName:r,nextLoc:n},"next"===this.method&&(this.arg=t),p}},e}(e.exports);try{regeneratorRuntime=n}catch(e){Function("r","regeneratorRuntime = r")(n)}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.SimpleLinkService=t.PDFLinkService=void 0;var n=r(73);function o(e){return(o="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function i(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function a(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function s(e,t,r){return t&&a(e.prototype,t),r&&a(e,r),e}var u=function(){function e(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},r=t.eventBus,o=t.externalLinkTarget,a=void 0===o?null:o,s=t.externalLinkRel,u=void 0===s?null:s;i(this,e),this.eventBus=r||(0,n.getGlobalEventBus)(),this.externalLinkTarget=a,this.externalLinkRel=u,this.baseUrl=null,this.pdfDocument=null,this.pdfViewer=null,this.pdfHistory=null,this._pagesRefCache=null}return s(e,[{key:"setDocument",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null;this.baseUrl=t,this.pdfDocument=e,this._pagesRefCache=Object.create(null)}},{key:"setViewer",value:function(e){this.pdfViewer=e}},{key:"setHistory",value:function(e){this.pdfHistory=e}},{key:"navigateTo",value:function(e){var t=this;new Promise((function(r,n){"string"!=typeof e?r({namedDest:"",explicitDest:e}):t.pdfDocument.getDestination(e).then((function(t){r({namedDest:e,explicitDest:t})}))})).then((function(r){Array.isArray(r.explicitDest)?function r(n){var o,i=n.namedDest,a=n.explicitDest,s=a[0];if(s instanceof Object){if(null===(o=t._cachedPageNumber(s)))return void t.pdfDocument.getPageIndex(s).then((function(e){t.cachePageRef(e+1,s),r({namedDest:i,explicitDest:a})})).catch((function(){console.error('PDFLinkService.navigateTo: "'.concat(s,'" is not ')+'a valid page reference, for dest="'.concat(e,'".'))}))}else{if(!Number.isInteger(s))return void console.error('PDFLinkService.navigateTo: "'.concat(s,'" is not ')+'a valid destination reference, for dest="'.concat(e,'".'));o=s+1}!o||o<1||o>t.pagesCount?console.error('PDFLinkService.navigateTo: "'.concat(o,'" is not ')+'a valid page number, for dest="'.concat(e,'".')):(t.pdfHistory&&(t.pdfHistory.pushCurrentPosition(),t.pdfHistory.push({namedDest:i,explicitDest:a,pageNumber:o})),t.pdfViewer.scrollPageIntoView({pageNumber:o,destArray:a}))}(r):console.error('PDFLinkService.navigateTo: "'.concat(r.explicitDest,'" is')+' not a valid destination array, for dest="'.concat(e,'".'))}))}},{key:"getDestinationHash",value:function(e){if("string"==typeof e)return this.getAnchorUrl("#"+escape(e));if(Array.isArray(e)){var t=JSON.stringify(e);return this.getAnchorUrl("#"+escape(t))}return this.getAnchorUrl("")}},{key:"getAnchorUrl",value:function(e){return(this.baseUrl||"")+e}},{key:"setHash",value:function(e){var t,r;if(e.includes("=")){var i=(0,n.parseQueryString)(e);if("search"in i&&this.eventBus.dispatch("findfromurlhash",{source:this,query:i.search.replace(/"/g,""),phraseSearch:"true"===i.phrase}),"nameddest"in i)return void this.navigateTo(i.nameddest);if("page"in i&&(t=0|i.page||1),"zoom"in i){var a=i.zoom.split(","),s=a[0],u=parseFloat(s);s.includes("Fit")?"Fit"===s||"FitB"===s?r=[null,{name:s}]:"FitH"===s||"FitBH"===s||"FitV"===s||"FitBV"===s?r=[null,{name:s},a.length>1?0|a[1]:null]:"FitR"===s?5!==a.length?console.error('PDFLinkService.setHash: Not enough parameters for "FitR".'):r=[null,{name:s},0|a[1],0|a[2],0|a[3],0|a[4]]:console.error('PDFLinkService.setHash: "'.concat(s,'" is not ')+"a valid zoom value."):r=[null,{name:"XYZ"},a.length>1?0|a[1]:null,a.length>2?0|a[2]:null,u?u/100:s]}r?this.pdfViewer.scrollPageIntoView({pageNumber:t||this.page,destArray:r,allowNegativeOffset:!0}):t&&(this.page=t),"pagemode"in i&&this.eventBus.dispatch("pagemode",{source:this,mode:i.pagemode})}else{r=unescape(e);try{r=JSON.parse(r),Array.isArray(r)||(r=r.toString())}catch(e){}if("string"==typeof r||function(e){if(!Array.isArray(e))return!1;var t=e.length,r=!0;if(t<2)return!1;var n=e[0];if(!("object"===o(n)&&Number.isInteger(n.num)&&Number.isInteger(n.gen)||Number.isInteger(n)&&n>=0))return!1;var i=e[1];if("object"!==o(i)||"string"!=typeof i.name)return!1;switch(i.name){case"XYZ":if(5!==t)return!1;break;case"Fit":case"FitB":return 2===t;case"FitH":case"FitBH":case"FitV":case"FitBV":if(3!==t)return!1;break;case"FitR":if(6!==t)return!1;r=!1;break;default:return!1}for(var a=2;a<t;a++){var s=e[a];if(!("number"==typeof s||r&&null===s))return!1}return!0}(r))return void this.navigateTo(r);console.error('PDFLinkService.setHash: "'.concat(unescape(e),'" is not ')+"a valid destination.")}}},{key:"executeNamedAction",value:function(e){switch(e){case"GoBack":this.pdfHistory&&this.pdfHistory.back();break;case"GoForward":this.pdfHistory&&this.pdfHistory.forward();break;case"NextPage":this.page<this.pagesCount&&this.page++;break;case"PrevPage":this.page>1&&this.page--;break;case"LastPage":this.page=this.pagesCount;break;case"FirstPage":this.page=1}this.eventBus.dispatch("namedaction",{source:this,action:e})}},{key:"cachePageRef",value:function(e,t){if(t){var r=t.num+" "+t.gen+" R";this._pagesRefCache[r]=e}}},{key:"_cachedPageNumber",value:function(e){var t=e.num+" "+e.gen+" R";return this._pagesRefCache&&this._pagesRefCache[t]||null}},{key:"isPageVisible",value:function(e){return this.pdfViewer.isPageVisible(e)}},{key:"pagesCount",get:function(){return this.pdfDocument?this.pdfDocument.numPages:0}},{key:"page",get:function(){return this.pdfViewer.currentPageNumber},set:function(e){this.pdfViewer.currentPageNumber=e}},{key:"rotation",get:function(){return this.pdfViewer.pagesRotation},set:function(e){this.pdfViewer.pagesRotation=e}}]),e}();t.PDFLinkService=u;var l=function(){function e(){i(this,e),this.externalLinkTarget=null,this.externalLinkRel=null}return s(e,[{key:"navigateTo",value:function(e){}},{key:"getDestinationHash",value:function(e){return"#"}},{key:"getAnchorUrl",value:function(e){return"#"}},{key:"setHash",value:function(e){}},{key:"executeNamedAction",value:function(e){}},{key:"cachePageRef",value:function(e,t){}},{key:"isPageVisible",value:function(e){return!0}},{key:"pagesCount",get:function(){return 0}},{key:"page",get:function(){return 0},set:function(e){}},{key:"rotation",get:function(){return 0},set:function(e){}}]),e}();t.SimpleLinkService=l},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.isValidRotation=function(e){return Number.isInteger(e)&&e%90==0},t.isValidScrollMode=function(e){return Number.isInteger(e)&&Object.values(f).includes(e)&&e!==f.UNKNOWN},t.isValidSpreadMode=function(e){return Number.isInteger(e)&&Object.values(h).includes(e)&&e!==h.UNKNOWN},t.isPortraitOrientation=function(e){return e.width<=e.height},t.getGlobalEventBus=function(){var e=arguments.length>0&&void 0!==arguments[0]&&arguments[0];A||(A=new P({dispatchToDOM:e}));return A},t.getPDFFileNameFromURL=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"document.pdf";if("string"!=typeof e)return t;if(function(e){var t=0,r=e.length;for(;t<r&&""===e[t].trim();)t++;return"data:"===e.substring(t,t+5).toLowerCase()}(e))return console.warn('getPDFFileNameFromURL: ignoring "data:" URL for performance reasons.'),t;var r=/[^\/?#=]+\.pdf\b(?!.*\.pdf\b)/i,n=/^(?:(?:[^:]+:)?\/\/[^\/]+)?([^?#]*)(\?[^#]*)?(#.*)?$/.exec(e),o=r.exec(n[1])||r.exec(n[2])||r.exec(n[3]);if(o&&(o=o[0]).includes("%"))try{o=r.exec(decodeURIComponent(o))[0]}catch(e){}return o||t},t.noContextMenuHandler=function(e){e.preventDefault()},t.parseQueryString=function(e){for(var t=e.split("&"),r=Object.create(null),n=0,o=t.length;n<o;++n){var i=t[n].split("="),a=i[0].toLowerCase(),s=i.length>1?i[1]:null;r[decodeURIComponent(a)]=decodeURIComponent(s)}return r},t.backtrackBeforeAllVisibleElements=_,t.getVisibleElements=function(e,t){var r=arguments.length>2&&void 0!==arguments[2]&&arguments[2],n=arguments.length>3&&void 0!==arguments[3]&&arguments[3],o=e.scrollTop,i=o+e.clientHeight,a=e.scrollLeft,s=a+e.clientWidth;var u=[],l=t.length,c=0===l?0:b(t,n?function(e){var t=e.div;return t.offsetLeft+t.clientLeft+t.clientWidth>a}:function(e){var t=e.div;return t.offsetTop+t.clientTop+t.clientHeight>o});c>0&&c<l&&!n&&(c=_(c,t,o));for(var f=n?s:-1,h=c;h<l;h++){var d=t[h],p=d.div,y=p.offsetLeft+p.clientLeft,v=p.offsetTop+p.clientTop,m=p.clientWidth,g=p.clientHeight,w=y+m,S=v+g;if(-1===f)S>=i&&(f=S);else if((n?y:v)>f)break;if(!(S<=o||v>=i||w<=a||y>=s)){var P=Math.max(0,o-v)+Math.max(0,S-i),A=Math.max(0,a-y)+Math.max(0,w-s),k=(g-P)*(m-A)*100/g/m|0;u.push({id:d.id,x:y,y:v,view:d,percent:k})}}var E=u[0],x=u[u.length-1];r&&u.sort((function(e,t){var r=e.percent-t.percent;return Math.abs(r)>.001?-r:e.id-t.id}));return{first:E,last:x,views:u}},t.roundToDivide=function(e,t){var r=e%t;return 0===r?e:Math.round(e-r+t)},t.getPageSizeInches=function(e){var t=e.view,r=e.userUnit,n=e.rotate,o=(h=t,d=4,function(e){if(Array.isArray(e))return e}(h)||function(e,t){var r=[],n=!0,o=!1,i=void 0;try{for(var a,s=e[Symbol.iterator]();!(n=(a=s.next()).done)&&(r.push(a.value),!t||r.length!==t);n=!0);}catch(e){o=!0,i=e}finally{try{n||null==s.return||s.return()}finally{if(o)throw i}}return r}(h,d)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()),i=o[0],a=o[1],s=o[2],u=o[3],l=n%180!=0,c=(s-i)/72*r,f=(u-a)/72*r;var h,d;return{width:l?f:c,height:l?c:f}},t.approximateFraction=function(e){if(Math.floor(e)===e)return[e,1];var t=1/e;if(t>8)return[1,8];if(Math.floor(t)===t)return[1,t];var r,n=e>1?t:e,o=0,i=1,a=1,s=1;for(;;){var u=o+a,l=i+s;if(l>8)break;n<=u/l?(a=u,s=l):(o=u,i=l)}r=n-o/i<a/s-n?n===e?[o,i]:[i,o]:n===e?[a,s]:[s,a];return r},t.getOutputScale=function(e){var t=window.devicePixelRatio||1,r=e.webkitBackingStorePixelRatio||e.mozBackingStorePixelRatio||e.msBackingStorePixelRatio||e.oBackingStorePixelRatio||e.backingStorePixelRatio||1,n=t/r;return{sx:n,sy:n,scaled:1!==n}},t.scrollIntoView=function(e,t){var r=arguments.length>2&&void 0!==arguments[2]&&arguments[2],n=e.offsetParent;if(!n)return void console.error("offsetParent is not set -- cannot scroll");var o=e.offsetTop+e.clientTop,i=e.offsetLeft+e.clientLeft;for(;n.clientHeight===n.scrollHeight&&n.clientWidth===n.scrollWidth||r&&"hidden"===getComputedStyle(n).overflow;)if(n.dataset._scaleY&&(o/=n.dataset._scaleY,i/=n.dataset._scaleX),o+=n.offsetTop,i+=n.offsetLeft,!(n=n.offsetParent))return;t&&(void 0!==t.top&&(o+=t.top),void 0!==t.left&&(i+=t.left,n.scrollLeft=i));n.scrollTop=o},t.watchScroll=function(e,t){var r=function(r){o||(o=window.requestAnimationFrame((function(){o=null;var r=e.scrollLeft,i=n.lastX;r!==i&&(n.right=r>i),n.lastX=r;var a=e.scrollTop,s=n.lastY;a!==s&&(n.down=a>s),n.lastY=a,t(n)})))},n={right:!0,down:!0,lastX:e.scrollLeft,lastY:e.scrollTop,_eventHandler:r},o=null;return e.addEventListener("scroll",r,!0),n},t.binarySearchFirstItem=b,t.normalizeWheelEventDelta=function(e){var t=Math.sqrt(e.deltaX*e.deltaX+e.deltaY*e.deltaY),r=Math.atan2(e.deltaY,e.deltaX);-.25*Math.PI<r&&r<.75*Math.PI&&(t=-t);0===e.deltaMode?t/=900:1===e.deltaMode&&(t/=30);return t},t.waitOnEventOrTimeout=function(e){var t=e.target,r=e.name,n=e.delay,o=void 0===n?0:n;return new Promise((function(e,n){if("object"!==u(t)||!r||"string"!=typeof r||!(Number.isInteger(o)&&o>=0))throw new Error("waitOnEventOrTimeout - invalid parameters.");function i(n){t instanceof P?t.off(r,a):t.removeEventListener(r,a),l&&clearTimeout(l),e(n)}var a=i.bind(null,w.EVENT);t instanceof P?t.on(r,a):t.addEventListener(r,a);var s=i.bind(null,w.TIMEOUT),l=setTimeout(s,o)}))},t.moveToEndOfArray=function(e,t){for(var r=[],n=e.length,o=0,i=0;i<n;++i)t(e[i])?r.push(e[i]):(e[o]=e[i],++o);for(var a=0;o<n;++a,++o)e[o]=r[a]},t.WaitOnType=t.animationStarted=t.ProgressBar=t.EventBus=t.NullL10n=t.SpreadMode=t.ScrollMode=t.TextLayerMode=t.RendererType=t.PresentationModeState=t.VERTICAL_PADDING=t.SCROLLBAR_PADDING=t.MAX_AUTO_SCALE=t.UNKNOWN_SCALE=t.MAX_SCALE=t.MIN_SCALE=t.DEFAULT_SCALE=t.DEFAULT_SCALE_VALUE=t.CSS_UNITS=void 0;var n,o=(n=r(16))&&n.__esModule?n:{default:n};function i(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function a(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function s(e,t,r){return t&&a(e.prototype,t),r&&a(e,r),e}function u(e){return(u="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function l(e,t,r,n,o,i,a){try{var s=e[i](a),u=s.value}catch(e){return void r(e)}s.done?t(u):Promise.resolve(u).then(n,o)}function c(e){return function(){var t=this,r=arguments;return new Promise((function(n,o){var i=e.apply(t,r);function a(e){l(i,n,o,a,s,"next",e)}function s(e){l(i,n,o,a,s,"throw",e)}a(void 0)}))}}t.CSS_UNITS=96/72;t.DEFAULT_SCALE_VALUE="auto";t.DEFAULT_SCALE=1;t.MIN_SCALE=.1;t.MAX_SCALE=10;t.UNKNOWN_SCALE=0;t.MAX_AUTO_SCALE=1.25;t.SCROLLBAR_PADDING=40;t.VERTICAL_PADDING=5;t.PresentationModeState={UNKNOWN:0,NORMAL:1,CHANGING:2,FULLSCREEN:3};t.RendererType={CANVAS:"canvas",SVG:"svg"};t.TextLayerMode={DISABLE:0,ENABLE:1,ENABLE_ENHANCE:2};var f={UNKNOWN:-1,VERTICAL:0,HORIZONTAL:1,WRAPPED:2};t.ScrollMode=f;var h={UNKNOWN:-1,NONE:0,ODD:1,EVEN:2};function d(e,t){return t?e.replace(/\{\{\s*(\w+)\s*\}\}/g,(function(e,r){return r in t?t[r]:"{{"+r+"}}"})):e}t.SpreadMode=h;var p,y,v,m,g={getLanguage:(m=c(o.default.mark((function e(){return o.default.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt("return","en-us");case 1:case"end":return e.stop()}}),e,this)}))),function(){return m.apply(this,arguments)}),getDirection:(v=c(o.default.mark((function e(){return o.default.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt("return","ltr");case 1:case"end":return e.stop()}}),e,this)}))),function(){return v.apply(this,arguments)}),get:(y=c(o.default.mark((function e(t,r,n){return o.default.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt("return",d(n,r));case 1:case"end":return e.stop()}}),e,this)}))),function(e,t,r){return y.apply(this,arguments)}),translate:(p=c(o.default.mark((function e(t){return o.default.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:case"end":return e.stop()}}),e,this)}))),function(e){return p.apply(this,arguments)})};function b(e,t){var r=0,n=e.length-1;if(0===e.length||!t(e[n]))return e.length;if(t(e[r]))return r;for(;r<n;){var o=r+n>>1;t(e[o])?n=o:r=o+1}return r}function _(e,t,r){if(e<2)return e;var n=t[e].div,o=n.offsetTop+n.clientTop;o>=r&&(o=(n=t[e-1].div).offsetTop+n.clientTop);for(var i=e-2;i>=0&&!((n=t[i].div).offsetTop+n.clientTop+n.clientHeight<=o);--i)e=i;return e}t.NullL10n=g;var w={EVENT:"event",TIMEOUT:"timeout"};t.WaitOnType=w;var S=new Promise((function(e){"undefined"!=typeof window?window.requestAnimationFrame(e):setTimeout(e,20)}));t.animationStarted=S;var P=function(){function e(){var t=(arguments.length>0&&void 0!==arguments[0]?arguments[0]:{}).dispatchToDOM,r=void 0!==t&&t;i(this,e),this._listeners=Object.create(null),this._dispatchToDOM=!0===r}return s(e,[{key:"on",value:function(e,t){var r=this._listeners[e];r||(r=[],this._listeners[e]=r),r.push(t)}},{key:"off",value:function(e,t){var r,n=this._listeners[e];!n||(r=n.indexOf(t))<0||n.splice(r,1)}},{key:"dispatch",value:function(e){var t=this._listeners[e];if(t&&0!==t.length){var r=Array.prototype.slice.call(arguments,1);t.slice(0).forEach((function(e){e.apply(null,r)})),this._dispatchToDOM&&this._dispatchDOMEvent(e,r)}else if(this._dispatchToDOM){var n=Array.prototype.slice.call(arguments,1);this._dispatchDOMEvent(e,n)}}},{key:"_dispatchDOMEvent",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null,r=Object.create(null);if(t&&t.length>0){var n=t[0];for(var o in n){var i=n[o];if("source"!==o)r[o]=i;else if(i===window||i===document)return}}var a=document.createEvent("CustomEvent");a.initCustomEvent(e,!0,!0,r),document.dispatchEvent(a)}}]),e}();t.EventBus=P;var A=null;var k=function(){function e(t){var r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=r.height,o=r.width,a=r.units;i(this,e),this.visible=!0,this.div=document.querySelector(t+" .progress"),this.bar=this.div.parentNode,this.height=n||100,this.width=o||100,this.units=a||"%",this.div.style.height=this.height+this.units,this.percent=0}return s(e,[{key:"_updateBar",value:function(){if(this._indeterminate)return this.div.classList.add("indeterminate"),void(this.div.style.width=this.width+this.units);this.div.classList.remove("indeterminate");var e=this.width*this._percent/100;this.div.style.width=e+this.units}},{key:"setWidth",value:function(e){if(e){var t=e.parentNode.offsetWidth-e.offsetWidth;t>0&&this.bar.setAttribute("style","width: calc(100% - "+t+"px);")}}},{key:"hide",value:function(){this.visible&&(this.visible=!1,this.bar.classList.add("hidden"),document.body.classList.remove("loadingInProgress"))}},{key:"show",value:function(){this.visible||(this.visible=!0,document.body.classList.add("loadingInProgress"),this.bar.classList.remove("hidden"))}},{key:"percent",get:function(){return this._percent},set:function(e){var t,r,n;this._indeterminate=isNaN(e),this._percent=(t=e,r=0,n=100,Math.min(Math.max(t,r),n)),this._updateBar()}}]),e}();t.ProgressBar=k},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var n={NEED_PASSWORD:1,INCORRECT_PASSWORD:2};t.default=n},function(e,t,r){var n=r(5),o=r(31),i=r(76),a=r(77);function s(t){var r="function"==typeof Map?new Map:void 0;return e.exports=s=function(e){if(null===e||!i(e))return e;if("function"!=typeof e)throw new TypeError("Super expression must either be null or a function");if(void 0!==r){if(r.has(e))return r.get(e);r.set(e,t)}function t(){return a(e,arguments,n(this).constructor)}return t.prototype=Object.create(e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),o(t,e)},s(t)}e.exports=s},function(e,t){e.exports=function(e){return-1!==Function.toString.call(e).indexOf("[native code]")}},function(e,t,r){var n=r(31);function o(t,r,i){return!function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}()?e.exports=o=function(e,t,r){var o=[null];o.push.apply(o,t);var i=new(Function.bind.apply(e,o));return r&&n(i,r.prototype),i}:e.exports=o=Reflect.construct,o.apply(null,arguments)}e.exports=o},function(e,t,r){var n=r(79),o=r(80),i=r(81);e.exports=function(e){return n(e)||o(e)||i()}},function(e,t){e.exports=function(e){if(Array.isArray(e)){for(var t=0,r=new Array(e.length);t<e.length;t++)r[t]=e[t];return r}}},function(e,t){e.exports=function(e){if(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e))return Array.from(e)}},function(e,t){e.exports=function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}},function(e,t){var r="Expected a function",n=1/0,o=17976931348623157e292,i=NaN,a="[object Symbol]",s=/^\s+|\s+$/g,u=/^[-+]0x[0-9a-f]+$/i,l=/^0b[01]+$/i,c=/^0o[0-7]+$/i,f=parseInt,h=Object.prototype.toString;function d(e,t){var d;if("function"!=typeof t)throw new TypeError(r);return e=function(e){var t=function(e){if(!e)return 0===e?e:0;if((e=function(e){if("number"==typeof e)return e;if(function(e){return"symbol"==typeof e||function(e){return!!e&&"object"==typeof e}(e)&&h.call(e)==a}(e))return i;if(p(e)){var t="function"==typeof e.valueOf?e.valueOf():e;e=p(t)?t+"":t}if("string"!=typeof e)return 0===e?e:+e;e=e.replace(s,"");var r=l.test(e);return r||c.test(e)?f(e.slice(2),r?2:8):u.test(e)?i:+e}(e))===n||e===-n){return(e<0?-1:1)*o}return e==e?e:0}(e),r=t%1;return t==t?r?t-r:t:0}(e),function(){return--e>0&&(d=t.apply(this,arguments)),e<=1&&(t=void 0),d}}function p(e){var t=typeof e;return!!e&&("object"==t||"function"==t)}e.exports=function(e){return d(2,e)}},function(e,t,r){"use strict";var n=r(13),o=r(1);Object.defineProperty(t,"__esModule",{value:!0}),t.default=t.OutlineInternal=void 0;var i=o(r(30)),a=o(r(14)),s=o(r(16)),u=o(r(17)),l=o(r(4)),c=o(r(8)),f=o(r(9)),h=o(r(5)),d=o(r(11)),p=o(r(10)),y=o(r(7)),v=n(r(0)),m=o(r(2)),g=o(r(23)),b=o(r(32)),_=o(r(19)),w=o(r(43)),S=o(r(84)),P=r(12),A=r(15),k=function(e){function t(){var e,r;(0,l.default)(this,t);for(var n=arguments.length,o=new Array(n),i=0;i<n;i++)o[i]=arguments[i];return r=(0,f.default)(this,(e=(0,h.default)(t)).call.apply(e,[this].concat(o))),(0,y.default)((0,p.default)((0,p.default)(r)),"state",{outline:null}),(0,y.default)((0,p.default)((0,p.default)(r)),"loadOutline",(0,u.default)(s.default.mark((function e(){var t,n,o;return s.default.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return t=r.props.pdf,r.setState((function(e){return e.outline?{outline:null}:null})),e.prev=2,n=(0,P.makeCancellable)(t.getOutline()),r.runningTask=n,e.next=7,n.promise;case 7:o=e.sent,r.setState({outline:o},r.onLoadSuccess),e.next=14;break;case 11:e.prev=11,e.t0=e.catch(2),r.onLoadError(e.t0);case 14:case"end":return e.stop()}}),e,this,[[2,11]])})))),(0,y.default)((0,p.default)((0,p.default)(r)),"onLoadSuccess",(function(){var e=r.props.onLoadSuccess,t=r.state.outline;(0,P.callIfDefined)(e,t)})),(0,y.default)((0,p.default)((0,p.default)(r)),"onLoadError",(function(e){if(!(0,P.isCancelException)(e)){r.setState({outline:!1}),(0,P.errorOnDev)(e);var t=r.props.onLoadError;(0,P.callIfDefined)(t,e)}})),(0,y.default)((0,p.default)((0,p.default)(r)),"onItemClick",(function(e){var t=e.pageIndex,n=e.pageNumber,o=r.props.onItemClick;(0,P.callIfDefined)(o,{pageIndex:t,pageNumber:n})})),r}return(0,d.default)(t,e),(0,c.default)(t,[{key:"componentDidMount",value:function(){if(!this.props.pdf)throw new Error("Attempted to load an outline, but no document was specified.");this.loadOutline()}},{key:"componentDidUpdate",value:function(e){var t=this.props.pdf;e.pdf&&t!==e.pdf&&this.loadOutline()}},{key:"componentWillUnmount",value:function(){(0,P.cancelRunningTask)(this.runningTask)}},{key:"renderOutline",value:function(){var e=this.state.outline;return v.default.createElement("ul",null,e.map((function(e,t){return v.default.createElement(S.default,{key:"string"==typeof e.destination?e.destination:t,item:e})})))}},{key:"render",value:function(){var e=this.props.pdf,t=this.state.outline;if(!e||!t)return null;var r=this.props,n=r.className,o=r.inputRef;return v.default.createElement("div",(0,a.default)({className:(0,b.default)("react-pdf__Outline",n),ref:o},this.eventProps),v.default.createElement(w.default.Provider,{value:this.childContext},this.renderOutline()))}},{key:"childContext",get:function(){return{onClick:this.onItemClick}}},{key:"eventProps",get:function(){var e=this;return(0,g.default)(this.props,(function(){return e.state.outline}))}}]),t}(v.PureComponent);t.OutlineInternal=k,k.propTypes=(0,i.default)({className:A.isClassName,inputRef:m.default.func,onItemClick:m.default.func,onLoadError:m.default.func,onLoadSuccess:m.default.func,pdf:A.isPdf},(0,A.eventsProps)());var E=v.default.forwardRef((function(e,t){return v.default.createElement(_.default.Consumer,null,(function(r){return v.default.createElement(k,(0,a.default)({ref:t},r,e))}))}));t.default=E},function(e,t,r){"use strict";var n=r(13),o=r(1);Object.defineProperty(t,"__esModule",{value:!0}),t.default=t.OutlineItemInternal=void 0;var i=o(r(14)),a=o(r(40)),s=o(r(44)),u=o(r(16)),l=o(r(17)),c=o(r(4)),f=o(r(8)),h=o(r(9)),d=o(r(5)),p=o(r(11)),y=o(r(10)),v=o(r(7)),m=n(r(0)),g=o(r(2)),b=o(r(19)),_=o(r(43)),w=o(r(88)),S=r(12),P=r(15),A=function(e){function t(){var e,r;(0,c.default)(this,t);for(var n=arguments.length,o=new Array(n),i=0;i<n;i++)o[i]=arguments[i];return r=(0,h.default)(this,(e=(0,d.default)(t)).call.apply(e,[this].concat(o))),(0,v.default)((0,y.default)((0,y.default)(r)),"getDestination",(0,l.default)(u.default.mark((function e(){var t,n,o;return u.default.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(t=r.props,n=t.item,o=t.pdf,(0,S.isDefined)(r.destination)){e.next=9;break}if("string"!=typeof n.dest){e.next=8;break}return e.next=5,o.getDestination(n.dest);case 5:r.destination=e.sent,e.next=9;break;case 8:r.destination=n.dest;case 9:return e.abrupt("return",r.destination);case 10:case"end":return e.stop()}}),e,this)})))),(0,v.default)((0,y.default)((0,y.default)(r)),"getPageIndex",(0,l.default)(u.default.mark((function e(){var t,n,o,i;return u.default.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(t=r.props.pdf,(0,S.isDefined)(r.pageIndex)){e.next=10;break}return e.next=4,r.getDestination();case 4:if(!(n=e.sent)){e.next=10;break}return o=(0,s.default)(n,1),i=o[0],e.next=9,t.getPageIndex(new w.default(i));case 9:r.pageIndex=e.sent;case 10:return e.abrupt("return",r.pageIndex);case 11:case"end":return e.stop()}}),e,this)})))),(0,v.default)((0,y.default)((0,y.default)(r)),"getPageNumber",(0,l.default)(u.default.mark((function e(){return u.default.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if((0,S.isDefined)(r.pageNumber)){e.next=5;break}return e.next=3,r.getPageIndex();case 3:e.t0=e.sent,r.pageNumber=e.t0+1;case 5:return e.abrupt("return",r.pageNumber);case 6:case"end":return e.stop()}}),e,this)})))),(0,v.default)((0,y.default)((0,y.default)(r)),"onClick",function(){var e=(0,l.default)(u.default.mark((function e(t){var n,o,i;return u.default.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return n=r.props.onClick,t.preventDefault(),e.next=4,r.getPageIndex();case 4:return o=e.sent,e.next=7,r.getPageNumber();case 7:i=e.sent,(0,S.callIfDefined)(n,{pageIndex:o,pageNumber:i});case 9:case"end":return e.stop()}}),e,this)})));return function(t){return e.apply(this,arguments)}}()),r}return(0,p.default)(t,e),(0,f.default)(t,[{key:"renderSubitems",value:function(){var e=this.props,r=e.item,n=(0,a.default)(e,["item"]);if(!r.items||!r.items.length)return null;var o=r.items;return m.default.createElement("ul",null,o.map((function(e,r){return m.default.createElement(t,(0,i.default)({key:"string"==typeof e.destination?e.destination:r,item:e},n))})))}},{key:"render",value:function(){var e=this.props.item;return m.default.createElement("li",null,m.default.createElement("a",{href:"#",onClick:this.onClick},e.title),this.renderSubitems())}}]),t}(m.PureComponent);t.OutlineItemInternal=A;var k=g.default.oneOfType([g.default.string,g.default.arrayOf(g.default.any)]);A.propTypes={item:g.default.shape({title:g.default.string,destination:k,items:g.default.arrayOf(g.default.shape({title:g.default.string,destination:k}))}).isRequired,onClick:g.default.func,pdf:P.isPdf.isRequired};var E=function(e){return m.default.createElement(b.default.Consumer,null,(function(t){return m.default.createElement(_.default.Consumer,null,(function(r){return m.default.createElement(A,(0,i.default)({},t,r,e))}))}))};t.default=E},function(e,t){e.exports=function(e){if(Array.isArray(e))return e}},function(e,t){e.exports=function(e,t){if(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e)){var r=[],n=!0,o=!1,i=void 0;try{for(var a,s=e[Symbol.iterator]();!(n=(a=s.next()).done)&&(r.push(a.value),!t||r.length!==t);n=!0);}catch(e){o=!0,i=e}finally{try{n||null==s.return||s.return()}finally{if(o)throw i}}return r}}},function(e,t){e.exports=function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}},function(e,t,r){"use strict";var n=r(1);Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var o=n(r(4)),i=n(r(8)),a=function(){function e(t){var r=t.num,n=t.gen;(0,o.default)(this,e),this.num=r,this.gen=n}return(0,i.default)(e,[{key:"toString",value:function(){var e="".concat(this.num,"R");return 0!==this.gen&&(e+=this.gen),e}}]),e}();t.default=a},function(e,t,r){"use strict";var n=r(13),o=r(1);Object.defineProperty(t,"__esModule",{value:!0}),t.default=t.PageInternal=void 0;var i=o(r(30)),a=o(r(14)),s=o(r(16)),u=o(r(17)),l=o(r(4)),c=o(r(8)),f=o(r(9)),h=o(r(5)),d=o(r(11)),p=o(r(10)),y=o(r(7)),v=n(r(0)),m=o(r(2)),g=o(r(23)),b=o(r(32)),_=o(r(19)),w=o(r(18)),S=o(r(41)),P=o(r(90)),A=o(r(91)),k=o(r(92)),E=o(r(94)),x=r(12),O=r(15),R=function(e){function t(){var e,r;(0,l.default)(this,t);for(var n=arguments.length,o=new Array(n),i=0;i<n;i++)o[i]=arguments[i];return r=(0,f.default)(this,(e=(0,h.default)(t)).call.apply(e,[this].concat(o))),(0,y.default)((0,p.default)((0,p.default)(r)),"state",{page:null}),(0,y.default)((0,p.default)((0,p.default)(r)),"onLoadSuccess",(function(){var e=r.props,t=e.onLoadSuccess,n=e.registerPage,o=r.state.page;(0,x.callIfDefined)(t,(0,x.makePageCallback)(o,r.scale)),(0,x.callIfDefined)(n,r.pageIndex,r.ref)})),(0,y.default)((0,p.default)((0,p.default)(r)),"onLoadError",(function(e){if(!(0,x.isCancelException)(e)){(0,x.errorOnDev)(e);var t=r.props.onLoadError;(0,x.callIfDefined)(t,e)}})),(0,y.default)((0,p.default)((0,p.default)(r)),"loadPage",(0,u.default)(s.default.mark((function e(){var t,n,o,i;return s.default.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(t=r.props.pdf,n=r.getPageNumber()){e.next=4;break}return e.abrupt("return");case 4:return r.setState((function(e){return e.page?{page:null}:null})),e.prev=5,o=(0,x.makeCancellable)(t.getPage(n)),r.runningTask=o,e.next=10,o.promise;case 10:i=e.sent,r.setState({page:i},r.onLoadSuccess),e.next=18;break;case 14:e.prev=14,e.t0=e.catch(5),r.setState({page:!1}),r.onLoadError(e.t0);case 18:case"end":return e.stop()}}),e,this,[[5,14]])})))),r}return(0,d.default)(t,e),(0,c.default)(t,[{key:"componentDidMount",value:function(){if(!this.props.pdf)throw new Error("Attempted to load a page, but no document was specified.");this.loadPage()}},{key:"componentDidUpdate",value:function(e){var t=this.props.pdf;if(e.pdf&&t!==e.pdf||this.getPageNumber()!==this.getPageNumber(e)){var r=this.props.unregisterPage;(0,x.callIfDefined)(r,this.getPageIndex(e)),this.loadPage()}}},{key:"componentWillUnmount",value:function(){var e=this.props.unregisterPage;(0,x.callIfDefined)(e,this.pageIndex),(0,x.cancelRunningTask)(this.runningTask)}},{key:"getPageIndex",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:this.props;return(0,x.isProvided)(e.pageNumber)?e.pageNumber-1:(0,x.isProvided)(e.pageIndex)?e.pageIndex:null}},{key:"getPageNumber",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:this.props;return(0,x.isProvided)(e.pageNumber)?e.pageNumber:(0,x.isProvided)(e.pageIndex)?e.pageIndex+1:null}},{key:"renderMainLayer",value:function(){switch(this.props.renderMode){case"none":return null;case"svg":return v.default.createElement(A.default,{key:"".concat(this.pageKeyNoScale,"_svg")});case"canvas":default:return v.default.createElement(P.default,{key:"".concat(this.pageKey,"_canvas")})}}},{key:"renderTextLayer",value:function(){var e=this.props.renderTextLayer;return e?v.default.createElement(k.default,{key:"".concat(this.pageKey,"_text")}):null}},{key:"renderAnnotationLayer",value:function(){var e=this.props.renderAnnotationLayer;return e?v.default.createElement(E.default,{key:"".concat(this.pageKey,"_annotations")}):null}},{key:"renderChildren",value:function(){var e=this.props.children;return v.default.createElement(w.default.Provider,{value:this.childContext},this.renderMainLayer(),this.renderTextLayer(),this.renderAnnotationLayer(),e)}},{key:"renderContent",value:function(){var e=this.pageNumber,t=this.props.pdf,r=this.state.page;if(!e){var n=this.props.noData;return v.default.createElement(S.default,{type:"no-data"},"function"==typeof n?n():n)}if(null===t||null===r){var o=this.props.loading;return v.default.createElement(S.default,{type:"loading"},"function"==typeof o?o():o)}if(!1===t||!1===r){var i=this.props.error;return v.default.createElement(S.default,{type:"error"},"function"==typeof i?i():i)}return this.renderChildren()}},{key:"render",value:function(){var e=this,t=this.pageNumber,r=this.props.className;return v.default.createElement("div",(0,a.default)({className:(0,b.default)("react-pdf__Page",r),ref:function(t){var r=e.props.inputRef;r&&r(t),e.ref=t},style:{position:"relative"},"data-page-number":t},this.eventProps),this.renderContent())}},{key:"childContext",get:function(){var e=this.state.page;if(!e)return{};var t=this.props;return{customTextRenderer:t.customTextRenderer,onGetAnnotationsError:t.onGetAnnotationsError,onGetAnnotationsSuccess:t.onGetAnnotationsSuccess,onGetTextError:t.onGetTextError,onGetTextSuccess:t.onGetTextSuccess,onRenderAnnotationLayerError:t.onRenderAnnotationLayerError,onRenderAnnotationLayerSuccess:t.onRenderAnnotationLayerSuccess,onRenderError:t.onRenderError,onRenderSuccess:t.onRenderSuccess,page:e,renderInteractiveForms:t.renderInteractiveForms,rotate:this.rotate,scale:this.scale}}},{key:"pageIndex",get:function(){return this.getPageIndex()}},{key:"pageNumber",get:function(){return this.getPageNumber()}},{key:"rotate",get:function(){var e=this.props.rotate;if((0,x.isProvided)(e))return e;var t=this.state.page;return t?t.rotate:null}},{key:"scale",get:function(){var e=this.state.page;if(!e)return null;var t=this.props,r=t.scale,n=t.width,o=t.height,i=this.rotate,a=1,s=null===r?1:r;if(n||o){var u=e.getViewport({scale:1,rotation:i});a=n?n/u.width:o/u.height}return s*a}},{key:"eventProps",get:function(){var e=this;return(0,g.default)(this.props,(function(){var t=e.state.page;return t?(0,x.makePageCallback)(t,e.scale):t}))}},{key:"pageKey",get:function(){var e=this.state.page;return"".concat(e.pageIndex,"@").concat(this.scale,"/").concat(this.rotate)}},{key:"pageKeyNoScale",get:function(){var e=this.state.page;return"".concat(e.pageIndex,"/").concat(this.rotate)}}]),t}(v.PureComponent);t.PageInternal=R,R.defaultProps={error:"Failed to load the page.",loading:"Loading page…",noData:"No page specified.",renderAnnotationLayer:!0,renderInteractiveForms:!1,renderMode:"canvas",renderTextLayer:!0,scale:1},R.propTypes=(0,i.default)({children:m.default.node,className:O.isClassName,customTextRenderer:m.default.func,error:m.default.node,height:m.default.number,inputRef:m.default.func,loading:m.default.node,noData:m.default.node,onGetTextError:m.default.func,onGetTextSuccess:m.default.func,onLoadError:m.default.func,onLoadSuccess:m.default.func,onRenderError:m.default.func,onRenderSuccess:m.default.func,pageIndex:O.isPageIndex,pageNumber:O.isPageNumber,pdf:O.isPdf,registerPage:m.default.func,renderAnnotationLayer:m.default.bool,renderInteractiveForms:m.default.bool,renderMode:O.isRenderMode,renderTextLayer:m.default.bool,rotate:O.isRotate,scale:m.default.number,unregisterPage:m.default.func,width:m.default.number},(0,O.eventsProps)());var C=v.default.forwardRef((function(e,t){return v.default.createElement(_.default.Consumer,null,(function(r){return v.default.createElement(R,(0,a.default)({ref:t},r,e,{renderAnnotationLayer:void 0!==e.renderAnnotationLayer?e.renderAnnotationLayer:e.renderAnnotations}))}))}));t.default=C},function(e,t,r){"use strict";var n=r(13),o=r(1);Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){return d.default.createElement(y.default.Consumer,null,(function(t){return d.default.createElement(g,(0,i.default)({},t,e))}))},t.PageCanvasInternal=void 0;var i=o(r(14)),a=o(r(4)),s=o(r(8)),u=o(r(9)),l=o(r(5)),c=o(r(11)),f=o(r(10)),h=o(r(7)),d=n(r(0)),p=o(r(2)),y=o(r(18)),v=r(12),m=r(15),g=function(e){function t(){var e,r;(0,a.default)(this,t);for(var n=arguments.length,o=new Array(n),i=0;i<n;i++)o[i]=arguments[i];return r=(0,u.default)(this,(e=(0,l.default)(t)).call.apply(e,[this].concat(o))),(0,h.default)((0,f.default)((0,f.default)(r)),"onRenderSuccess",(function(){r.renderer=null;var e=r.props,t=e.onRenderSuccess,n=e.page,o=e.scale;(0,v.callIfDefined)(t,(0,v.makePageCallback)(n,o))})),(0,h.default)((0,f.default)((0,f.default)(r)),"onRenderError",(function(e){if(!(0,v.isCancelException)(e)){(0,v.errorOnDev)(e);var t=r.props.onRenderError;(0,v.callIfDefined)(t,e)}})),(0,h.default)((0,f.default)((0,f.default)(r)),"drawPageOnCanvas",(function(){var e=(0,f.default)((0,f.default)(r)).canvasLayer;if(!e)return null;var t=(0,f.default)((0,f.default)(r)),n=t.renderViewport,o=t.viewport,i=r.props,a=i.page,s=i.renderInteractiveForms;e.width=n.width,e.height=n.height,e.style.width="".concat(Math.floor(o.width),"px"),e.style.height="".concat(Math.floor(o.height),"px");var u={get canvasContext(){return e.getContext("2d")},viewport:n,renderInteractiveForms:s};return r.cancelRenderingTask(),r.renderer=a.render(u),r.renderer.promise.then(r.onRenderSuccess).catch(r.onRenderError)})),r}return(0,c.default)(t,e),(0,s.default)(t,[{key:"componentDidMount",value:function(){this.drawPageOnCanvas()}},{key:"componentDidUpdate",value:function(e){var t=this.props,r=t.page;t.renderInteractiveForms!==e.renderInteractiveForms&&(r.cleanup(),this.drawPageOnCanvas())}},{key:"componentWillUnmount",value:function(){this.cancelRenderingTask(),this.canvasLayer&&(this.canvasLayer.width=0,this.canvasLayer.height=0,this.canvasLayer=null)}},{key:"cancelRenderingTask",value:function(){this.renderer&&this.renderer._internalRenderTask.running&&this.renderer._internalRenderTask.cancel()}},{key:"render",value:function(){var e=this;return d.default.createElement("canvas",{className:"react-pdf__Page__canvas",style:{display:"block",userSelect:"none"},ref:function(t){e.canvasLayer=t}})}},{key:"renderViewport",get:function(){var e=this.props,t=e.page,r=e.rotate,n=e.scale,o=(0,v.getPixelRatio)();return t.getViewport({scale:n*o,rotation:r})}},{key:"viewport",get:function(){var e=this.props,t=e.page,r=e.rotate,n=e.scale;return t.getViewport({scale:n,rotation:r})}}]),t}(d.PureComponent);t.PageCanvasInternal=g,g.propTypes={onRenderError:p.default.func,onRenderSuccess:p.default.func,page:m.isPage.isRequired,renderInteractiveForms:p.default.bool,rotate:m.isRotate,scale:p.default.number}},function(e,t,r){"use strict";var n=r(13),o=r(1);Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){return d.default.createElement(v.default.Consumer,null,(function(t){return d.default.createElement(b,(0,i.default)({},t,e))}))},t.PageSVGInternal=void 0;var i=o(r(14)),a=o(r(4)),s=o(r(8)),u=o(r(9)),l=o(r(5)),c=o(r(11)),f=o(r(10)),h=o(r(7)),d=n(r(0)),p=o(r(2)),y=o(r(21)),v=o(r(18)),m=r(12),g=r(15),b=function(e){function t(){var e,r;(0,a.default)(this,t);for(var n=arguments.length,o=new Array(n),i=0;i<n;i++)o[i]=arguments[i];return r=(0,u.default)(this,(e=(0,l.default)(t)).call.apply(e,[this].concat(o))),(0,h.default)((0,f.default)((0,f.default)(r)),"state",{svg:null}),(0,h.default)((0,f.default)((0,f.default)(r)),"onRenderSuccess",(function(){r.renderer=null;var e=r.props,t=e.onRenderSuccess,n=e.page,o=e.scale;(0,m.callIfDefined)(t,(0,m.makePageCallback)(n,o))})),(0,h.default)((0,f.default)((0,f.default)(r)),"onRenderError",(function(e){if(!(0,m.isCancelException)(e)){(0,m.errorOnDev)(e);var t=r.props.onRenderError;(0,m.callIfDefined)(t,e)}})),(0,h.default)((0,f.default)((0,f.default)(r)),"renderSVG",(function(){var e=r.props.page;return r.renderer=e.getOperatorList(),r.renderer.then((function(t){var n=new y.default.SVGGraphics(e.commonObjs,e.objs);r.renderer=n.getSVG(t,r.viewport).then((function(e){r.setState({svg:e},r.onRenderSuccess)})).catch(r.onRenderError)})).catch(r.onRenderError)})),(0,h.default)((0,f.default)((0,f.default)(r)),"drawPageOnContainer",(function(e){var t=r.state.svg;if(e&&t){e.firstElementChild||e.appendChild(t);var n=r.viewport,o=n.width,i=n.height;t.setAttribute("width",o),t.setAttribute("height",i)}})),r}return(0,c.default)(t,e),(0,s.default)(t,[{key:"componentDidMount",value:function(){this.renderSVG()}},{key:"render",value:function(){var e=this,t=this.viewport,r=t.width,n=t.height;return d.default.createElement("div",{className:"react-pdf__Page__svg",style:{display:"block",backgroundColor:"white",overflow:"hidden",width:r,height:n,userSelect:"none"},ref:function(t){return e.drawPageOnContainer(t)}})}},{key:"viewport",get:function(){var e=this.props,t=e.page,r=e.rotate,n=e.scale;return t.getViewport({scale:n,rotation:r})}}]),t}(d.PureComponent);t.PageSVGInternal=b,b.propTypes={onRenderError:p.default.func,onRenderSuccess:p.default.func,page:g.isPage.isRequired,rotate:g.isRotate,scale:p.default.number}},function(e,t,r){"use strict";var n=r(13),o=r(1);Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){return y.default.createElement(m.default.Consumer,null,(function(t){return y.default.createElement(w,(0,i.default)({},t,e))}))},t.TextLayerInternal=void 0;var i=o(r(14)),a=o(r(16)),s=o(r(17)),u=o(r(4)),l=o(r(8)),c=o(r(9)),f=o(r(5)),h=o(r(11)),d=o(r(10)),p=o(r(7)),y=n(r(0)),v=o(r(2)),m=o(r(18)),g=o(r(93)),b=r(12),_=r(15),w=function(e){function t(){var e,r;(0,u.default)(this,t);for(var n=arguments.length,o=new Array(n),i=0;i<n;i++)o[i]=arguments[i];return r=(0,c.default)(this,(e=(0,f.default)(t)).call.apply(e,[this].concat(o))),(0,p.default)((0,d.default)((0,d.default)(r)),"state",{textItems:null}),(0,p.default)((0,d.default)((0,d.default)(r)),"loadTextItems",(0,s.default)(a.default.mark((function e(){var t,n,o,i;return a.default.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return t=r.props.page,e.prev=1,n=(0,b.makeCancellable)(t.getTextContent()),r.runningTask=n,e.next=6,n.promise;case 6:o=e.sent,i=o.items,r.setState({textItems:i},r.onLoadSuccess),e.next=14;break;case 11:e.prev=11,e.t0=e.catch(1),r.onLoadError(e.t0);case 14:case"end":return e.stop()}}),e,this,[[1,11]])})))),(0,p.default)((0,d.default)((0,d.default)(r)),"onLoadSuccess",(function(){var e=r.props.onGetTextSuccess,t=r.state.textItems;(0,b.callIfDefined)(e,t)})),(0,p.default)((0,d.default)((0,d.default)(r)),"onLoadError",(function(e){if(!(0,b.isCancelException)(e)){r.setState({textItems:!1}),(0,b.errorOnDev)(e);var t=r.props.onGetTextError;(0,b.callIfDefined)(t,e)}})),r}return(0,h.default)(t,e),(0,l.default)(t,[{key:"componentDidMount",value:function(){if(!this.props.page)throw new Error("Attempted to load page text content, but no page was specified.");this.loadTextItems()}},{key:"componentDidUpdate",value:function(e){var t=this.props.page;e.page&&t!==e.page&&this.loadTextItems()}},{key:"componentWillUnmount",value:function(){(0,b.cancelRunningTask)(this.runningTask)}},{key:"renderTextItems",value:function(){var e=this.state.textItems;return e?e.map((function(e,t){return y.default.createElement(g.default,(0,i.default)({key:t,itemIndex:t},e))})):null}},{key:"render",value:function(){var e=this.unrotatedViewport,t=this.rotate;return y.default.createElement("div",{className:"react-pdf__Page__textContent",style:{position:"absolute",top:"50%",left:"50%",width:"".concat(e.width,"px"),height:"".concat(e.height,"px"),color:"transparent",transform:"translate(-50%, -50%) rotate(".concat(t,"deg)"),pointerEvents:"none"}},this.renderTextItems())}},{key:"unrotatedViewport",get:function(){var e=this.props,t=e.page,r=e.scale;return t.getViewport({scale:r})}},{key:"rotate",get:function(){var e=this.props,t=e.page;return e.rotate-t.rotate}}]),t}(y.PureComponent);t.TextLayerInternal=w,w.propTypes={onGetTextError:v.default.func,onGetTextSuccess:v.default.func,page:_.isPage.isRequired,rotate:_.isRotate,scale:v.default.number}},function(e,t,r){"use strict";var n=r(13),o=r(1);Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){return v.default.createElement(g.default.Consumer,null,(function(t){return v.default.createElement(_,(0,i.default)({},t,e))}))},t.TextLayerItemInternal=void 0;var i=o(r(14)),a=o(r(44)),s=o(r(16)),u=o(r(17)),l=o(r(4)),c=o(r(8)),f=o(r(9)),h=o(r(5)),d=o(r(11)),p=o(r(10)),y=o(r(7)),v=n(r(0)),m=o(r(2)),g=o(r(18)),b=r(15),_=function(e){function t(){var e,r;(0,l.default)(this,t);for(var n=arguments.length,o=new Array(n),i=0;i<n;i++)o[i]=arguments[i];return r=(0,f.default)(this,(e=(0,h.default)(t)).call.apply(e,[this].concat(o))),(0,y.default)((0,p.default)((0,p.default)(r)),"getElementWidth",(function(e){var t=(0,p.default)((0,p.default)(r)).sideways;return e.getBoundingClientRect()[t?"height":"width"]})),r}var r,n;return(0,d.default)(t,e),(0,c.default)(t,[{key:"componentDidMount",value:function(){this.alignTextItem()}},{key:"componentDidUpdate",value:function(){this.alignTextItem()}},{key:"getFontData",value:(n=(0,u.default)(s.default.mark((function e(t){var r,n;return s.default.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return r=this.props.page,e.next=3,new Promise((function(e){r.commonObjs.get(t,e)}));case 3:return n=e.sent,e.abrupt("return",n);case 5:case"end":return e.stop()}}),e,this)}))),function(e){return n.apply(this,arguments)})},{key:"alignTextItem",value:(r=(0,u.default)(s.default.mark((function e(){var t,r,n,o,i,a,u,l,c,f,h;return s.default.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(t=this.item){e.next=3;break}return e.abrupt("return");case 3:return t.style.transform="",r=this.props,n=r.fontName,o=r.scale,i=r.width,t.style.fontFamily="".concat(n,", sans-serif"),e.next=8,this.getFontData(n);case 8:a=e.sent,u=a?a.fallbackName:"sans-serif",t.style.fontFamily="".concat(n,", ").concat(u),l=i*o,c=this.getElementWidth(t),f="scaleX(".concat(l/c,")"),(h=a?a.ascent:0)&&(f+=" translateY(".concat(100*(1-h),"%)")),t.style.transform=f;case 17:case"end":return e.stop()}}),e,this)}))),function(){return r.apply(this,arguments)})},{key:"render",value:function(){var e=this,t=this.fontSize,r=this.top,n=this.left,o=this.props,i=o.customTextRenderer,a=o.scale,s=o.str;return v.default.createElement("span",{style:{height:"1em",fontFamily:"sans-serif",fontSize:"".concat(t*a,"px"),position:"absolute",top:"".concat(r*a,"px"),left:"".concat(n*a,"px"),transformOrigin:"left bottom",whiteSpace:"pre",pointerEvents:"all"},ref:function(t){e.item=t}},i?i(this.props):s)}},{key:"unrotatedViewport",get:function(){var e=this.props,t=e.page,r=e.scale;return t.getViewport({scale:r})}},{key:"rotate",get:function(){var e=this.props,t=e.page;return e.rotate-t.rotate}},{key:"sideways",get:function(){return this.rotate%180!=0}},{key:"defaultSideways",get:function(){return this.unrotatedViewport.rotation%180!=0}},{key:"fontSize",get:function(){var e=this.props.transform,t=this.defaultSideways,r=(0,a.default)(e,2),n=r[0],o=r[1];return t?o:n}},{key:"top",get:function(){var e=this.props.transform,t=this.unrotatedViewport,r=this.defaultSideways,n=(0,a.default)(e,6),o=n[2],i=n[3],s=n[4],u=n[5],l=(0,a.default)(t.viewBox,4),c=l[1],f=l[3];return r?s+o+c:f-(u+i)}},{key:"left",get:function(){var e=this.props.transform,t=this.unrotatedViewport,r=this.defaultSideways,n=(0,a.default)(e,6),o=n[4],i=n[5],s=(0,a.default)(t.viewBox,1)[0];return r?i-s:o-s}}]),t}(v.PureComponent);t.TextLayerItemInternal=_,_.propTypes={customTextRenderer:m.default.func,fontName:m.default.string.isRequired,itemIndex:m.default.number.isRequired,page:b.isPage.isRequired,rotate:b.isRotate,scale:m.default.number,str:m.default.string.isRequired,transform:m.default.arrayOf(m.default.number).isRequired,width:m.default.number.isRequired}},function(e,t,r){"use strict";var n=r(13),o=r(1);Object.defineProperty(t,"__esModule",{value:!0}),t.default=t.AnnotationLayerInternal=void 0;var i=o(r(14)),a=o(r(16)),s=o(r(17)),u=o(r(4)),l=o(r(8)),c=o(r(9)),f=o(r(5)),h=o(r(11)),d=o(r(10)),p=o(r(7)),y=n(r(0)),v=o(r(2)),m=o(r(21)),g=o(r(19)),b=o(r(18)),_=r(12),w=r(15),S=function(e){function t(){var e,r;(0,u.default)(this,t);for(var n=arguments.length,o=new Array(n),i=0;i<n;i++)o[i]=arguments[i];return r=(0,c.default)(this,(e=(0,f.default)(t)).call.apply(e,[this].concat(o))),(0,p.default)((0,d.default)((0,d.default)(r)),"state",{annotations:null}),(0,p.default)((0,d.default)((0,d.default)(r)),"loadAnnotations",(0,s.default)(a.default.mark((function e(){var t,n,o;return a.default.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return t=r.props.page,e.prev=1,n=(0,_.makeCancellable)(t.getAnnotations()),r.runningTask=n,e.next=6,n.promise;case 6:o=e.sent,r.setState({annotations:o},r.onLoadSuccess),e.next=13;break;case 10:e.prev=10,e.t0=e.catch(1),r.onLoadError(e.t0);case 13:case"end":return e.stop()}}),e,this,[[1,10]])})))),(0,p.default)((0,d.default)((0,d.default)(r)),"onLoadSuccess",(function(){var e=r.props.onGetAnnotationsSuccess,t=r.state.annotations;(0,_.callIfDefined)(e,t)})),(0,p.default)((0,d.default)((0,d.default)(r)),"onLoadError",(function(e){if(!(0,_.isCancelException)(e)){r.setState({annotations:!1}),(0,_.errorOnDev)(e);var t=r.props.onGetAnnotationsError;(0,_.callIfDefined)(t,e)}})),(0,p.default)((0,d.default)((0,d.default)(r)),"onRenderSuccess",(function(){var e=r.props.onRenderAnnotationLayerSuccess;(0,_.callIfDefined)(e)})),(0,p.default)((0,d.default)((0,d.default)(r)),"onRenderError",(function(e){if(!(0,_.isCancelException)(e)){(0,_.errorOnDev)(e);var t=r.props.onRenderAnnotationLayerError;(0,_.callIfDefined)(t,e)}})),r}return(0,h.default)(t,e),(0,l.default)(t,[{key:"componentDidMount",value:function(){if(!this.props.page)throw new Error("Attempted to load page annotations, but no page was specified.");this.loadAnnotations()}},{key:"componentDidUpdate",value:function(e){var t=this.props,r=t.page,n=t.renderInteractiveForms;(e.page&&r!==e.page||n!==e.renderInteractiveForms)&&this.loadAnnotations()}},{key:"componentWillUnmount",value:function(){(0,_.cancelRunningTask)(this.runningTask)}},{key:"renderAnnotationLayer",value:function(){var e=this.state.annotations;if(e){var t=this.props,r=t.linkService,n=t.page,o=t.renderInteractiveForms,i=this.viewport.clone({dontFlip:!0}),a={annotations:e,div:this.annotationLayer,linkService:r,page:n,renderInteractiveForms:o,viewport:i};this.annotationLayer.innerHTML="";try{m.default.AnnotationLayer.render(a),this.onRenderSuccess()}catch(e){this.onRenderError(e)}}}},{key:"render",value:function(){var e=this;return y.default.createElement("div",{className:"react-pdf__Page__annotations annotationLayer",ref:function(t){e.annotationLayer=t}},this.renderAnnotationLayer())}},{key:"viewport",get:function(){var e=this.props,t=e.page,r=e.rotate,n=e.scale;return t.getViewport({scale:n,rotation:r})}}]),t}(y.PureComponent);t.AnnotationLayerInternal=S,S.propTypes={linkService:w.isLinkService.isRequired,onGetAnnotationsError:v.default.func,onGetAnnotationsSuccess:v.default.func,onRenderAnnotationLayerError:v.default.func,onRenderAnnotationLayerSuccess:v.default.func,page:w.isPage,renderInteractiveForms:v.default.bool,rotate:w.isRotate,scale:v.default.number};var P=function(e){return y.default.createElement(g.default.Consumer,null,(function(t){return y.default.createElement(b.default.Consumer,null,(function(r){return y.default.createElement(S,(0,i.default)({},t,r,e))}))}))};t.default=P},function(e,t,r){"use strict";r.r(t);var n=r(0),o=r.n(n),i=r(2),a=r.n(i);var s=r(45),u=r.n(s),l=r(33);function c(e){return(c="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function f(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function h(e){return(h=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function d(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function p(e,t){return(p=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function y(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}var v=function(e){function t(e){var r;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),r=function(e,t){return!t||"object"!==c(t)&&"function"!=typeof t?d(e):t}(this,h(t).call(this,e)),y(d(r),"state",{pdfTotalPages:null,pdfPageNumber:1,dimensions:{width:0,height:0}}),y(d(r),"previousPage",(function(){return r.changePdfPage(-1)})),y(d(r),"nextPage",(function(){return r.changePdfPage(1)})),r.targetRef=o.a.createRef(),r.onPDFDocumentLoadSuccess=r.onPDFDocumentLoadSuccess.bind(d(r)),r.changePdfPage=r.changePdfPage.bind(d(r)),r}var r,n,i;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&p(e,t)}(t,e),r=t,(n=[{key:"onPDFDocumentLoadSuccess",value:function(e){this.setState({pdfTotalPages:e._pdfInfo.numPages})}},{key:"changePdfPage",value:function(e){this.setState({pdfPageNumber:this.state.pdfPageNumber+e})}},{key:"componentDidMount",value:function(){this.targetRef.current&&this.setState({dimensions:{width:this.targetRef.current.offsetWidth,height:this.targetRef.current.offsetHight}})}},{key:"render",value:function(){var e,t=this.props.fileInfo;return e=t.fileType,new RegExp("jpg|jpeg|gif|png","gi").test(e)?o.a.createElement("img",{src:t.src,width:"100%"}):function(e){return!!new RegExp("mp4|mp3","gi").test(e)}(t.fileType)?o.a.createElement(u.a,{width:"100%",url:t.src,playing:!1,controls:!0,loop:!0}):function(e){return!!new RegExp("pdf","gi").test(e)}(t.fileType)?o.a.createElement("div",{ref:this.targetRef,width:"100%"},o.a.createElement(l.Document,{file:t.src,onLoadSuccess:this.onPDFDocumentLoadSuccess,onLoadError:console.error},o.a.createElement(l.Page,{pageNumber:this.state.pdfPageNumber||1,width:this.state.dimensions.width})),o.a.createElement("button",{type:"button",disabled:this.state.pdfPageNumber<=1,onClick:this.previousPage,style:{color:"green",border:"1px green solid"}},"Previous"),o.a.createElement("button",{type:"button",disabled:this.state.pdfPageNumber>=this.state.pdfTotalPages,onClick:this.nextPage,style:{color:"green",border:"1px green solid"}},"Next"),o.a.createElement("span",null," \t   "," Page ",this.state.pdfPageNumber," of ",this.state.pdfTotalPages," ")):[]}}])&&f(r.prototype,n),i&&f(r,i),t}(o.a.Component);v.propTypes={fileInfo:a.a.object.isRequired};t.default=v}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,